// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/payment/service/wechatpay.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MpRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MpRequestMultiError, or nil
// if none found.
func (m *MpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OutTradeNo

	if len(errors) > 0 {
		return MpRequestMultiError(errors)
	}
	return nil
}

// MpRequestMultiError is an error wrapping multiple validation errors returned
// by MpRequest.ValidateAll() if the designated constraints aren't met.
type MpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MpRequestMultiError) AllErrors() []error { return m }

// MpRequestValidationError is the validation error returned by
// MpRequest.Validate if the designated constraints aren't met.
type MpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MpRequestValidationError) ErrorName() string { return "MpRequestValidationError" }

// Error satisfies the builtin error interface
func (e MpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MpRequestValidationError{}

// Validate checks the field values on MpReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MpReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MpReply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MpReplyMultiError, or nil if none found.
func (m *MpReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MpReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MpReplyMultiError(errors)
	}
	return nil
}

// MpReplyMultiError is an error wrapping multiple validation errors returned
// by MpReply.ValidateAll() if the designated constraints aren't met.
type MpReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MpReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MpReplyMultiError) AllErrors() []error { return m }

// MpReplyValidationError is the validation error returned by MpReply.Validate
// if the designated constraints aren't met.
type MpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MpReplyValidationError) ErrorName() string { return "MpReplyValidationError" }

// Error satisfies the builtin error interface
func (e MpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MpReplyValidationError{}

// Validate checks the field values on MiniRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MiniRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiniRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MiniRequestMultiError, or
// nil if none found.
func (m *MiniRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MiniRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OutTradeNo

	if len(errors) > 0 {
		return MiniRequestMultiError(errors)
	}
	return nil
}

// MiniRequestMultiError is an error wrapping multiple validation errors
// returned by MiniRequest.ValidateAll() if the designated constraints aren't met.
type MiniRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiniRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiniRequestMultiError) AllErrors() []error { return m }

// MiniRequestValidationError is the validation error returned by
// MiniRequest.Validate if the designated constraints aren't met.
type MiniRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiniRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiniRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiniRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiniRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiniRequestValidationError) ErrorName() string { return "MiniRequestValidationError" }

// Error satisfies the builtin error interface
func (e MiniRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiniRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiniRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiniRequestValidationError{}

// Validate checks the field values on MiniReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MiniReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiniReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MiniReplyMultiError, or nil
// if none found.
func (m *MiniReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MiniReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MiniReplyMultiError(errors)
	}
	return nil
}

// MiniReplyMultiError is an error wrapping multiple validation errors returned
// by MiniReply.ValidateAll() if the designated constraints aren't met.
type MiniReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiniReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiniReplyMultiError) AllErrors() []error { return m }

// MiniReplyValidationError is the validation error returned by
// MiniReply.Validate if the designated constraints aren't met.
type MiniReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiniReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiniReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiniReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiniReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiniReplyValidationError) ErrorName() string { return "MiniReplyValidationError" }

// Error satisfies the builtin error interface
func (e MiniReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiniReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiniReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiniReplyValidationError{}

// Validate checks the field values on ScanRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScanRequestMultiError, or
// nil if none found.
func (m *ScanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScanRequestMultiError(errors)
	}
	return nil
}

// ScanRequestMultiError is an error wrapping multiple validation errors
// returned by ScanRequest.ValidateAll() if the designated constraints aren't met.
type ScanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanRequestMultiError) AllErrors() []error { return m }

// ScanRequestValidationError is the validation error returned by
// ScanRequest.Validate if the designated constraints aren't met.
type ScanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanRequestValidationError) ErrorName() string { return "ScanRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanRequestValidationError{}

// Validate checks the field values on ScanReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScanReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScanReplyMultiError, or nil
// if none found.
func (m *ScanReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScanReplyMultiError(errors)
	}
	return nil
}

// ScanReplyMultiError is an error wrapping multiple validation errors returned
// by ScanReply.ValidateAll() if the designated constraints aren't met.
type ScanReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanReplyMultiError) AllErrors() []error { return m }

// ScanReplyValidationError is the validation error returned by
// ScanReply.Validate if the designated constraints aren't met.
type ScanReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanReplyValidationError) ErrorName() string { return "ScanReplyValidationError" }

// Error satisfies the builtin error interface
func (e ScanReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanReplyValidationError{}

// Validate checks the field values on AppRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppRequestMultiError, or
// nil if none found.
func (m *AppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AppRequestMultiError(errors)
	}
	return nil
}

// AppRequestMultiError is an error wrapping multiple validation errors
// returned by AppRequest.ValidateAll() if the designated constraints aren't met.
type AppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppRequestMultiError) AllErrors() []error { return m }

// AppRequestValidationError is the validation error returned by
// AppRequest.Validate if the designated constraints aren't met.
type AppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppRequestValidationError) ErrorName() string { return "AppRequestValidationError" }

// Error satisfies the builtin error interface
func (e AppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppRequestValidationError{}

// Validate checks the field values on AppReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppReplyMultiError, or nil
// if none found.
func (m *AppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AppReplyMultiError(errors)
	}
	return nil
}

// AppReplyMultiError is an error wrapping multiple validation errors returned
// by AppReply.ValidateAll() if the designated constraints aren't met.
type AppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppReplyMultiError) AllErrors() []error { return m }

// AppReplyValidationError is the validation error returned by
// AppReply.Validate if the designated constraints aren't met.
type AppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppReplyValidationError) ErrorName() string { return "AppReplyValidationError" }

// Error satisfies the builtin error interface
func (e AppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppReplyValidationError{}

// Validate checks the field values on QueryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryRequestMultiError, or
// nil if none found.
func (m *QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for OutTradeNo

	if len(errors) > 0 {
		return QueryRequestMultiError(errors)
	}
	return nil
}

// QueryRequestMultiError is an error wrapping multiple validation errors
// returned by QueryRequest.ValidateAll() if the designated constraints aren't met.
type QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRequestMultiError) AllErrors() []error { return m }

// QueryRequestValidationError is the validation error returned by
// QueryRequest.Validate if the designated constraints aren't met.
type QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRequestValidationError) ErrorName() string { return "QueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRequestValidationError{}

// Validate checks the field values on QueryReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryReplyMultiError, or
// nil if none found.
func (m *QueryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryReplyMultiError(errors)
	}
	return nil
}

// QueryReplyMultiError is an error wrapping multiple validation errors
// returned by QueryReply.ValidateAll() if the designated constraints aren't met.
type QueryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryReplyMultiError) AllErrors() []error { return m }

// QueryReplyValidationError is the validation error returned by
// QueryReply.Validate if the designated constraints aren't met.
type QueryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryReplyValidationError) ErrorName() string { return "QueryReplyValidationError" }

// Error satisfies the builtin error interface
func (e QueryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryReplyValidationError{}

// Validate checks the field values on QueryRefundRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryRefundRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRefundRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryRefundRequestMultiError, or nil if none found.
func (m *QueryRefundRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRefundRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryRefundRequestMultiError(errors)
	}
	return nil
}

// QueryRefundRequestMultiError is an error wrapping multiple validation errors
// returned by QueryRefundRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryRefundRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRefundRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRefundRequestMultiError) AllErrors() []error { return m }

// QueryRefundRequestValidationError is the validation error returned by
// QueryRefundRequest.Validate if the designated constraints aren't met.
type QueryRefundRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRefundRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRefundRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRefundRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRefundRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRefundRequestValidationError) ErrorName() string {
	return "QueryRefundRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryRefundRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRefundRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRefundRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRefundRequestValidationError{}

// Validate checks the field values on QueryRefundReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryRefundReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRefundReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryRefundReplyMultiError, or nil if none found.
func (m *QueryRefundReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRefundReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryRefundReplyMultiError(errors)
	}
	return nil
}

// QueryRefundReplyMultiError is an error wrapping multiple validation errors
// returned by QueryRefundReply.ValidateAll() if the designated constraints
// aren't met.
type QueryRefundReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRefundReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRefundReplyMultiError) AllErrors() []error { return m }

// QueryRefundReplyValidationError is the validation error returned by
// QueryRefundReply.Validate if the designated constraints aren't met.
type QueryRefundReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRefundReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRefundReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRefundReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRefundReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRefundReplyValidationError) ErrorName() string { return "QueryRefundReplyValidationError" }

// Error satisfies the builtin error interface
func (e QueryRefundReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRefundReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRefundReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRefundReplyValidationError{}

// Validate checks the field values on RefundRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefundRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefundRequestMultiError, or
// nil if none found.
func (m *RefundRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefundRequestMultiError(errors)
	}
	return nil
}

// RefundRequestMultiError is an error wrapping multiple validation errors
// returned by RefundRequest.ValidateAll() if the designated constraints
// aren't met.
type RefundRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundRequestMultiError) AllErrors() []error { return m }

// RefundRequestValidationError is the validation error returned by
// RefundRequest.Validate if the designated constraints aren't met.
type RefundRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundRequestValidationError) ErrorName() string { return "RefundRequestValidationError" }

// Error satisfies the builtin error interface
func (e RefundRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundRequestValidationError{}

// Validate checks the field values on RefundReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefundReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefundReplyMultiError, or
// nil if none found.
func (m *RefundReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefundReplyMultiError(errors)
	}
	return nil
}

// RefundReplyMultiError is an error wrapping multiple validation errors
// returned by RefundReply.ValidateAll() if the designated constraints aren't met.
type RefundReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundReplyMultiError) AllErrors() []error { return m }

// RefundReplyValidationError is the validation error returned by
// RefundReply.Validate if the designated constraints aren't met.
type RefundReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundReplyValidationError) ErrorName() string { return "RefundReplyValidationError" }

// Error satisfies the builtin error interface
func (e RefundReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundReplyValidationError{}

// Validate checks the field values on NotifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyRequestMultiError, or
// nil if none found.
func (m *NotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotifyRequestMultiError(errors)
	}
	return nil
}

// NotifyRequestMultiError is an error wrapping multiple validation errors
// returned by NotifyRequest.ValidateAll() if the designated constraints
// aren't met.
type NotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyRequestMultiError) AllErrors() []error { return m }

// NotifyRequestValidationError is the validation error returned by
// NotifyRequest.Validate if the designated constraints aren't met.
type NotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyRequestValidationError) ErrorName() string { return "NotifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e NotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyRequestValidationError{}

// Validate checks the field values on NotifyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyReplyMultiError, or
// nil if none found.
func (m *NotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotifyReplyMultiError(errors)
	}
	return nil
}

// NotifyReplyMultiError is an error wrapping multiple validation errors
// returned by NotifyReply.ValidateAll() if the designated constraints aren't met.
type NotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyReplyMultiError) AllErrors() []error { return m }

// NotifyReplyValidationError is the validation error returned by
// NotifyReply.Validate if the designated constraints aren't met.
type NotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyReplyValidationError) ErrorName() string { return "NotifyReplyValidationError" }

// Error satisfies the builtin error interface
func (e NotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyReplyValidationError{}

// Validate checks the field values on NotifyRefundRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyRefundRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyRefundRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyRefundRequestMultiError, or nil if none found.
func (m *NotifyRefundRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyRefundRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotifyRefundRequestMultiError(errors)
	}
	return nil
}

// NotifyRefundRequestMultiError is an error wrapping multiple validation
// errors returned by NotifyRefundRequest.ValidateAll() if the designated
// constraints aren't met.
type NotifyRefundRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyRefundRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyRefundRequestMultiError) AllErrors() []error { return m }

// NotifyRefundRequestValidationError is the validation error returned by
// NotifyRefundRequest.Validate if the designated constraints aren't met.
type NotifyRefundRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyRefundRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyRefundRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyRefundRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyRefundRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyRefundRequestValidationError) ErrorName() string {
	return "NotifyRefundRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyRefundRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRefundRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyRefundRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyRefundRequestValidationError{}

// Validate checks the field values on NotifyRefundReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NotifyRefundReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyRefundReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyRefundReplyMultiError, or nil if none found.
func (m *NotifyRefundReply) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyRefundReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotifyRefundReplyMultiError(errors)
	}
	return nil
}

// NotifyRefundReplyMultiError is an error wrapping multiple validation errors
// returned by NotifyRefundReply.ValidateAll() if the designated constraints
// aren't met.
type NotifyRefundReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyRefundReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyRefundReplyMultiError) AllErrors() []error { return m }

// NotifyRefundReplyValidationError is the validation error returned by
// NotifyRefundReply.Validate if the designated constraints aren't met.
type NotifyRefundReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyRefundReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyRefundReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyRefundReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyRefundReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyRefundReplyValidationError) ErrorName() string {
	return "NotifyRefundReplyValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyRefundReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRefundReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyRefundReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyRefundReplyValidationError{}
