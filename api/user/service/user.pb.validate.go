// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/mall/user.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}
	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on VerifyTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyTokenRequestMultiError, or nil if none found.
func (m *VerifyTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return VerifyTokenRequestMultiError(errors)
	}
	return nil
}

// VerifyTokenRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyTokenRequestMultiError) AllErrors() []error { return m }

// VerifyTokenRequestValidationError is the validation error returned by
// VerifyTokenRequest.Validate if the designated constraints aren't met.
type VerifyTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyTokenRequestValidationError) ErrorName() string {
	return "VerifyTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyTokenRequestValidationError{}

// Validate checks the field values on UpdateInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInfoRequestMultiError, or nil if none found.
func (m *UpdateInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInfoRequestMultiError(errors)
	}
	return nil
}

// UpdateInfoRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInfoRequestMultiError) AllErrors() []error { return m }

// UpdateInfoRequestValidationError is the validation error returned by
// UpdateInfoRequest.Validate if the designated constraints aren't met.
type UpdateInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInfoRequestValidationError) ErrorName() string {
	return "UpdateInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInfoRequestValidationError{}

// Validate checks the field values on VerifyTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyTokenReplyMultiError, or nil if none found.
func (m *VerifyTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	if len(errors) > 0 {
		return VerifyTokenReplyMultiError(errors)
	}
	return nil
}

// VerifyTokenReplyMultiError is an error wrapping multiple validation errors
// returned by VerifyTokenReply.ValidateAll() if the designated constraints
// aren't met.
type VerifyTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyTokenReplyMultiError) AllErrors() []error { return m }

// VerifyTokenReplyValidationError is the validation error returned by
// VerifyTokenReply.Validate if the designated constraints aren't met.
type VerifyTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyTokenReplyValidationError) ErrorName() string { return "VerifyTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e VerifyTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyTokenReplyValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}
	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on ChargeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChargeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChargeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChargeRequestMultiError, or
// nil if none found.
func (m *ChargeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChargeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for PayWay

	if len(errors) > 0 {
		return ChargeRequestMultiError(errors)
	}
	return nil
}

// ChargeRequestMultiError is an error wrapping multiple validation errors
// returned by ChargeRequest.ValidateAll() if the designated constraints
// aren't met.
type ChargeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChargeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChargeRequestMultiError) AllErrors() []error { return m }

// ChargeRequestValidationError is the validation error returned by
// ChargeRequest.Validate if the designated constraints aren't met.
type ChargeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChargeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChargeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChargeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChargeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChargeRequestValidationError) ErrorName() string { return "ChargeRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChargeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChargeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChargeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChargeRequestValidationError{}

// Validate checks the field values on CreateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAddressRequestMultiError, or nil if none found.
func (m *CreateAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAddressRequestMultiError(errors)
	}
	return nil
}

// CreateAddressRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAddressRequestMultiError) AllErrors() []error { return m }

// CreateAddressRequestValidationError is the validation error returned by
// CreateAddressRequest.Validate if the designated constraints aren't met.
type CreateAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressRequestValidationError) ErrorName() string {
	return "CreateAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressRequestValidationError{}

// Validate checks the field values on DeleteAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAddressRequestMultiError, or nil if none found.
func (m *DeleteAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAddressRequestMultiError(errors)
	}
	return nil
}

// DeleteAddressRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAddressRequestMultiError) AllErrors() []error { return m }

// DeleteAddressRequestValidationError is the validation error returned by
// DeleteAddressRequest.Validate if the designated constraints aren't met.
type DeleteAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAddressRequestValidationError) ErrorName() string {
	return "DeleteAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAddressRequestValidationError{}

// Validate checks the field values on GetAddressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressRequestMultiError, or nil if none found.
func (m *GetAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAddressRequestMultiError(errors)
	}
	return nil
}

// GetAddressRequestMultiError is an error wrapping multiple validation errors
// returned by GetAddressRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressRequestMultiError) AllErrors() []error { return m }

// GetAddressRequestValidationError is the validation error returned by
// GetAddressRequest.Validate if the designated constraints aren't met.
type GetAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressRequestValidationError) ErrorName() string {
	return "GetAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressRequestValidationError{}

// Validate checks the field values on SetDefaultAddrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDefaultAddrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDefaultAddrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDefaultAddrRequestMultiError, or nil if none found.
func (m *SetDefaultAddrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefaultAddrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SetDefaultAddrRequestMultiError(errors)
	}
	return nil
}

// SetDefaultAddrRequestMultiError is an error wrapping multiple validation
// errors returned by SetDefaultAddrRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDefaultAddrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefaultAddrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefaultAddrRequestMultiError) AllErrors() []error { return m }

// SetDefaultAddrRequestValidationError is the validation error returned by
// SetDefaultAddrRequest.Validate if the designated constraints aren't met.
type SetDefaultAddrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultAddrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultAddrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultAddrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultAddrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultAddrRequestValidationError) ErrorName() string {
	return "SetDefaultAddrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultAddrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultAddrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultAddrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultAddrRequestValidationError{}
