// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/app/service/app.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppClient interface {
	GetBannerById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Banner, error)
	GetBannerByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Banner, error)
	GetThemeByNames(ctx context.Context, in *ThemeByNamesRequest, opts ...grpc.CallOption) (*Themes, error)
	GetThemeByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ThemeSpu, error)
	GetActivityByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Activity, error)
	GetActivityWithCoupon(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ActivityCoupon, error)
	ListCategory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Categories, error)
	ListGridCategory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GridCategories, error)
	GetTagByType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*Tags, error)
}

type appClient struct {
	cc grpc.ClientConnInterface
}

func NewAppClient(cc grpc.ClientConnInterface) AppClient {
	return &appClient{cc}
}

func (c *appClient) GetBannerById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, "/app.service.App/GetBannerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetBannerByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, "/app.service.App/GetBannerByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetThemeByNames(ctx context.Context, in *ThemeByNamesRequest, opts ...grpc.CallOption) (*Themes, error) {
	out := new(Themes)
	err := c.cc.Invoke(ctx, "/app.service.App/GetThemeByNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetThemeByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ThemeSpu, error) {
	out := new(ThemeSpu)
	err := c.cc.Invoke(ctx, "/app.service.App/GetThemeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetActivityByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, "/app.service.App/GetActivityByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetActivityWithCoupon(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ActivityCoupon, error) {
	out := new(ActivityCoupon)
	err := c.cc.Invoke(ctx, "/app.service.App/GetActivityWithCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) ListCategory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/app.service.App/ListCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) ListGridCategory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GridCategories, error) {
	out := new(GridCategories)
	err := c.cc.Invoke(ctx, "/app.service.App/ListGridCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetTagByType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*Tags, error) {
	out := new(Tags)
	err := c.cc.Invoke(ctx, "/app.service.App/GetTagByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServer is the server API for App service.
// All implementations must embed UnimplementedAppServer
// for forward compatibility
type AppServer interface {
	GetBannerById(context.Context, *IdRequest) (*Banner, error)
	GetBannerByName(context.Context, *NameRequest) (*Banner, error)
	GetThemeByNames(context.Context, *ThemeByNamesRequest) (*Themes, error)
	GetThemeByName(context.Context, *NameRequest) (*ThemeSpu, error)
	GetActivityByName(context.Context, *NameRequest) (*Activity, error)
	GetActivityWithCoupon(context.Context, *NameRequest) (*ActivityCoupon, error)
	ListCategory(context.Context, *emptypb.Empty) (*Categories, error)
	ListGridCategory(context.Context, *emptypb.Empty) (*GridCategories, error)
	GetTagByType(context.Context, *TypeRequest) (*Tags, error)
	mustEmbedUnimplementedAppServer()
}

// UnimplementedAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (UnimplementedAppServer) GetBannerById(context.Context, *IdRequest) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerById not implemented")
}
func (UnimplementedAppServer) GetBannerByName(context.Context, *NameRequest) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerByName not implemented")
}
func (UnimplementedAppServer) GetThemeByNames(context.Context, *ThemeByNamesRequest) (*Themes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThemeByNames not implemented")
}
func (UnimplementedAppServer) GetThemeByName(context.Context, *NameRequest) (*ThemeSpu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThemeByName not implemented")
}
func (UnimplementedAppServer) GetActivityByName(context.Context, *NameRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityByName not implemented")
}
func (UnimplementedAppServer) GetActivityWithCoupon(context.Context, *NameRequest) (*ActivityCoupon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityWithCoupon not implemented")
}
func (UnimplementedAppServer) ListCategory(context.Context, *emptypb.Empty) (*Categories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategory not implemented")
}
func (UnimplementedAppServer) ListGridCategory(context.Context, *emptypb.Empty) (*GridCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGridCategory not implemented")
}
func (UnimplementedAppServer) GetTagByType(context.Context, *TypeRequest) (*Tags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagByType not implemented")
}
func (UnimplementedAppServer) mustEmbedUnimplementedAppServer() {}

// UnsafeAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServer will
// result in compilation errors.
type UnsafeAppServer interface {
	mustEmbedUnimplementedAppServer()
}

func RegisterAppServer(s grpc.ServiceRegistrar, srv AppServer) {
	s.RegisterService(&App_ServiceDesc, srv)
}

func _App_GetBannerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetBannerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/GetBannerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetBannerById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetBannerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetBannerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/GetBannerByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetBannerByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetThemeByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThemeByNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetThemeByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/GetThemeByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetThemeByNames(ctx, req.(*ThemeByNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetThemeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetThemeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/GetThemeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetThemeByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetActivityByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetActivityByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/GetActivityByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetActivityByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetActivityWithCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetActivityWithCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/GetActivityWithCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetActivityWithCoupon(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_ListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).ListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/ListCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).ListCategory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_ListGridCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).ListGridCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/ListGridCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).ListGridCategory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetTagByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetTagByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.App/GetTagByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetTagByType(ctx, req.(*TypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// App_ServiceDesc is the grpc.ServiceDesc for App service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var App_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.service.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBannerById",
			Handler:    _App_GetBannerById_Handler,
		},
		{
			MethodName: "GetBannerByName",
			Handler:    _App_GetBannerByName_Handler,
		},
		{
			MethodName: "GetThemeByNames",
			Handler:    _App_GetThemeByNames_Handler,
		},
		{
			MethodName: "GetThemeByName",
			Handler:    _App_GetThemeByName_Handler,
		},
		{
			MethodName: "GetActivityByName",
			Handler:    _App_GetActivityByName_Handler,
		},
		{
			MethodName: "GetActivityWithCoupon",
			Handler:    _App_GetActivityWithCoupon_Handler,
		},
		{
			MethodName: "ListCategory",
			Handler:    _App_ListCategory_Handler,
		},
		{
			MethodName: "ListGridCategory",
			Handler:    _App_ListGridCategory_Handler,
		},
		{
			MethodName: "GetTagByType",
			Handler:    _App_GetTagByType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/app/service/app.proto",
}
