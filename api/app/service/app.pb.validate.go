// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/app/service/app.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRequestMultiError, or nil
// if none found.
func (m *IdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := IdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestMultiError(errors)
	}
	return nil
}

// IdRequestMultiError is an error wrapping multiple validation errors returned
// by IdRequest.ValidateAll() if the designated constraints aren't met.
type IdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestMultiError) AllErrors() []error { return m }

// IdRequestValidationError is the validation error returned by
// IdRequest.Validate if the designated constraints aren't met.
type IdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestValidationError) ErrorName() string { return "IdRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestValidationError{}

// Validate checks the field values on NameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NameRequestMultiError, or
// nil if none found.
func (m *NameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return NameRequestMultiError(errors)
	}
	return nil
}

// NameRequestMultiError is an error wrapping multiple validation errors
// returned by NameRequest.ValidateAll() if the designated constraints aren't met.
type NameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NameRequestMultiError) AllErrors() []error { return m }

// NameRequestValidationError is the validation error returned by
// NameRequest.Validate if the designated constraints aren't met.
type NameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NameRequestValidationError) ErrorName() string { return "NameRequestValidationError" }

// Error satisfies the builtin error interface
func (e NameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NameRequestValidationError{}

// Validate checks the field values on TypeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TypeRequestMultiError, or
// nil if none found.
func (m *TypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetType() < 0 {
		err := TypeRequestValidationError{
			field:  "Type",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TypeRequestMultiError(errors)
	}
	return nil
}

// TypeRequestMultiError is an error wrapping multiple validation errors
// returned by TypeRequest.ValidateAll() if the designated constraints aren't met.
type TypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeRequestMultiError) AllErrors() []error { return m }

// TypeRequestValidationError is the validation error returned by
// TypeRequest.Validate if the designated constraints aren't met.
type TypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeRequestValidationError) ErrorName() string { return "TypeRequestValidationError" }

// Error satisfies the builtin error interface
func (e TypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeRequestValidationError{}

// Validate checks the field values on StatusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusRequestMultiError, or
// nil if none found.
func (m *StatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatus() < 0 {
		err := StatusRequestValidationError{
			field:  "Status",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StatusRequestMultiError(errors)
	}
	return nil
}

// StatusRequestMultiError is an error wrapping multiple validation errors
// returned by StatusRequest.ValidateAll() if the designated constraints
// aren't met.
type StatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusRequestMultiError) AllErrors() []error { return m }

// StatusRequestValidationError is the validation error returned by
// StatusRequest.Validate if the designated constraints aren't met.
type StatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusRequestValidationError) ErrorName() string { return "StatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusRequestValidationError{}

// Validate checks the field values on ThemeByNamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThemeByNamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThemeByNamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThemeByNamesRequestMultiError, or nil if none found.
func (m *ThemeByNamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ThemeByNamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Names

	if len(errors) > 0 {
		return ThemeByNamesRequestMultiError(errors)
	}
	return nil
}

// ThemeByNamesRequestMultiError is an error wrapping multiple validation
// errors returned by ThemeByNamesRequest.ValidateAll() if the designated
// constraints aren't met.
type ThemeByNamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThemeByNamesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThemeByNamesRequestMultiError) AllErrors() []error { return m }

// ThemeByNamesRequestValidationError is the validation error returned by
// ThemeByNamesRequest.Validate if the designated constraints aren't met.
type ThemeByNamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThemeByNamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThemeByNamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThemeByNamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThemeByNamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThemeByNamesRequestValidationError) ErrorName() string {
	return "ThemeByNamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ThemeByNamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThemeByNamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThemeByNamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThemeByNamesRequestValidationError{}

// Validate checks the field values on Tags with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tags) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tags with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagsMultiError, or nil if none found.
func (m *Tags) ValidateAll() error {
	return m.validate(true)
}

func (m *Tags) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTag() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TagsValidationError{
						field:  fmt.Sprintf("Tag[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TagsValidationError{
						field:  fmt.Sprintf("Tag[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TagsValidationError{
					field:  fmt.Sprintf("Tag[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TagsMultiError(errors)
	}
	return nil
}

// TagsMultiError is an error wrapping multiple validation errors returned by
// Tags.ValidateAll() if the designated constraints aren't met.
type TagsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagsMultiError) AllErrors() []error { return m }

// TagsValidationError is the validation error returned by Tags.Validate if the
// designated constraints aren't met.
type TagsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagsValidationError) ErrorName() string { return "TagsValidationError" }

// Error satisfies the builtin error interface
func (e TagsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTags.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagsValidationError{}

// Validate checks the field values on GridCategories with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GridCategories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GridCategories with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GridCategoriesMultiError,
// or nil if none found.
func (m *GridCategories) ValidateAll() error {
	return m.validate(true)
}

func (m *GridCategories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GridCategoriesValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GridCategoriesValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GridCategoriesValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GridCategoriesMultiError(errors)
	}
	return nil
}

// GridCategoriesMultiError is an error wrapping multiple validation errors
// returned by GridCategories.ValidateAll() if the designated constraints
// aren't met.
type GridCategoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GridCategoriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GridCategoriesMultiError) AllErrors() []error { return m }

// GridCategoriesValidationError is the validation error returned by
// GridCategories.Validate if the designated constraints aren't met.
type GridCategoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GridCategoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GridCategoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GridCategoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GridCategoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GridCategoriesValidationError) ErrorName() string { return "GridCategoriesValidationError" }

// Error satisfies the builtin error interface
func (e GridCategoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGridCategories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GridCategoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GridCategoriesValidationError{}

// Validate checks the field values on Categories with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Categories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Categories with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoriesMultiError, or
// nil if none found.
func (m *Categories) ValidateAll() error {
	return m.validate(true)
}

func (m *Categories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoriesValidationError{
						field:  fmt.Sprintf("Roots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoriesValidationError{
						field:  fmt.Sprintf("Roots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoriesValidationError{
					field:  fmt.Sprintf("Roots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSubs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoriesValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoriesValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoriesValidationError{
					field:  fmt.Sprintf("Subs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoriesMultiError(errors)
	}
	return nil
}

// CategoriesMultiError is an error wrapping multiple validation errors
// returned by Categories.ValidateAll() if the designated constraints aren't met.
type CategoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoriesMultiError) AllErrors() []error { return m }

// CategoriesValidationError is the validation error returned by
// Categories.Validate if the designated constraints aren't met.
type CategoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoriesValidationError) ErrorName() string { return "CategoriesValidationError" }

// Error satisfies the builtin error interface
func (e CategoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoriesValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsRoot

	// no validation rules for Img

	// no validation rules for ParentId

	// no validation rules for Index

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}
	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on Themes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Themes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Themes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThemesMultiError, or nil if none found.
func (m *Themes) ValidateAll() error {
	return m.validate(true)
}

func (m *Themes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTheme() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThemesValidationError{
						field:  fmt.Sprintf("Theme[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThemesValidationError{
						field:  fmt.Sprintf("Theme[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThemesValidationError{
					field:  fmt.Sprintf("Theme[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThemesMultiError(errors)
	}
	return nil
}

// ThemesMultiError is an error wrapping multiple validation errors returned by
// Themes.ValidateAll() if the designated constraints aren't met.
type ThemesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThemesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThemesMultiError) AllErrors() []error { return m }

// ThemesValidationError is the validation error returned by Themes.Validate if
// the designated constraints aren't met.
type ThemesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThemesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThemesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThemesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThemesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThemesValidationError) ErrorName() string { return "ThemesValidationError" }

// Error satisfies the builtin error interface
func (e ThemesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThemes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThemesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThemesValidationError{}

// Validate checks the field values on Theme with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Theme) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Theme with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThemeMultiError, or nil if none found.
func (m *Theme) ValidateAll() error {
	return m.validate(true)
}

func (m *Theme) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for EntranceImg

	// no validation rules for InternalTopImg

	// no validation rules for TitleImg

	// no validation rules for TplName

	// no validation rules for Online

	if len(errors) > 0 {
		return ThemeMultiError(errors)
	}
	return nil
}

// ThemeMultiError is an error wrapping multiple validation errors returned by
// Theme.ValidateAll() if the designated constraints aren't met.
type ThemeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThemeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThemeMultiError) AllErrors() []error { return m }

// ThemeValidationError is the validation error returned by Theme.Validate if
// the designated constraints aren't met.
type ThemeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThemeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThemeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThemeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThemeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThemeValidationError) ErrorName() string { return "ThemeValidationError" }

// Error satisfies the builtin error interface
func (e ThemeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTheme.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThemeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThemeValidationError{}

// Validate checks the field values on Banner with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Banner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Banner with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BannerMultiError, or nil if none found.
func (m *Banner) ValidateAll() error {
	return m.validate(true)
}

func (m *Banner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Img

	// no validation rules for Description

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BannerValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BannerValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BannerValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BannerMultiError(errors)
	}
	return nil
}

// BannerMultiError is an error wrapping multiple validation errors returned by
// Banner.ValidateAll() if the designated constraints aren't met.
type BannerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerMultiError) AllErrors() []error { return m }

// BannerValidationError is the validation error returned by Banner.Validate if
// the designated constraints aren't met.
type BannerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerValidationError) ErrorName() string { return "BannerValidationError" }

// Error satisfies the builtin error interface
func (e BannerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerValidationError{}

// Validate checks the field values on BannerItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BannerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BannerItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BannerItemMultiError, or
// nil if none found.
func (m *BannerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *BannerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Img

	// no validation rules for Keyword

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for BannerId

	if len(errors) > 0 {
		return BannerItemMultiError(errors)
	}
	return nil
}

// BannerItemMultiError is an error wrapping multiple validation errors
// returned by BannerItem.ValidateAll() if the designated constraints aren't met.
type BannerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerItemMultiError) AllErrors() []error { return m }

// BannerItemValidationError is the validation error returned by
// BannerItem.Validate if the designated constraints aren't met.
type BannerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerItemValidationError) ErrorName() string { return "BannerItemValidationError" }

// Error satisfies the builtin error interface
func (e BannerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBannerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerItemValidationError{}

// Validate checks the field values on Activity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Activity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActivityMultiError, or nil
// if none found.
func (m *Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for EntranceImg

	// no validation rules for Online

	// no validation rules for Remark

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ActivityMultiError(errors)
	}
	return nil
}

// ActivityMultiError is an error wrapping multiple validation errors returned
// by Activity.ValidateAll() if the designated constraints aren't met.
type ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityMultiError) AllErrors() []error { return m }

// ActivityValidationError is the validation error returned by
// Activity.Validate if the designated constraints aren't met.
type ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityValidationError) ErrorName() string { return "ActivityValidationError" }

// Error satisfies the builtin error interface
func (e ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityValidationError{}

// Validate checks the field values on ActivityCoupon with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActivityCoupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityCoupon with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActivityCouponMultiError,
// or nil if none found.
func (m *ActivityCoupon) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityCoupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for EntranceImg

	// no validation rules for Online

	// no validation rules for Remark

	// no validation rules for StartTime

	// no validation rules for EndTime

	for idx, item := range m.GetCoupon() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActivityCouponValidationError{
						field:  fmt.Sprintf("Coupon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActivityCouponValidationError{
						field:  fmt.Sprintf("Coupon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActivityCouponValidationError{
					field:  fmt.Sprintf("Coupon[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActivityCouponMultiError(errors)
	}
	return nil
}

// ActivityCouponMultiError is an error wrapping multiple validation errors
// returned by ActivityCoupon.ValidateAll() if the designated constraints
// aren't met.
type ActivityCouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityCouponMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityCouponMultiError) AllErrors() []error { return m }

// ActivityCouponValidationError is the validation error returned by
// ActivityCoupon.Validate if the designated constraints aren't met.
type ActivityCouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityCouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityCouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityCouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityCouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityCouponValidationError) ErrorName() string { return "ActivityCouponValidationError" }

// Error satisfies the builtin error interface
func (e ActivityCouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityCouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityCouponValidationError{}

// Validate checks the field values on CreateUserCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserCouponRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserCouponRequestMultiError, or nil if none found.
func (m *CreateUserCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CouponId

	if len(errors) > 0 {
		return CreateUserCouponRequestMultiError(errors)
	}
	return nil
}

// CreateUserCouponRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserCouponRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserCouponRequestMultiError) AllErrors() []error { return m }

// CreateUserCouponRequestValidationError is the validation error returned by
// CreateUserCouponRequest.Validate if the designated constraints aren't met.
type CreateUserCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserCouponRequestValidationError) ErrorName() string {
	return "CreateUserCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserCouponRequestValidationError{}

// Validate checks the field values on Coupons with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coupons) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coupons with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CouponsMultiError, or nil if none found.
func (m *Coupons) ValidateAll() error {
	return m.validate(true)
}

func (m *Coupons) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoupon() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponsValidationError{
						field:  fmt.Sprintf("Coupon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponsValidationError{
						field:  fmt.Sprintf("Coupon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponsValidationError{
					field:  fmt.Sprintf("Coupon[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CouponsMultiError(errors)
	}
	return nil
}

// CouponsMultiError is an error wrapping multiple validation errors returned
// by Coupons.ValidateAll() if the designated constraints aren't met.
type CouponsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponsMultiError) AllErrors() []error { return m }

// CouponsValidationError is the validation error returned by Coupons.Validate
// if the designated constraints aren't met.
type CouponsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponsValidationError) ErrorName() string { return "CouponsValidationError" }

// Error satisfies the builtin error interface
func (e CouponsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoupons.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponsValidationError{}

// Validate checks the field values on CouponBo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponBo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponBo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponBoMultiError, or nil
// if none found.
func (m *CouponBo) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponBo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Description

	// no validation rules for FullMoney

	// no validation rules for Minus

	// no validation rules for Rate

	// no validation rules for Type

	// no validation rules for Remark

	// no validation rules for WholeStore

	if len(errors) > 0 {
		return CouponBoMultiError(errors)
	}
	return nil
}

// CouponBoMultiError is an error wrapping multiple validation errors returned
// by CouponBo.ValidateAll() if the designated constraints aren't met.
type CouponBoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponBoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponBoMultiError) AllErrors() []error { return m }

// CouponBoValidationError is the validation error returned by
// CouponBo.Validate if the designated constraints aren't met.
type CouponBoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponBoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponBoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponBoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponBoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponBoValidationError) ErrorName() string { return "CouponBoValidationError" }

// Error satisfies the builtin error interface
func (e CouponBoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponBo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponBoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponBoValidationError{}

// Validate checks the field values on Tags_Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tags_Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tags_Tag with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Tags_TagMultiError, or nil
// if none found.
func (m *Tags_Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tags_Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Highlight

	// no validation rules for Description

	// no validation rules for Type

	if len(errors) > 0 {
		return Tags_TagMultiError(errors)
	}
	return nil
}

// Tags_TagMultiError is an error wrapping multiple validation errors returned
// by Tags_Tag.ValidateAll() if the designated constraints aren't met.
type Tags_TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tags_TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tags_TagMultiError) AllErrors() []error { return m }

// Tags_TagValidationError is the validation error returned by
// Tags_Tag.Validate if the designated constraints aren't met.
type Tags_TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tags_TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tags_TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tags_TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tags_TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tags_TagValidationError) ErrorName() string { return "Tags_TagValidationError" }

// Error satisfies the builtin error interface
func (e Tags_TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTags_Tag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tags_TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tags_TagValidationError{}

// Validate checks the field values on GridCategories_GridCategory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GridCategories_GridCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GridCategories_GridCategory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GridCategories_GridCategoryMultiError, or nil if none found.
func (m *GridCategories_GridCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *GridCategories_GridCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Img

	// no validation rules for CategoryId

	// no validation rules for RootCategoryId

	if len(errors) > 0 {
		return GridCategories_GridCategoryMultiError(errors)
	}
	return nil
}

// GridCategories_GridCategoryMultiError is an error wrapping multiple
// validation errors returned by GridCategories_GridCategory.ValidateAll() if
// the designated constraints aren't met.
type GridCategories_GridCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GridCategories_GridCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GridCategories_GridCategoryMultiError) AllErrors() []error { return m }

// GridCategories_GridCategoryValidationError is the validation error returned
// by GridCategories_GridCategory.Validate if the designated constraints
// aren't met.
type GridCategories_GridCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GridCategories_GridCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GridCategories_GridCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GridCategories_GridCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GridCategories_GridCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GridCategories_GridCategoryValidationError) ErrorName() string {
	return "GridCategories_GridCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e GridCategories_GridCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGridCategories_GridCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GridCategories_GridCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GridCategories_GridCategoryValidationError{}
