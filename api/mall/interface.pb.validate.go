// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/mall/interface.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Banner with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Banner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Banner with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BannerMultiError, or nil if none found.
func (m *Banner) ValidateAll() error {
	return m.validate(true)
}

func (m *Banner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Img

	// no validation rules for Description

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BannerValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BannerValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BannerValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BannerMultiError(errors)
	}
	return nil
}

// BannerMultiError is an error wrapping multiple validation errors returned by
// Banner.ValidateAll() if the designated constraints aren't met.
type BannerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerMultiError) AllErrors() []error { return m }

// BannerValidationError is the validation error returned by Banner.Validate if
// the designated constraints aren't met.
type BannerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerValidationError) ErrorName() string { return "BannerValidationError" }

// Error satisfies the builtin error interface
func (e BannerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerValidationError{}

// Validate checks the field values on BannerItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BannerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BannerItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BannerItemMultiError, or
// nil if none found.
func (m *BannerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *BannerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Img

	// no validation rules for Keyword

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for BannerId

	if len(errors) > 0 {
		return BannerItemMultiError(errors)
	}
	return nil
}

// BannerItemMultiError is an error wrapping multiple validation errors
// returned by BannerItem.ValidateAll() if the designated constraints aren't met.
type BannerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerItemMultiError) AllErrors() []error { return m }

// BannerItemValidationError is the validation error returned by
// BannerItem.Validate if the designated constraints aren't met.
type BannerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerItemValidationError) ErrorName() string { return "BannerItemValidationError" }

// Error satisfies the builtin error interface
func (e BannerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBannerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerItemValidationError{}

// Validate checks the field values on BannerByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BannerByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BannerByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BannerByIdRequestMultiError, or nil if none found.
func (m *BannerByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BannerByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return BannerByIdRequestMultiError(errors)
	}
	return nil
}

// BannerByIdRequestMultiError is an error wrapping multiple validation errors
// returned by BannerByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type BannerByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerByIdRequestMultiError) AllErrors() []error { return m }

// BannerByIdRequestValidationError is the validation error returned by
// BannerByIdRequest.Validate if the designated constraints aren't met.
type BannerByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerByIdRequestValidationError) ErrorName() string {
	return "BannerByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BannerByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBannerByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerByIdRequestValidationError{}

// Validate checks the field values on BannerByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BannerByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BannerByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BannerByNameRequestMultiError, or nil if none found.
func (m *BannerByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BannerByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return BannerByNameRequestMultiError(errors)
	}
	return nil
}

// BannerByNameRequestMultiError is an error wrapping multiple validation
// errors returned by BannerByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type BannerByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerByNameRequestMultiError) AllErrors() []error { return m }

// BannerByNameRequestValidationError is the validation error returned by
// BannerByNameRequest.Validate if the designated constraints aren't met.
type BannerByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerByNameRequestValidationError) ErrorName() string {
	return "BannerByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BannerByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBannerByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerByNameRequestValidationError{}

// Validate checks the field values on ThemeByNamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThemeByNamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThemeByNamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThemeByNamesRequestMultiError, or nil if none found.
func (m *ThemeByNamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ThemeByNamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Names

	if len(errors) > 0 {
		return ThemeByNamesRequestMultiError(errors)
	}
	return nil
}

// ThemeByNamesRequestMultiError is an error wrapping multiple validation
// errors returned by ThemeByNamesRequest.ValidateAll() if the designated
// constraints aren't met.
type ThemeByNamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThemeByNamesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThemeByNamesRequestMultiError) AllErrors() []error { return m }

// ThemeByNamesRequestValidationError is the validation error returned by
// ThemeByNamesRequest.Validate if the designated constraints aren't met.
type ThemeByNamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThemeByNamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThemeByNamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThemeByNamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThemeByNamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThemeByNamesRequestValidationError) ErrorName() string {
	return "ThemeByNamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ThemeByNamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThemeByNamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThemeByNamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThemeByNamesRequestValidationError{}

// Validate checks the field values on ThemeWithSpuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThemeWithSpuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThemeWithSpuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThemeWithSpuRequestMultiError, or nil if none found.
func (m *ThemeWithSpuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ThemeWithSpuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ThemeWithSpuRequestMultiError(errors)
	}
	return nil
}

// ThemeWithSpuRequestMultiError is an error wrapping multiple validation
// errors returned by ThemeWithSpuRequest.ValidateAll() if the designated
// constraints aren't met.
type ThemeWithSpuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThemeWithSpuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThemeWithSpuRequestMultiError) AllErrors() []error { return m }

// ThemeWithSpuRequestValidationError is the validation error returned by
// ThemeWithSpuRequest.Validate if the designated constraints aren't met.
type ThemeWithSpuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThemeWithSpuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThemeWithSpuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThemeWithSpuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThemeWithSpuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThemeWithSpuRequestValidationError) ErrorName() string {
	return "ThemeWithSpuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ThemeWithSpuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThemeWithSpuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThemeWithSpuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThemeWithSpuRequestValidationError{}

// Validate checks the field values on ActivityByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivityByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivityByNameRequestMultiError, or nil if none found.
func (m *ActivityByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ActivityByNameRequestMultiError(errors)
	}
	return nil
}

// ActivityByNameRequestMultiError is an error wrapping multiple validation
// errors returned by ActivityByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type ActivityByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityByNameRequestMultiError) AllErrors() []error { return m }

// ActivityByNameRequestValidationError is the validation error returned by
// ActivityByNameRequest.Validate if the designated constraints aren't met.
type ActivityByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityByNameRequestValidationError) ErrorName() string {
	return "ActivityByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityByNameRequestValidationError{}

// Validate checks the field values on ActivityWithCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivityWithCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityWithCouponRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivityWithCouponRequestMultiError, or nil if none found.
func (m *ActivityWithCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityWithCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ActivityWithCouponRequestMultiError(errors)
	}
	return nil
}

// ActivityWithCouponRequestMultiError is an error wrapping multiple validation
// errors returned by ActivityWithCouponRequest.ValidateAll() if the
// designated constraints aren't met.
type ActivityWithCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityWithCouponRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityWithCouponRequestMultiError) AllErrors() []error { return m }

// ActivityWithCouponRequestValidationError is the validation error returned by
// ActivityWithCouponRequest.Validate if the designated constraints aren't met.
type ActivityWithCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityWithCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityWithCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityWithCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityWithCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityWithCouponRequestValidationError) ErrorName() string {
	return "ActivityWithCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityWithCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityWithCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityWithCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityWithCouponRequestValidationError{}

// Validate checks the field values on Themes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Themes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Themes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThemesMultiError, or nil if none found.
func (m *Themes) ValidateAll() error {
	return m.validate(true)
}

func (m *Themes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTheme() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThemesValidationError{
						field:  fmt.Sprintf("Theme[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThemesValidationError{
						field:  fmt.Sprintf("Theme[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThemesValidationError{
					field:  fmt.Sprintf("Theme[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThemesMultiError(errors)
	}
	return nil
}

// ThemesMultiError is an error wrapping multiple validation errors returned by
// Themes.ValidateAll() if the designated constraints aren't met.
type ThemesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThemesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThemesMultiError) AllErrors() []error { return m }

// ThemesValidationError is the validation error returned by Themes.Validate if
// the designated constraints aren't met.
type ThemesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThemesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThemesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThemesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThemesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThemesValidationError) ErrorName() string { return "ThemesValidationError" }

// Error satisfies the builtin error interface
func (e ThemesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThemes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThemesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThemesValidationError{}

// Validate checks the field values on Theme with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Theme) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Theme with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThemeMultiError, or nil if none found.
func (m *Theme) ValidateAll() error {
	return m.validate(true)
}

func (m *Theme) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for EntranceImg

	// no validation rules for InternalTopImg

	// no validation rules for TitleImg

	// no validation rules for TplName

	// no validation rules for Online

	if len(errors) > 0 {
		return ThemeMultiError(errors)
	}
	return nil
}

// ThemeMultiError is an error wrapping multiple validation errors returned by
// Theme.ValidateAll() if the designated constraints aren't met.
type ThemeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThemeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThemeMultiError) AllErrors() []error { return m }

// ThemeValidationError is the validation error returned by Theme.Validate if
// the designated constraints aren't met.
type ThemeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThemeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThemeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThemeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThemeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThemeValidationError) ErrorName() string { return "ThemeValidationError" }

// Error satisfies the builtin error interface
func (e ThemeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTheme.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThemeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThemeValidationError{}

// Validate checks the field values on ThemeSpu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThemeSpu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThemeSpu with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThemeSpuMultiError, or nil
// if none found.
func (m *ThemeSpu) ValidateAll() error {
	return m.validate(true)
}

func (m *ThemeSpu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for EntranceImg

	// no validation rules for InternalTopImg

	// no validation rules for TitleImg

	// no validation rules for TplName

	// no validation rules for Online

	for idx, item := range m.GetSpuList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThemeSpuValidationError{
						field:  fmt.Sprintf("SpuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThemeSpuValidationError{
						field:  fmt.Sprintf("SpuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThemeSpuValidationError{
					field:  fmt.Sprintf("SpuList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThemeSpuMultiError(errors)
	}
	return nil
}

// ThemeSpuMultiError is an error wrapping multiple validation errors returned
// by ThemeSpu.ValidateAll() if the designated constraints aren't met.
type ThemeSpuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThemeSpuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThemeSpuMultiError) AllErrors() []error { return m }

// ThemeSpuValidationError is the validation error returned by
// ThemeSpu.Validate if the designated constraints aren't met.
type ThemeSpuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThemeSpuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThemeSpuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThemeSpuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThemeSpuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThemeSpuValidationError) ErrorName() string { return "ThemeSpuValidationError" }

// Error satisfies the builtin error interface
func (e ThemeSpuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThemeSpu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThemeSpuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThemeSpuValidationError{}

// Validate checks the field values on Spu with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Spu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Spu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpuMultiError, or nil if none found.
func (m *Spu) ValidateAll() error {
	return m.validate(true)
}

func (m *Spu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for CategoryId

	// no validation rules for RootCategoryId

	// no validation rules for Price

	// no validation rules for Img

	// no validation rules for ForThemeImg

	// no validation rules for Description

	// no validation rules for DiscountPrice

	// no validation rules for Tags

	// no validation rules for Online

	if len(errors) > 0 {
		return SpuMultiError(errors)
	}
	return nil
}

// SpuMultiError is an error wrapping multiple validation errors returned by
// Spu.ValidateAll() if the designated constraints aren't met.
type SpuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuMultiError) AllErrors() []error { return m }

// SpuValidationError is the validation error returned by Spu.Validate if the
// designated constraints aren't met.
type SpuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuValidationError) ErrorName() string { return "SpuValidationError" }

// Error satisfies the builtin error interface
func (e SpuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuValidationError{}

// Validate checks the field values on TagByTypeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TagByTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagByTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TagByTypeRequestMultiError, or nil if none found.
func (m *TagByTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TagByTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return TagByTypeRequestMultiError(errors)
	}
	return nil
}

// TagByTypeRequestMultiError is an error wrapping multiple validation errors
// returned by TagByTypeRequest.ValidateAll() if the designated constraints
// aren't met.
type TagByTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagByTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagByTypeRequestMultiError) AllErrors() []error { return m }

// TagByTypeRequestValidationError is the validation error returned by
// TagByTypeRequest.Validate if the designated constraints aren't met.
type TagByTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagByTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagByTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagByTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagByTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagByTypeRequestValidationError) ErrorName() string { return "TagByTypeRequestValidationError" }

// Error satisfies the builtin error interface
func (e TagByTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagByTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagByTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagByTypeRequestValidationError{}

// Validate checks the field values on Tags with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tags) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tags with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagsMultiError, or nil if none found.
func (m *Tags) ValidateAll() error {
	return m.validate(true)
}

func (m *Tags) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTag() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TagsValidationError{
						field:  fmt.Sprintf("Tag[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TagsValidationError{
						field:  fmt.Sprintf("Tag[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TagsValidationError{
					field:  fmt.Sprintf("Tag[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TagsMultiError(errors)
	}
	return nil
}

// TagsMultiError is an error wrapping multiple validation errors returned by
// Tags.ValidateAll() if the designated constraints aren't met.
type TagsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagsMultiError) AllErrors() []error { return m }

// TagsValidationError is the validation error returned by Tags.Validate if the
// designated constraints aren't met.
type TagsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagsValidationError) ErrorName() string { return "TagsValidationError" }

// Error satisfies the builtin error interface
func (e TagsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTags.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagsValidationError{}

// Validate checks the field values on GridCategories with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GridCategories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GridCategories with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GridCategoriesMultiError,
// or nil if none found.
func (m *GridCategories) ValidateAll() error {
	return m.validate(true)
}

func (m *GridCategories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GridCategoriesValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GridCategoriesValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GridCategoriesValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GridCategoriesMultiError(errors)
	}
	return nil
}

// GridCategoriesMultiError is an error wrapping multiple validation errors
// returned by GridCategories.ValidateAll() if the designated constraints
// aren't met.
type GridCategoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GridCategoriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GridCategoriesMultiError) AllErrors() []error { return m }

// GridCategoriesValidationError is the validation error returned by
// GridCategories.Validate if the designated constraints aren't met.
type GridCategoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GridCategoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GridCategoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GridCategoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GridCategoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GridCategoriesValidationError) ErrorName() string { return "GridCategoriesValidationError" }

// Error satisfies the builtin error interface
func (e GridCategoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGridCategories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GridCategoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GridCategoriesValidationError{}

// Validate checks the field values on AllCategory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllCategory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllCategoryMultiError, or
// nil if none found.
func (m *AllCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *AllCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllCategoryValidationError{
						field:  fmt.Sprintf("Roots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllCategoryValidationError{
						field:  fmt.Sprintf("Roots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllCategoryValidationError{
					field:  fmt.Sprintf("Roots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSubs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllCategoryValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllCategoryValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllCategoryValidationError{
					field:  fmt.Sprintf("Subs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllCategoryMultiError(errors)
	}
	return nil
}

// AllCategoryMultiError is an error wrapping multiple validation errors
// returned by AllCategory.ValidateAll() if the designated constraints aren't met.
type AllCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllCategoryMultiError) AllErrors() []error { return m }

// AllCategoryValidationError is the validation error returned by
// AllCategory.Validate if the designated constraints aren't met.
type AllCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllCategoryValidationError) ErrorName() string { return "AllCategoryValidationError" }

// Error satisfies the builtin error interface
func (e AllCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllCategoryValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsRoot

	// no validation rules for Img

	// no validation rules for ParentId

	// no validation rules for Index

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}
	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on Activity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Activity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActivityMultiError, or nil
// if none found.
func (m *Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for EntranceImg

	// no validation rules for Online

	// no validation rules for Remark

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ActivityMultiError(errors)
	}
	return nil
}

// ActivityMultiError is an error wrapping multiple validation errors returned
// by Activity.ValidateAll() if the designated constraints aren't met.
type ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityMultiError) AllErrors() []error { return m }

// ActivityValidationError is the validation error returned by
// Activity.Validate if the designated constraints aren't met.
type ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityValidationError) ErrorName() string { return "ActivityValidationError" }

// Error satisfies the builtin error interface
func (e ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityValidationError{}

// Validate checks the field values on ActivityCoupon with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActivityCoupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityCoupon with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActivityCouponMultiError,
// or nil if none found.
func (m *ActivityCoupon) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityCoupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for EntranceImg

	// no validation rules for Online

	// no validation rules for Remark

	// no validation rules for StartTime

	// no validation rules for EndTime

	for idx, item := range m.GetCoupon() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActivityCouponValidationError{
						field:  fmt.Sprintf("Coupon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActivityCouponValidationError{
						field:  fmt.Sprintf("Coupon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActivityCouponValidationError{
					field:  fmt.Sprintf("Coupon[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActivityCouponMultiError(errors)
	}
	return nil
}

// ActivityCouponMultiError is an error wrapping multiple validation errors
// returned by ActivityCoupon.ValidateAll() if the designated constraints
// aren't met.
type ActivityCouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityCouponMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityCouponMultiError) AllErrors() []error { return m }

// ActivityCouponValidationError is the validation error returned by
// ActivityCoupon.Validate if the designated constraints aren't met.
type ActivityCouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityCouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityCouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityCouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityCouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityCouponValidationError) ErrorName() string { return "ActivityCouponValidationError" }

// Error satisfies the builtin error interface
func (e ActivityCouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityCouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityCouponValidationError{}

// Validate checks the field values on CouponByCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponByCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponByCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponByCategoryRequestMultiError, or nil if none found.
func (m *CouponByCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponByCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CouponByCategoryRequestMultiError(errors)
	}
	return nil
}

// CouponByCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CouponByCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CouponByCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponByCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponByCategoryRequestMultiError) AllErrors() []error { return m }

// CouponByCategoryRequestValidationError is the validation error returned by
// CouponByCategoryRequest.Validate if the designated constraints aren't met.
type CouponByCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponByCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponByCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponByCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponByCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponByCategoryRequestValidationError) ErrorName() string {
	return "CouponByCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CouponByCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponByCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponByCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponByCategoryRequestValidationError{}

// Validate checks the field values on MyCouponByStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MyCouponByStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyCouponByStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyCouponByStatusRequestMultiError, or nil if none found.
func (m *MyCouponByStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MyCouponByStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return MyCouponByStatusRequestMultiError(errors)
	}
	return nil
}

// MyCouponByStatusRequestMultiError is an error wrapping multiple validation
// errors returned by MyCouponByStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type MyCouponByStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyCouponByStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyCouponByStatusRequestMultiError) AllErrors() []error { return m }

// MyCouponByStatusRequestValidationError is the validation error returned by
// MyCouponByStatusRequest.Validate if the designated constraints aren't met.
type MyCouponByStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyCouponByStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyCouponByStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyCouponByStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyCouponByStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyCouponByStatusRequestValidationError) ErrorName() string {
	return "MyCouponByStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MyCouponByStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyCouponByStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyCouponByStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyCouponByStatusRequestValidationError{}

// Validate checks the field values on CollectCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectCouponRequestMultiError, or nil if none found.
func (m *CollectCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CollectCouponRequestMultiError(errors)
	}
	return nil
}

// CollectCouponRequestMultiError is an error wrapping multiple validation
// errors returned by CollectCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectCouponRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectCouponRequestMultiError) AllErrors() []error { return m }

// CollectCouponRequestValidationError is the validation error returned by
// CollectCouponRequest.Validate if the designated constraints aren't met.
type CollectCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectCouponRequestValidationError) ErrorName() string {
	return "CollectCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectCouponRequestValidationError{}

// Validate checks the field values on Coupons with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coupons) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coupons with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CouponsMultiError, or nil if none found.
func (m *Coupons) ValidateAll() error {
	return m.validate(true)
}

func (m *Coupons) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoupon() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponsValidationError{
						field:  fmt.Sprintf("Coupon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponsValidationError{
						field:  fmt.Sprintf("Coupon[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponsValidationError{
					field:  fmt.Sprintf("Coupon[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CouponsMultiError(errors)
	}
	return nil
}

// CouponsMultiError is an error wrapping multiple validation errors returned
// by Coupons.ValidateAll() if the designated constraints aren't met.
type CouponsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponsMultiError) AllErrors() []error { return m }

// CouponsValidationError is the validation error returned by Coupons.Validate
// if the designated constraints aren't met.
type CouponsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponsValidationError) ErrorName() string { return "CouponsValidationError" }

// Error satisfies the builtin error interface
func (e CouponsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoupons.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponsValidationError{}

// Validate checks the field values on CouponBo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponBo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponBo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponBoMultiError, or nil
// if none found.
func (m *CouponBo) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponBo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Description

	// no validation rules for FullMoney

	// no validation rules for Minus

	// no validation rules for Rate

	// no validation rules for Type

	// no validation rules for Remark

	// no validation rules for WholeStore

	if len(errors) > 0 {
		return CouponBoMultiError(errors)
	}
	return nil
}

// CouponBoMultiError is an error wrapping multiple validation errors returned
// by CouponBo.ValidateAll() if the designated constraints aren't met.
type CouponBoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponBoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponBoMultiError) AllErrors() []error { return m }

// CouponBoValidationError is the validation error returned by
// CouponBo.Validate if the designated constraints aren't met.
type CouponBoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponBoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponBoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponBoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponBoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponBoValidationError) ErrorName() string { return "CouponBoValidationError" }

// Error satisfies the builtin error interface
func (e CouponBoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponBo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponBoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponBoValidationError{}

// Validate checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelOrderRequestMultiError, or nil if none found.
func (m *CancelOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CancelOrderRequestMultiError(errors)
	}
	return nil
}

// CancelOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CancelOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderRequestMultiError) AllErrors() []error { return m }

// CancelOrderRequestValidationError is the validation error returned by
// CancelOrderRequest.Validate if the designated constraints aren't met.
type CancelOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderRequestValidationError) ErrorName() string {
	return "CancelOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderRequestValidationError{}

// Validate checks the field values on GetOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderRequestMultiError, or nil if none found.
func (m *GetOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrderRequestMultiError(errors)
	}
	return nil
}

// GetOrderRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderRequestMultiError) AllErrors() []error { return m }

// GetOrderRequestValidationError is the validation error returned by
// GetOrderRequest.Validate if the designated constraints aren't met.
type GetOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderRequestValidationError) ErrorName() string { return "GetOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderRequestValidationError{}

// Validate checks the field values on SkuInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuInfoMultiError, or nil if none found.
func (m *SkuInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Count

	if len(errors) > 0 {
		return SkuInfoMultiError(errors)
	}
	return nil
}

// SkuInfoMultiError is an error wrapping multiple validation errors returned
// by SkuInfo.ValidateAll() if the designated constraints aren't met.
type SkuInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuInfoMultiError) AllErrors() []error { return m }

// SkuInfoValidationError is the validation error returned by SkuInfo.Validate
// if the designated constraints aren't met.
type SkuInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuInfoValidationError) ErrorName() string { return "SkuInfoValidationError" }

// Error satisfies the builtin error interface
func (e SkuInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuInfoValidationError{}

// Validate checks the field values on OrderAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderAddressMultiError, or
// nil if none found.
func (m *OrderAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Province

	// no validation rules for City

	// no validation rules for County

	// no validation rules for Mobile

	// no validation rules for NationCode

	// no validation rules for PostalCode

	// no validation rules for Detail

	if len(errors) > 0 {
		return OrderAddressMultiError(errors)
	}
	return nil
}

// OrderAddressMultiError is an error wrapping multiple validation errors
// returned by OrderAddress.ValidateAll() if the designated constraints aren't met.
type OrderAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderAddressMultiError) AllErrors() []error { return m }

// OrderAddressValidationError is the validation error returned by
// OrderAddress.Validate if the designated constraints aren't met.
type OrderAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderAddressValidationError) ErrorName() string { return "OrderAddressValidationError" }

// Error satisfies the builtin error interface
func (e OrderAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderAddressValidationError{}

// Validate checks the field values on PlaceOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderRequestMultiError, or nil if none found.
func (m *PlaceOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CouponId

	// no validation rules for TotalPrice

	// no validation rules for FinalTotalPrice

	for idx, item := range m.GetSkuInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaceOrderRequestValidationError{
						field:  fmt.Sprintf("SkuInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaceOrderRequestValidationError{
						field:  fmt.Sprintf("SkuInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaceOrderRequestValidationError{
					field:  fmt.Sprintf("SkuInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlaceOrderRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlaceOrderRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlaceOrderRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlaceOrderRequestMultiError(errors)
	}
	return nil
}

// PlaceOrderRequestMultiError is an error wrapping multiple validation errors
// returned by PlaceOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type PlaceOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderRequestMultiError) AllErrors() []error { return m }

// PlaceOrderRequestValidationError is the validation error returned by
// PlaceOrderRequest.Validate if the designated constraints aren't met.
type PlaceOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderRequestValidationError) ErrorName() string {
	return "PlaceOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlaceOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderRequestValidationError{}

// Validate checks the field values on PlaceOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderReplyMultiError, or nil if none found.
func (m *PlaceOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return PlaceOrderReplyMultiError(errors)
	}
	return nil
}

// PlaceOrderReplyMultiError is an error wrapping multiple validation errors
// returned by PlaceOrderReply.ValidateAll() if the designated constraints
// aren't met.
type PlaceOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderReplyMultiError) AllErrors() []error { return m }

// PlaceOrderReplyValidationError is the validation error returned by
// PlaceOrderReply.Validate if the designated constraints aren't met.
type PlaceOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderReplyValidationError) ErrorName() string { return "PlaceOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e PlaceOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderReplyValidationError{}

// Validate checks the field values on ListUserOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserOrdersRequestMultiError, or nil if none found.
func (m *ListUserOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserOrdersRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserOrdersRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserOrdersRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListUserOrdersRequestMultiError(errors)
	}
	return nil
}

// ListUserOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserOrdersRequestMultiError) AllErrors() []error { return m }

// ListUserOrdersRequestValidationError is the validation error returned by
// ListUserOrdersRequest.Validate if the designated constraints aren't met.
type ListUserOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserOrdersRequestValidationError) ErrorName() string {
	return "ListUserOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserOrdersRequestValidationError{}

// Validate checks the field values on ListUserOrdersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserOrdersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserOrdersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserOrdersReplyMultiError, or nil if none found.
func (m *ListUserOrdersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserOrdersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPageReply()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserOrdersReplyValidationError{
					field:  "PageReply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserOrdersReplyValidationError{
					field:  "PageReply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageReply()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserOrdersReplyValidationError{
				field:  "PageReply",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListUserOrdersReplyMultiError(errors)
	}
	return nil
}

// ListUserOrdersReplyMultiError is an error wrapping multiple validation
// errors returned by ListUserOrdersReply.ValidateAll() if the designated
// constraints aren't met.
type ListUserOrdersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserOrdersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserOrdersReplyMultiError) AllErrors() []error { return m }

// ListUserOrdersReplyValidationError is the validation error returned by
// ListUserOrdersReply.Validate if the designated constraints aren't met.
type ListUserOrdersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserOrdersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserOrdersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserOrdersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserOrdersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserOrdersReplyValidationError) ErrorName() string {
	return "ListUserOrdersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserOrdersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserOrdersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserOrdersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserOrdersReplyValidationError{}

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRequestMultiError, or
// nil if none found.
func (m *SearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for Size

	if len(errors) > 0 {
		return SearchRequestMultiError(errors)
	}
	return nil
}

// SearchRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRequestMultiError) AllErrors() []error { return m }

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

// Validate checks the field values on SpuByIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpuByIdRequestMultiError,
// or nil if none found.
func (m *SpuByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SpuByIdRequestMultiError(errors)
	}
	return nil
}

// SpuByIdRequestMultiError is an error wrapping multiple validation errors
// returned by SpuByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type SpuByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuByIdRequestMultiError) AllErrors() []error { return m }

// SpuByIdRequestValidationError is the validation error returned by
// SpuByIdRequest.Validate if the designated constraints aren't met.
type SpuByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuByIdRequestValidationError) ErrorName() string { return "SpuByIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e SpuByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuByIdRequestValidationError{}

// Validate checks the field values on SpuByCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpuByCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuByCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuByCategoryRequestMultiError, or nil if none found.
func (m *SpuByCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuByCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SpuByCategoryRequestMultiError(errors)
	}
	return nil
}

// SpuByCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by SpuByCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type SpuByCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuByCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuByCategoryRequestMultiError) AllErrors() []error { return m }

// SpuByCategoryRequestValidationError is the validation error returned by
// SpuByCategoryRequest.Validate if the designated constraints aren't met.
type SpuByCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuByCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuByCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuByCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuByCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuByCategoryRequestValidationError) ErrorName() string {
	return "SpuByCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpuByCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuByCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuByCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuByCategoryRequestValidationError{}

// Validate checks the field values on SpuDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpuDetailMultiError, or nil
// if none found.
func (m *SpuDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for CategoryId

	// no validation rules for RootCategoryId

	// no validation rules for Price

	// no validation rules for Img

	// no validation rules for ForThemeImg

	// no validation rules for Description

	// no validation rules for DiscountPrice

	// no validation rules for Tags

	// no validation rules for Online

	for idx, item := range m.GetSkuList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SkuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SkuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuDetailValidationError{
					field:  fmt.Sprintf("SkuList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpuImgList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SpuImgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SpuImgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuDetailValidationError{
					field:  fmt.Sprintf("SpuImgList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpuDetailImgList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SpuDetailImgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SpuDetailImgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuDetailValidationError{
					field:  fmt.Sprintf("SpuDetailImgList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SketchSpecId

	// no validation rules for DefaultSkuId

	if len(errors) > 0 {
		return SpuDetailMultiError(errors)
	}
	return nil
}

// SpuDetailMultiError is an error wrapping multiple validation errors returned
// by SpuDetail.ValidateAll() if the designated constraints aren't met.
type SpuDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetailMultiError) AllErrors() []error { return m }

// SpuDetailValidationError is the validation error returned by
// SpuDetail.Validate if the designated constraints aren't met.
type SpuDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetailValidationError) ErrorName() string { return "SpuDetailValidationError" }

// Error satisfies the builtin error interface
func (e SpuDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetailValidationError{}

// Validate checks the field values on SpuPage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuPage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuPage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpuPageMultiError, or nil if none found.
func (m *SpuPage) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuPage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Count

	// no validation rules for Page

	// no validation rules for TotalPage

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuPageValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuPageValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuPageValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpuPageMultiError(errors)
	}
	return nil
}

// SpuPageMultiError is an error wrapping multiple validation errors returned
// by SpuPage.ValidateAll() if the designated constraints aren't met.
type SpuPageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuPageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuPageMultiError) AllErrors() []error { return m }

// SpuPageValidationError is the validation error returned by SpuPage.Validate
// if the designated constraints aren't met.
type SpuPageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuPageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuPageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuPageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuPageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuPageValidationError) ErrorName() string { return "SpuPageValidationError" }

// Error satisfies the builtin error interface
func (e SpuPageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuPageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuPageValidationError{}

// Validate checks the field values on SaleExplains with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaleExplains) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaleExplains with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaleExplainsMultiError, or
// nil if none found.
func (m *SaleExplains) ValidateAll() error {
	return m.validate(true)
}

func (m *SaleExplains) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSaleExplain() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SaleExplainsValidationError{
						field:  fmt.Sprintf("SaleExplain[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SaleExplainsValidationError{
						field:  fmt.Sprintf("SaleExplain[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaleExplainsValidationError{
					field:  fmt.Sprintf("SaleExplain[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SaleExplainsMultiError(errors)
	}
	return nil
}

// SaleExplainsMultiError is an error wrapping multiple validation errors
// returned by SaleExplains.ValidateAll() if the designated constraints aren't met.
type SaleExplainsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaleExplainsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaleExplainsMultiError) AllErrors() []error { return m }

// SaleExplainsValidationError is the validation error returned by
// SaleExplains.Validate if the designated constraints aren't met.
type SaleExplainsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaleExplainsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaleExplainsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaleExplainsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaleExplainsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaleExplainsValidationError) ErrorName() string { return "SaleExplainsValidationError" }

// Error satisfies the builtin error interface
func (e SaleExplainsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaleExplains.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaleExplainsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaleExplainsValidationError{}

// Validate checks the field values on Tags_Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tags_Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tags_Tag with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Tags_TagMultiError, or nil
// if none found.
func (m *Tags_Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tags_Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Highlight

	// no validation rules for Description

	// no validation rules for Type

	if len(errors) > 0 {
		return Tags_TagMultiError(errors)
	}
	return nil
}

// Tags_TagMultiError is an error wrapping multiple validation errors returned
// by Tags_Tag.ValidateAll() if the designated constraints aren't met.
type Tags_TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tags_TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tags_TagMultiError) AllErrors() []error { return m }

// Tags_TagValidationError is the validation error returned by
// Tags_Tag.Validate if the designated constraints aren't met.
type Tags_TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tags_TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tags_TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tags_TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tags_TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tags_TagValidationError) ErrorName() string { return "Tags_TagValidationError" }

// Error satisfies the builtin error interface
func (e Tags_TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTags_Tag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tags_TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tags_TagValidationError{}

// Validate checks the field values on GridCategories_GridCategory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GridCategories_GridCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GridCategories_GridCategory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GridCategories_GridCategoryMultiError, or nil if none found.
func (m *GridCategories_GridCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *GridCategories_GridCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Img

	// no validation rules for CategoryId

	// no validation rules for RootCategoryId

	if len(errors) > 0 {
		return GridCategories_GridCategoryMultiError(errors)
	}
	return nil
}

// GridCategories_GridCategoryMultiError is an error wrapping multiple
// validation errors returned by GridCategories_GridCategory.ValidateAll() if
// the designated constraints aren't met.
type GridCategories_GridCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GridCategories_GridCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GridCategories_GridCategoryMultiError) AllErrors() []error { return m }

// GridCategories_GridCategoryValidationError is the validation error returned
// by GridCategories_GridCategory.Validate if the designated constraints
// aren't met.
type GridCategories_GridCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GridCategories_GridCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GridCategories_GridCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GridCategories_GridCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GridCategories_GridCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GridCategories_GridCategoryValidationError) ErrorName() string {
	return "GridCategories_GridCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e GridCategories_GridCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGridCategories_GridCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GridCategories_GridCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GridCategories_GridCategoryValidationError{}

// Validate checks the field values on SpuDetail_Specs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpuDetail_Specs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail_Specs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuDetail_SpecsMultiError, or nil if none found.
func (m *SpuDetail_Specs) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail_Specs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	// no validation rules for Key

	// no validation rules for ValueId

	// no validation rules for Value

	if len(errors) > 0 {
		return SpuDetail_SpecsMultiError(errors)
	}
	return nil
}

// SpuDetail_SpecsMultiError is an error wrapping multiple validation errors
// returned by SpuDetail_Specs.ValidateAll() if the designated constraints
// aren't met.
type SpuDetail_SpecsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetail_SpecsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetail_SpecsMultiError) AllErrors() []error { return m }

// SpuDetail_SpecsValidationError is the validation error returned by
// SpuDetail_Specs.Validate if the designated constraints aren't met.
type SpuDetail_SpecsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetail_SpecsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetail_SpecsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetail_SpecsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetail_SpecsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetail_SpecsValidationError) ErrorName() string { return "SpuDetail_SpecsValidationError" }

// Error satisfies the builtin error interface
func (e SpuDetail_SpecsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail_Specs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetail_SpecsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetail_SpecsValidationError{}

// Validate checks the field values on SpuDetail_SkuList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpuDetail_SkuList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail_SkuList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuDetail_SkuListMultiError, or nil if none found.
func (m *SpuDetail_SkuList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail_SkuList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Price

	// no validation rules for DiscountPrice

	// no validation rules for Online

	// no validation rules for Img

	// no validation rules for Title

	// no validation rules for SpuId

	// no validation rules for CategoryId

	// no validation rules for RootCategoryId

	for idx, item := range m.GetSpecs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuDetail_SkuListValidationError{
						field:  fmt.Sprintf("Specs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuDetail_SkuListValidationError{
						field:  fmt.Sprintf("Specs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuDetail_SkuListValidationError{
					field:  fmt.Sprintf("Specs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Code

	// no validation rules for Stock

	if len(errors) > 0 {
		return SpuDetail_SkuListMultiError(errors)
	}
	return nil
}

// SpuDetail_SkuListMultiError is an error wrapping multiple validation errors
// returned by SpuDetail_SkuList.ValidateAll() if the designated constraints
// aren't met.
type SpuDetail_SkuListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetail_SkuListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetail_SkuListMultiError) AllErrors() []error { return m }

// SpuDetail_SkuListValidationError is the validation error returned by
// SpuDetail_SkuList.Validate if the designated constraints aren't met.
type SpuDetail_SkuListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetail_SkuListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetail_SkuListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetail_SkuListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetail_SkuListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetail_SkuListValidationError) ErrorName() string {
	return "SpuDetail_SkuListValidationError"
}

// Error satisfies the builtin error interface
func (e SpuDetail_SkuListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail_SkuList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetail_SkuListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetail_SkuListValidationError{}

// Validate checks the field values on SpuDetail_SpuImgList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpuDetail_SpuImgList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail_SpuImgList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuDetail_SpuImgListMultiError, or nil if none found.
func (m *SpuDetail_SpuImgList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail_SpuImgList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Img

	// no validation rules for SpuId

	if len(errors) > 0 {
		return SpuDetail_SpuImgListMultiError(errors)
	}
	return nil
}

// SpuDetail_SpuImgListMultiError is an error wrapping multiple validation
// errors returned by SpuDetail_SpuImgList.ValidateAll() if the designated
// constraints aren't met.
type SpuDetail_SpuImgListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetail_SpuImgListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetail_SpuImgListMultiError) AllErrors() []error { return m }

// SpuDetail_SpuImgListValidationError is the validation error returned by
// SpuDetail_SpuImgList.Validate if the designated constraints aren't met.
type SpuDetail_SpuImgListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetail_SpuImgListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetail_SpuImgListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetail_SpuImgListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetail_SpuImgListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetail_SpuImgListValidationError) ErrorName() string {
	return "SpuDetail_SpuImgListValidationError"
}

// Error satisfies the builtin error interface
func (e SpuDetail_SpuImgListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail_SpuImgList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetail_SpuImgListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetail_SpuImgListValidationError{}

// Validate checks the field values on SpuDetail_SpuDetailImgList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpuDetail_SpuDetailImgList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail_SpuDetailImgList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuDetail_SpuDetailImgListMultiError, or nil if none found.
func (m *SpuDetail_SpuDetailImgList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail_SpuDetailImgList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Img

	// no validation rules for SpuId

	// no validation rules for Index

	if len(errors) > 0 {
		return SpuDetail_SpuDetailImgListMultiError(errors)
	}
	return nil
}

// SpuDetail_SpuDetailImgListMultiError is an error wrapping multiple
// validation errors returned by SpuDetail_SpuDetailImgList.ValidateAll() if
// the designated constraints aren't met.
type SpuDetail_SpuDetailImgListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetail_SpuDetailImgListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetail_SpuDetailImgListMultiError) AllErrors() []error { return m }

// SpuDetail_SpuDetailImgListValidationError is the validation error returned
// by SpuDetail_SpuDetailImgList.Validate if the designated constraints aren't met.
type SpuDetail_SpuDetailImgListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetail_SpuDetailImgListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetail_SpuDetailImgListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetail_SpuDetailImgListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetail_SpuDetailImgListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetail_SpuDetailImgListValidationError) ErrorName() string {
	return "SpuDetail_SpuDetailImgListValidationError"
}

// Error satisfies the builtin error interface
func (e SpuDetail_SpuDetailImgListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail_SpuDetailImgList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetail_SpuDetailImgListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetail_SpuDetailImgListValidationError{}

// Validate checks the field values on SpuPage_Items with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuPage_Items) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuPage_Items with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpuPage_ItemsMultiError, or
// nil if none found.
func (m *SpuPage_Items) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuPage_Items) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for Img

	// no validation rules for ForThemeImg

	// no validation rules for Price

	// no validation rules for DiscountPrice

	// no validation rules for Description

	// no validation rules for Tags

	// no validation rules for SketchSpecId

	// no validation rules for MaxPurchaseQuantity

	// no validation rules for MinPurchaseQuantity

	if len(errors) > 0 {
		return SpuPage_ItemsMultiError(errors)
	}
	return nil
}

// SpuPage_ItemsMultiError is an error wrapping multiple validation errors
// returned by SpuPage_Items.ValidateAll() if the designated constraints
// aren't met.
type SpuPage_ItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuPage_ItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuPage_ItemsMultiError) AllErrors() []error { return m }

// SpuPage_ItemsValidationError is the validation error returned by
// SpuPage_Items.Validate if the designated constraints aren't met.
type SpuPage_ItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuPage_ItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuPage_ItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuPage_ItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuPage_ItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuPage_ItemsValidationError) ErrorName() string { return "SpuPage_ItemsValidationError" }

// Error satisfies the builtin error interface
func (e SpuPage_ItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuPage_Items.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuPage_ItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuPage_ItemsValidationError{}

// Validate checks the field values on SaleExplains_SaleExplain with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaleExplains_SaleExplain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaleExplains_SaleExplain with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaleExplains_SaleExplainMultiError, or nil if none found.
func (m *SaleExplains_SaleExplain) ValidateAll() error {
	return m.validate(true)
}

func (m *SaleExplains_SaleExplain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Fixed

	// no validation rules for Text

	// no validation rules for SpuId

	// no validation rules for Index

	// no validation rules for ReplaceId

	if len(errors) > 0 {
		return SaleExplains_SaleExplainMultiError(errors)
	}
	return nil
}

// SaleExplains_SaleExplainMultiError is an error wrapping multiple validation
// errors returned by SaleExplains_SaleExplain.ValidateAll() if the designated
// constraints aren't met.
type SaleExplains_SaleExplainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaleExplains_SaleExplainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaleExplains_SaleExplainMultiError) AllErrors() []error { return m }

// SaleExplains_SaleExplainValidationError is the validation error returned by
// SaleExplains_SaleExplain.Validate if the designated constraints aren't met.
type SaleExplains_SaleExplainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaleExplains_SaleExplainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaleExplains_SaleExplainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaleExplains_SaleExplainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaleExplains_SaleExplainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaleExplains_SaleExplainValidationError) ErrorName() string {
	return "SaleExplains_SaleExplainValidationError"
}

// Error satisfies the builtin error interface
func (e SaleExplains_SaleExplainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaleExplains_SaleExplain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaleExplains_SaleExplainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaleExplains_SaleExplainValidationError{}
