// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: api/mall/sku.proto

package mall

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Page    int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SpuByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SpuByIdRequest) Reset() {
	*x = SpuByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuByIdRequest) ProtoMessage() {}

func (x *SpuByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuByIdRequest.ProtoReflect.Descriptor instead.
func (*SpuByIdRequest) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{1}
}

func (x *SpuByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SpuByCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SpuByCategoryRequest) Reset() {
	*x = SpuByCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuByCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuByCategoryRequest) ProtoMessage() {}

func (x *SpuByCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuByCategoryRequest.ProtoReflect.Descriptor instead.
func (*SpuByCategoryRequest) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{2}
}

func (x *SpuByCategoryRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SpuDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title            string                        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle         string                        `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	CategoryId       int64                         `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	RootCategoryId   int64                         `protobuf:"varint,5,opt,name=root_category_id,json=rootCategoryId,proto3" json:"root_category_id,omitempty"`
	Price            string                        `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	Img              string                        `protobuf:"bytes,7,opt,name=img,proto3" json:"img,omitempty"`
	ForThemeImg      string                        `protobuf:"bytes,8,opt,name=for_theme_img,json=forThemeImg,proto3" json:"for_theme_img,omitempty"`
	Description      string                        `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	DiscountPrice    string                        `protobuf:"bytes,10,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"`
	Tags             string                        `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	IsTest           bool                          `protobuf:"varint,12,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
	Online           bool                          `protobuf:"varint,13,opt,name=online,proto3" json:"online,omitempty"`
	SkuList          []*SpuDetail_SkuList          `protobuf:"bytes,14,rep,name=sku_list,json=skuList,proto3" json:"sku_list,omitempty"`
	SpuImgList       []*SpuDetail_SpuImgList       `protobuf:"bytes,15,rep,name=spu_img_list,json=spuImgList,proto3" json:"spu_img_list,omitempty"`
	SpuDetailImgList []*SpuDetail_SpuDetailImgList `protobuf:"bytes,16,rep,name=spu_detail_img_list,json=spuDetailImgList,proto3" json:"spu_detail_img_list,omitempty"`
	SketchSpecId     int64                         `protobuf:"varint,17,opt,name=sketch_spec_id,json=sketchSpecId,proto3" json:"sketch_spec_id,omitempty"`
	DefaultSkuId     int64                         `protobuf:"varint,18,opt,name=default_sku_id,json=defaultSkuId,proto3" json:"default_sku_id,omitempty"`
}

func (x *SpuDetail) Reset() {
	*x = SpuDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuDetail) ProtoMessage() {}

func (x *SpuDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuDetail.ProtoReflect.Descriptor instead.
func (*SpuDetail) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{3}
}

func (x *SpuDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SpuDetail) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *SpuDetail) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuDetail) GetRootCategoryId() int64 {
	if x != nil {
		return x.RootCategoryId
	}
	return 0
}

func (x *SpuDetail) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SpuDetail) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *SpuDetail) GetForThemeImg() string {
	if x != nil {
		return x.ForThemeImg
	}
	return ""
}

func (x *SpuDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpuDetail) GetDiscountPrice() string {
	if x != nil {
		return x.DiscountPrice
	}
	return ""
}

func (x *SpuDetail) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SpuDetail) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

func (x *SpuDetail) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *SpuDetail) GetSkuList() []*SpuDetail_SkuList {
	if x != nil {
		return x.SkuList
	}
	return nil
}

func (x *SpuDetail) GetSpuImgList() []*SpuDetail_SpuImgList {
	if x != nil {
		return x.SpuImgList
	}
	return nil
}

func (x *SpuDetail) GetSpuDetailImgList() []*SpuDetail_SpuDetailImgList {
	if x != nil {
		return x.SpuDetailImgList
	}
	return nil
}

func (x *SpuDetail) GetSketchSpecId() int64 {
	if x != nil {
		return x.SketchSpecId
	}
	return 0
}

func (x *SpuDetail) GetDefaultSkuId() int64 {
	if x != nil {
		return x.DefaultSkuId
	}
	return 0
}

type Spu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title          string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle       string `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	CategoryId     int64  `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	RootCategoryId int64  `protobuf:"varint,5,opt,name=root_category_id,json=rootCategoryId,proto3" json:"root_category_id,omitempty"`
	Price          string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	Img            string `protobuf:"bytes,7,opt,name=img,proto3" json:"img,omitempty"`
	ForThemeImg    string `protobuf:"bytes,8,opt,name=for_theme_img,json=forThemeImg,proto3" json:"for_theme_img,omitempty"`
	Description    string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	DiscountPrice  string `protobuf:"bytes,10,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"`
	Tags           string `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	IsTest         bool   `protobuf:"varint,12,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
	Online         bool   `protobuf:"varint,13,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *Spu) Reset() {
	*x = Spu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spu) ProtoMessage() {}

func (x *Spu) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spu.ProtoReflect.Descriptor instead.
func (*Spu) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{4}
}

func (x *Spu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Spu) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Spu) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *Spu) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Spu) GetRootCategoryId() int64 {
	if x != nil {
		return x.RootCategoryId
	}
	return 0
}

func (x *Spu) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Spu) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *Spu) GetForThemeImg() string {
	if x != nil {
		return x.ForThemeImg
	}
	return ""
}

func (x *Spu) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Spu) GetDiscountPrice() string {
	if x != nil {
		return x.DiscountPrice
	}
	return ""
}

func (x *Spu) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Spu) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

func (x *Spu) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type SpuPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     uint32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Count     uint32           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Page      uint32           `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	TotalPage uint32           `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Items     []*SpuPage_Items `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SpuPage) Reset() {
	*x = SpuPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuPage) ProtoMessage() {}

func (x *SpuPage) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuPage.ProtoReflect.Descriptor instead.
func (*SpuPage) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{5}
}

func (x *SpuPage) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SpuPage) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SpuPage) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SpuPage) GetTotalPage() uint32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *SpuPage) GetItems() []*SpuPage_Items {
	if x != nil {
		return x.Items
	}
	return nil
}

type SaleExplains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaleExplain []*SaleExplains_SaleExplain `protobuf:"bytes,1,rep,name=sale_explain,json=saleExplain,proto3" json:"sale_explain,omitempty"`
}

func (x *SaleExplains) Reset() {
	*x = SaleExplains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleExplains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleExplains) ProtoMessage() {}

func (x *SaleExplains) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleExplains.ProtoReflect.Descriptor instead.
func (*SaleExplains) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{6}
}

func (x *SaleExplains) GetSaleExplain() []*SaleExplains_SaleExplain {
	if x != nil {
		return x.SaleExplain
	}
	return nil
}

type SpuDetail_Specs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId   uint32 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	ValueId uint32 `protobuf:"varint,3,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`
	Value   string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpuDetail_Specs) Reset() {
	*x = SpuDetail_Specs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuDetail_Specs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuDetail_Specs) ProtoMessage() {}

func (x *SpuDetail_Specs) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuDetail_Specs.ProtoReflect.Descriptor instead.
func (*SpuDetail_Specs) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SpuDetail_Specs) GetKeyId() uint32 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SpuDetail_Specs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SpuDetail_Specs) GetValueId() uint32 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

func (x *SpuDetail_Specs) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SpuDetail_SkuList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Price          float64            `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	DiscountPrice  float64            `protobuf:"fixed64,3,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"`
	Online         bool               `protobuf:"varint,4,opt,name=online,proto3" json:"online,omitempty"`
	Img            string             `protobuf:"bytes,5,opt,name=img,proto3" json:"img,omitempty"`
	Title          string             `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	SpuId          int64              `protobuf:"varint,7,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`
	CategoryId     int64              `protobuf:"varint,8,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	RootCategoryId int64              `protobuf:"varint,9,opt,name=root_category_id,json=rootCategoryId,proto3" json:"root_category_id,omitempty"`
	Specs          []*SpuDetail_Specs `protobuf:"bytes,10,rep,name=specs,proto3" json:"specs,omitempty"`
	Code           string             `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	Stock          uint32             `protobuf:"varint,12,opt,name=stock,proto3" json:"stock,omitempty"`
}

func (x *SpuDetail_SkuList) Reset() {
	*x = SpuDetail_SkuList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuDetail_SkuList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuDetail_SkuList) ProtoMessage() {}

func (x *SpuDetail_SkuList) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuDetail_SkuList.ProtoReflect.Descriptor instead.
func (*SpuDetail_SkuList) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{3, 1}
}

func (x *SpuDetail_SkuList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuDetail_SkuList) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SpuDetail_SkuList) GetDiscountPrice() float64 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

func (x *SpuDetail_SkuList) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *SpuDetail_SkuList) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *SpuDetail_SkuList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SpuDetail_SkuList) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SpuDetail_SkuList) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuDetail_SkuList) GetRootCategoryId() int64 {
	if x != nil {
		return x.RootCategoryId
	}
	return 0
}

func (x *SpuDetail_SkuList) GetSpecs() []*SpuDetail_Specs {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *SpuDetail_SkuList) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SpuDetail_SkuList) GetStock() uint32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

type SpuDetail_SpuImgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Img   string `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
	SpuId int64  `protobuf:"varint,3,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`
}

func (x *SpuDetail_SpuImgList) Reset() {
	*x = SpuDetail_SpuImgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuDetail_SpuImgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuDetail_SpuImgList) ProtoMessage() {}

func (x *SpuDetail_SpuImgList) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuDetail_SpuImgList.ProtoReflect.Descriptor instead.
func (*SpuDetail_SpuImgList) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{3, 2}
}

func (x *SpuDetail_SpuImgList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuDetail_SpuImgList) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *SpuDetail_SpuImgList) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

type SpuDetail_SpuDetailImgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Img   string `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
	SpuId int64  `protobuf:"varint,3,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`
	Index uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *SpuDetail_SpuDetailImgList) Reset() {
	*x = SpuDetail_SpuDetailImgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuDetail_SpuDetailImgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuDetail_SpuDetailImgList) ProtoMessage() {}

func (x *SpuDetail_SpuDetailImgList) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuDetail_SpuDetailImgList.ProtoReflect.Descriptor instead.
func (*SpuDetail_SpuDetailImgList) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{3, 3}
}

func (x *SpuDetail_SpuDetailImgList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuDetail_SpuDetailImgList) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *SpuDetail_SpuDetailImgList) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SpuDetail_SpuDetailImgList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type SpuPage_Items struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title               string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle            string `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Img                 string `protobuf:"bytes,4,opt,name=img,proto3" json:"img,omitempty"`
	ForThemeImg         string `protobuf:"bytes,5,opt,name=for_theme_img,json=forThemeImg,proto3" json:"for_theme_img,omitempty"`
	Price               string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	DiscountPrice       string `protobuf:"bytes,7,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"`
	Description         string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Tags                string `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	SketchSpecId        string `protobuf:"bytes,10,opt,name=sketch_spec_id,json=sketchSpecId,proto3" json:"sketch_spec_id,omitempty"`
	MaxPurchaseQuantity uint32 `protobuf:"varint,11,opt,name=max_purchase_quantity,json=maxPurchaseQuantity,proto3" json:"max_purchase_quantity,omitempty"`
	MinPurchaseQuantity uint32 `protobuf:"varint,12,opt,name=min_purchase_quantity,json=minPurchaseQuantity,proto3" json:"min_purchase_quantity,omitempty"`
}

func (x *SpuPage_Items) Reset() {
	*x = SpuPage_Items{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuPage_Items) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuPage_Items) ProtoMessage() {}

func (x *SpuPage_Items) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuPage_Items.ProtoReflect.Descriptor instead.
func (*SpuPage_Items) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SpuPage_Items) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuPage_Items) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SpuPage_Items) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *SpuPage_Items) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *SpuPage_Items) GetForThemeImg() string {
	if x != nil {
		return x.ForThemeImg
	}
	return ""
}

func (x *SpuPage_Items) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SpuPage_Items) GetDiscountPrice() string {
	if x != nil {
		return x.DiscountPrice
	}
	return ""
}

func (x *SpuPage_Items) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpuPage_Items) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SpuPage_Items) GetSketchSpecId() string {
	if x != nil {
		return x.SketchSpecId
	}
	return ""
}

func (x *SpuPage_Items) GetMaxPurchaseQuantity() uint32 {
	if x != nil {
		return x.MaxPurchaseQuantity
	}
	return 0
}

func (x *SpuPage_Items) GetMinPurchaseQuantity() uint32 {
	if x != nil {
		return x.MinPurchaseQuantity
	}
	return 0
}

type SaleExplains_SaleExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fixed     bool   `protobuf:"varint,2,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	SpuId     int64  `protobuf:"varint,4,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`
	Index     int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	ReplaceId int64  `protobuf:"varint,6,opt,name=replace_id,json=replaceId,proto3" json:"replace_id,omitempty"`
}

func (x *SaleExplains_SaleExplain) Reset() {
	*x = SaleExplains_SaleExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mall_sku_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleExplains_SaleExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleExplains_SaleExplain) ProtoMessage() {}

func (x *SaleExplains_SaleExplain) ProtoReflect() protoreflect.Message {
	mi := &file_api_mall_sku_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleExplains_SaleExplain.ProtoReflect.Descriptor instead.
func (*SaleExplains_SaleExplain) Descriptor() ([]byte, []int) {
	return file_api_mall_sku_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SaleExplains_SaleExplain) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SaleExplains_SaleExplain) GetFixed() bool {
	if x != nil {
		return x.Fixed
	}
	return false
}

func (x *SaleExplains_SaleExplain) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SaleExplains_SaleExplain) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SaleExplains_SaleExplain) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SaleExplains_SaleExplain) GetReplaceId() int64 {
	if x != nil {
		return x.ReplaceId
	}
	return 0
}

var File_api_mall_sku_proto protoreflect.FileDescriptor

var file_api_mall_sku_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6c, 0x6c, 0x2f, 0x73, 0x6b, 0x75, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x6c, 0x6c, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x20, 0x0a, 0x0e, 0x53, 0x70, 0x75, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x53, 0x70,
	0x75, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xe0, 0x09, 0x0a, 0x09, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x6f, 0x6f, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6c, 0x6c,
	0x2e, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x6b, 0x75, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x73,
	0x70, 0x75, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x53, 0x70, 0x75, 0x49, 0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x73,
	0x70, 0x75, 0x49, 0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x70, 0x75,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x70,
	0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x73, 0x70, 0x75, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x1a, 0x61, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xcf, 0x02, 0x0a, 0x07, 0x53, 0x6b,
	0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x70, 0x75, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x1a, 0x45, 0x0a, 0x0a, 0x53,
	0x70, 0x75, 0x49, 0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75,
	0x49, 0x64, 0x1a, 0x61, 0x0a, 0x10, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xec, 0x02, 0x0a, 0x03, 0x53, 0x70, 0x75, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x6d, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x69, 0x6d, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0x96, 0x04, 0x0a, 0x07, 0x53, 0x70, 0x75, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x70, 0x75, 0x50, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x80, 0x03, 0x0a, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x5f,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xe7, 0x01,
	0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x41,
	0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x61, 0x6c, 0x65,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x1a, 0x93, 0x01, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x32, 0x9b, 0x03, 0x0a, 0x03, 0x53, 0x6b, 0x75, 0x12,
	0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6c, 0x6c,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x2f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x6c, 0x6c,
	0x2e, 0x53, 0x70, 0x75, 0x50, 0x61, 0x67, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x75, 0x42, 0x79, 0x49, 0x64, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53,
	0x70, 0x75, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x73, 0x70, 0x75, 0x2f, 0x69, 0x64, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4a, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x75, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x70, 0x75, 0x50, 0x61,
	0x67, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x73, 0x70, 0x75,
	0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x75, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x6d, 0x61,
	0x6c, 0x6c, 0x2e, 0x53, 0x70, 0x75, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x53,
	0x70, 0x75, 0x50, 0x61, 0x67, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15,
	0x2f, 0x73, 0x70, 0x75, 0x2f, 0x62, 0x79, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x12, 0x5a, 0x10, 0x6d, 0x61, 0x6c, 0x6c, 0x2d, 0x67, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6c, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_mall_sku_proto_rawDescOnce sync.Once
	file_api_mall_sku_proto_rawDescData = file_api_mall_sku_proto_rawDesc
)

func file_api_mall_sku_proto_rawDescGZIP() []byte {
	file_api_mall_sku_proto_rawDescOnce.Do(func() {
		file_api_mall_sku_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_mall_sku_proto_rawDescData)
	})
	return file_api_mall_sku_proto_rawDescData
}

var file_api_mall_sku_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_mall_sku_proto_goTypes = []interface{}{
	(*SearchRequest)(nil),              // 0: mall.SearchRequest
	(*SpuByIdRequest)(nil),             // 1: mall.SpuByIdRequest
	(*SpuByCategoryRequest)(nil),       // 2: mall.SpuByCategoryRequest
	(*SpuDetail)(nil),                  // 3: mall.SpuDetail
	(*Spu)(nil),                        // 4: mall.Spu
	(*SpuPage)(nil),                    // 5: mall.SpuPage
	(*SaleExplains)(nil),               // 6: mall.SaleExplains
	(*SpuDetail_Specs)(nil),            // 7: mall.SpuDetail.Specs
	(*SpuDetail_SkuList)(nil),          // 8: mall.SpuDetail.SkuList
	(*SpuDetail_SpuImgList)(nil),       // 9: mall.SpuDetail.SpuImgList
	(*SpuDetail_SpuDetailImgList)(nil), // 10: mall.SpuDetail.SpuDetailImgList
	(*SpuPage_Items)(nil),              // 11: mall.SpuPage.Items
	(*SaleExplains_SaleExplain)(nil),   // 12: mall.SaleExplains.SaleExplain
	(*emptypb.Empty)(nil),              // 13: google.protobuf.Empty
}
var file_api_mall_sku_proto_depIdxs = []int32{
	8,  // 0: mall.SpuDetail.sku_list:type_name -> mall.SpuDetail.SkuList
	9,  // 1: mall.SpuDetail.spu_img_list:type_name -> mall.SpuDetail.SpuImgList
	10, // 2: mall.SpuDetail.spu_detail_img_list:type_name -> mall.SpuDetail.SpuDetailImgList
	11, // 3: mall.SpuPage.items:type_name -> mall.SpuPage.Items
	12, // 4: mall.SaleExplains.sale_explain:type_name -> mall.SaleExplains.SaleExplain
	7,  // 5: mall.SpuDetail.SkuList.specs:type_name -> mall.SpuDetail.Specs
	13, // 6: mall.Sku.GetSaleExplain:input_type -> google.protobuf.Empty
	0,  // 7: mall.Sku.Search:input_type -> mall.SearchRequest
	1,  // 8: mall.Sku.GetSpuById:input_type -> mall.SpuByIdRequest
	13, // 9: mall.Sku.GetSpuLatest:input_type -> google.protobuf.Empty
	2,  // 10: mall.Sku.GetSpuByCategory:input_type -> mall.SpuByCategoryRequest
	6,  // 11: mall.Sku.GetSaleExplain:output_type -> mall.SaleExplains
	5,  // 12: mall.Sku.Search:output_type -> mall.SpuPage
	3,  // 13: mall.Sku.GetSpuById:output_type -> mall.SpuDetail
	5,  // 14: mall.Sku.GetSpuLatest:output_type -> mall.SpuPage
	5,  // 15: mall.Sku.GetSpuByCategory:output_type -> mall.SpuPage
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_mall_sku_proto_init() }
func file_api_mall_sku_proto_init() {
	if File_api_mall_sku_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_mall_sku_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuByCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleExplains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuDetail_Specs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuDetail_SkuList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuDetail_SpuImgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuDetail_SpuDetailImgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuPage_Items); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mall_sku_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleExplains_SaleExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_mall_sku_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_mall_sku_proto_goTypes,
		DependencyIndexes: file_api_mall_sku_proto_depIdxs,
		MessageInfos:      file_api_mall_sku_proto_msgTypes,
	}.Build()
	File_api_mall_sku_proto = out.File
	file_api_mall_sku_proto_rawDesc = nil
	file_api_mall_sku_proto_goTypes = nil
	file_api_mall_sku_proto_depIdxs = nil
}
