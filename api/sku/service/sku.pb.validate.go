// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sku/service/sku.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRequestMultiError, or nil
// if none found.
func (m *IdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdRequestMultiError(errors)
	}
	return nil
}

// IdRequestMultiError is an error wrapping multiple validation errors returned
// by IdRequest.ValidateAll() if the designated constraints aren't met.
type IdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestMultiError) AllErrors() []error { return m }

// IdRequestValidationError is the validation error returned by
// IdRequest.Validate if the designated constraints aren't met.
type IdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestValidationError) ErrorName() string { return "IdRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestValidationError{}

// Validate checks the field values on SkuVO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuVO with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuVOMultiError, or nil if none found.
func (m *SkuVO) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SkuVOMultiError(errors)
	}
	return nil
}

// SkuVOMultiError is an error wrapping multiple validation errors returned by
// SkuVO.ValidateAll() if the designated constraints aren't met.
type SkuVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuVOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuVOMultiError) AllErrors() []error { return m }

// SkuVOValidationError is the validation error returned by SkuVO.Validate if
// the designated constraints aren't met.
type SkuVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuVOValidationError) ErrorName() string { return "SkuVOValidationError" }

// Error satisfies the builtin error interface
func (e SkuVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuVOValidationError{}

// Validate checks the field values on SpuByThemeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpuByThemeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuByThemeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuByThemeReplyMultiError, or nil if none found.
func (m *SpuByThemeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuByThemeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpuVO() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuByThemeReplyValidationError{
						field:  fmt.Sprintf("SpuVO[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuByThemeReplyValidationError{
						field:  fmt.Sprintf("SpuVO[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuByThemeReplyValidationError{
					field:  fmt.Sprintf("SpuVO[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpuByThemeReplyMultiError(errors)
	}
	return nil
}

// SpuByThemeReplyMultiError is an error wrapping multiple validation errors
// returned by SpuByThemeReply.ValidateAll() if the designated constraints
// aren't met.
type SpuByThemeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuByThemeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuByThemeReplyMultiError) AllErrors() []error { return m }

// SpuByThemeReplyValidationError is the validation error returned by
// SpuByThemeReply.Validate if the designated constraints aren't met.
type SpuByThemeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuByThemeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuByThemeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuByThemeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuByThemeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuByThemeReplyValidationError) ErrorName() string { return "SpuByThemeReplyValidationError" }

// Error satisfies the builtin error interface
func (e SpuByThemeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuByThemeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuByThemeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuByThemeReplyValidationError{}

// Validate checks the field values on SpuVO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuVO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuVO with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpuVOMultiError, or nil if none found.
func (m *SpuVO) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuVO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for CategoryId

	// no validation rules for RootCategoryId

	// no validation rules for Price

	// no validation rules for Img

	// no validation rules for ForThemeImg

	// no validation rules for Description

	// no validation rules for DiscountPrice

	// no validation rules for Tags

	// no validation rules for Online

	if len(errors) > 0 {
		return SpuVOMultiError(errors)
	}
	return nil
}

// SpuVOMultiError is an error wrapping multiple validation errors returned by
// SpuVO.ValidateAll() if the designated constraints aren't met.
type SpuVOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuVOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuVOMultiError) AllErrors() []error { return m }

// SpuVOValidationError is the validation error returned by SpuVO.Validate if
// the designated constraints aren't met.
type SpuVOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuVOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuVOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuVOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuVOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuVOValidationError) ErrorName() string { return "SpuVOValidationError" }

// Error satisfies the builtin error interface
func (e SpuVOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuVO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuVOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuVOValidationError{}

// Validate checks the field values on SpuDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpuDetailMultiError, or nil
// if none found.
func (m *SpuDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for CategoryId

	// no validation rules for RootCategoryId

	// no validation rules for Price

	// no validation rules for Img

	// no validation rules for ForThemeImg

	// no validation rules for Description

	// no validation rules for DiscountPrice

	// no validation rules for Tags

	// no validation rules for Online

	for idx, item := range m.GetSkuList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SkuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SkuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuDetailValidationError{
					field:  fmt.Sprintf("SkuList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpuImgList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SpuImgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SpuImgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuDetailValidationError{
					field:  fmt.Sprintf("SpuImgList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpuDetailImgList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SpuDetailImgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuDetailValidationError{
						field:  fmt.Sprintf("SpuDetailImgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuDetailValidationError{
					field:  fmt.Sprintf("SpuDetailImgList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SketchSpecId

	// no validation rules for DefaultSkuId

	if len(errors) > 0 {
		return SpuDetailMultiError(errors)
	}
	return nil
}

// SpuDetailMultiError is an error wrapping multiple validation errors returned
// by SpuDetail.ValidateAll() if the designated constraints aren't met.
type SpuDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetailMultiError) AllErrors() []error { return m }

// SpuDetailValidationError is the validation error returned by
// SpuDetail.Validate if the designated constraints aren't met.
type SpuDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetailValidationError) ErrorName() string { return "SpuDetailValidationError" }

// Error satisfies the builtin error interface
func (e SpuDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetailValidationError{}

// Validate checks the field values on SpuPage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuPage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuPage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpuPageMultiError, or nil if none found.
func (m *SpuPage) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuPage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Count

	// no validation rules for Page

	// no validation rules for TotalPage

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuPageValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuPageValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuPageValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpuPageMultiError(errors)
	}
	return nil
}

// SpuPageMultiError is an error wrapping multiple validation errors returned
// by SpuPage.ValidateAll() if the designated constraints aren't met.
type SpuPageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuPageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuPageMultiError) AllErrors() []error { return m }

// SpuPageValidationError is the validation error returned by SpuPage.Validate
// if the designated constraints aren't met.
type SpuPageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuPageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuPageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuPageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuPageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuPageValidationError) ErrorName() string { return "SpuPageValidationError" }

// Error satisfies the builtin error interface
func (e SpuPageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuPageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuPageValidationError{}

// Validate checks the field values on SaleExplains with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaleExplains) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaleExplains with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaleExplainsMultiError, or
// nil if none found.
func (m *SaleExplains) ValidateAll() error {
	return m.validate(true)
}

func (m *SaleExplains) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSaleExplain() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SaleExplainsValidationError{
						field:  fmt.Sprintf("SaleExplain[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SaleExplainsValidationError{
						field:  fmt.Sprintf("SaleExplain[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaleExplainsValidationError{
					field:  fmt.Sprintf("SaleExplain[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SaleExplainsMultiError(errors)
	}
	return nil
}

// SaleExplainsMultiError is an error wrapping multiple validation errors
// returned by SaleExplains.ValidateAll() if the designated constraints aren't met.
type SaleExplainsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaleExplainsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaleExplainsMultiError) AllErrors() []error { return m }

// SaleExplainsValidationError is the validation error returned by
// SaleExplains.Validate if the designated constraints aren't met.
type SaleExplainsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaleExplainsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaleExplainsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaleExplainsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaleExplainsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaleExplainsValidationError) ErrorName() string { return "SaleExplainsValidationError" }

// Error satisfies the builtin error interface
func (e SaleExplainsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaleExplains.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaleExplainsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaleExplainsValidationError{}

// Validate checks the field values on SpuDetail_Specs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpuDetail_Specs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail_Specs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuDetail_SpecsMultiError, or nil if none found.
func (m *SpuDetail_Specs) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail_Specs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	// no validation rules for Key

	// no validation rules for ValueId

	// no validation rules for Value

	if len(errors) > 0 {
		return SpuDetail_SpecsMultiError(errors)
	}
	return nil
}

// SpuDetail_SpecsMultiError is an error wrapping multiple validation errors
// returned by SpuDetail_Specs.ValidateAll() if the designated constraints
// aren't met.
type SpuDetail_SpecsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetail_SpecsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetail_SpecsMultiError) AllErrors() []error { return m }

// SpuDetail_SpecsValidationError is the validation error returned by
// SpuDetail_Specs.Validate if the designated constraints aren't met.
type SpuDetail_SpecsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetail_SpecsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetail_SpecsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetail_SpecsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetail_SpecsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetail_SpecsValidationError) ErrorName() string { return "SpuDetail_SpecsValidationError" }

// Error satisfies the builtin error interface
func (e SpuDetail_SpecsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail_Specs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetail_SpecsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetail_SpecsValidationError{}

// Validate checks the field values on SpuDetail_SkuList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpuDetail_SkuList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail_SkuList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuDetail_SkuListMultiError, or nil if none found.
func (m *SpuDetail_SkuList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail_SkuList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Price

	// no validation rules for DiscountPrice

	// no validation rules for Online

	// no validation rules for Img

	// no validation rules for Title

	// no validation rules for SpuId

	// no validation rules for CategoryId

	// no validation rules for RootCategoryId

	for idx, item := range m.GetSpecs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpuDetail_SkuListValidationError{
						field:  fmt.Sprintf("Specs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpuDetail_SkuListValidationError{
						field:  fmt.Sprintf("Specs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpuDetail_SkuListValidationError{
					field:  fmt.Sprintf("Specs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Code

	// no validation rules for Stock

	if len(errors) > 0 {
		return SpuDetail_SkuListMultiError(errors)
	}
	return nil
}

// SpuDetail_SkuListMultiError is an error wrapping multiple validation errors
// returned by SpuDetail_SkuList.ValidateAll() if the designated constraints
// aren't met.
type SpuDetail_SkuListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetail_SkuListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetail_SkuListMultiError) AllErrors() []error { return m }

// SpuDetail_SkuListValidationError is the validation error returned by
// SpuDetail_SkuList.Validate if the designated constraints aren't met.
type SpuDetail_SkuListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetail_SkuListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetail_SkuListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetail_SkuListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetail_SkuListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetail_SkuListValidationError) ErrorName() string {
	return "SpuDetail_SkuListValidationError"
}

// Error satisfies the builtin error interface
func (e SpuDetail_SkuListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail_SkuList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetail_SkuListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetail_SkuListValidationError{}

// Validate checks the field values on SpuDetail_SpuImgList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpuDetail_SpuImgList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail_SpuImgList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuDetail_SpuImgListMultiError, or nil if none found.
func (m *SpuDetail_SpuImgList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail_SpuImgList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Img

	// no validation rules for SpuId

	if len(errors) > 0 {
		return SpuDetail_SpuImgListMultiError(errors)
	}
	return nil
}

// SpuDetail_SpuImgListMultiError is an error wrapping multiple validation
// errors returned by SpuDetail_SpuImgList.ValidateAll() if the designated
// constraints aren't met.
type SpuDetail_SpuImgListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetail_SpuImgListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetail_SpuImgListMultiError) AllErrors() []error { return m }

// SpuDetail_SpuImgListValidationError is the validation error returned by
// SpuDetail_SpuImgList.Validate if the designated constraints aren't met.
type SpuDetail_SpuImgListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetail_SpuImgListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetail_SpuImgListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetail_SpuImgListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetail_SpuImgListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetail_SpuImgListValidationError) ErrorName() string {
	return "SpuDetail_SpuImgListValidationError"
}

// Error satisfies the builtin error interface
func (e SpuDetail_SpuImgListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail_SpuImgList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetail_SpuImgListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetail_SpuImgListValidationError{}

// Validate checks the field values on SpuDetail_SpuDetailImgList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpuDetail_SpuDetailImgList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuDetail_SpuDetailImgList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpuDetail_SpuDetailImgListMultiError, or nil if none found.
func (m *SpuDetail_SpuDetailImgList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuDetail_SpuDetailImgList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Img

	// no validation rules for SpuId

	// no validation rules for Index

	if len(errors) > 0 {
		return SpuDetail_SpuDetailImgListMultiError(errors)
	}
	return nil
}

// SpuDetail_SpuDetailImgListMultiError is an error wrapping multiple
// validation errors returned by SpuDetail_SpuDetailImgList.ValidateAll() if
// the designated constraints aren't met.
type SpuDetail_SpuDetailImgListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuDetail_SpuDetailImgListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuDetail_SpuDetailImgListMultiError) AllErrors() []error { return m }

// SpuDetail_SpuDetailImgListValidationError is the validation error returned
// by SpuDetail_SpuDetailImgList.Validate if the designated constraints aren't met.
type SpuDetail_SpuDetailImgListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuDetail_SpuDetailImgListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuDetail_SpuDetailImgListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuDetail_SpuDetailImgListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuDetail_SpuDetailImgListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuDetail_SpuDetailImgListValidationError) ErrorName() string {
	return "SpuDetail_SpuDetailImgListValidationError"
}

// Error satisfies the builtin error interface
func (e SpuDetail_SpuDetailImgListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuDetail_SpuDetailImgList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuDetail_SpuDetailImgListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuDetail_SpuDetailImgListValidationError{}

// Validate checks the field values on SpuPage_Items with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpuPage_Items) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpuPage_Items with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpuPage_ItemsMultiError, or
// nil if none found.
func (m *SpuPage_Items) ValidateAll() error {
	return m.validate(true)
}

func (m *SpuPage_Items) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for Img

	// no validation rules for ForThemeImg

	// no validation rules for Price

	// no validation rules for DiscountPrice

	// no validation rules for Description

	// no validation rules for Tags

	// no validation rules for SketchSpecId

	// no validation rules for MaxPurchaseQuantity

	// no validation rules for MinPurchaseQuantity

	if len(errors) > 0 {
		return SpuPage_ItemsMultiError(errors)
	}
	return nil
}

// SpuPage_ItemsMultiError is an error wrapping multiple validation errors
// returned by SpuPage_Items.ValidateAll() if the designated constraints
// aren't met.
type SpuPage_ItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpuPage_ItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpuPage_ItemsMultiError) AllErrors() []error { return m }

// SpuPage_ItemsValidationError is the validation error returned by
// SpuPage_Items.Validate if the designated constraints aren't met.
type SpuPage_ItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpuPage_ItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpuPage_ItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpuPage_ItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpuPage_ItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpuPage_ItemsValidationError) ErrorName() string { return "SpuPage_ItemsValidationError" }

// Error satisfies the builtin error interface
func (e SpuPage_ItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpuPage_Items.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpuPage_ItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpuPage_ItemsValidationError{}

// Validate checks the field values on SaleExplains_SaleExplain with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaleExplains_SaleExplain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaleExplains_SaleExplain with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaleExplains_SaleExplainMultiError, or nil if none found.
func (m *SaleExplains_SaleExplain) ValidateAll() error {
	return m.validate(true)
}

func (m *SaleExplains_SaleExplain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Fixed

	// no validation rules for Text

	// no validation rules for SpuId

	// no validation rules for Index

	// no validation rules for ReplaceId

	if len(errors) > 0 {
		return SaleExplains_SaleExplainMultiError(errors)
	}
	return nil
}

// SaleExplains_SaleExplainMultiError is an error wrapping multiple validation
// errors returned by SaleExplains_SaleExplain.ValidateAll() if the designated
// constraints aren't met.
type SaleExplains_SaleExplainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaleExplains_SaleExplainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaleExplains_SaleExplainMultiError) AllErrors() []error { return m }

// SaleExplains_SaleExplainValidationError is the validation error returned by
// SaleExplains_SaleExplain.Validate if the designated constraints aren't met.
type SaleExplains_SaleExplainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaleExplains_SaleExplainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaleExplains_SaleExplainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaleExplains_SaleExplainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaleExplains_SaleExplainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaleExplains_SaleExplainValidationError) ErrorName() string {
	return "SaleExplains_SaleExplainValidationError"
}

// Error satisfies the builtin error interface
func (e SaleExplains_SaleExplainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaleExplains_SaleExplain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaleExplains_SaleExplainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaleExplains_SaleExplainValidationError{}
