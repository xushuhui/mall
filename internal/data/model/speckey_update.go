// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/internal/data/model/predicate"
	"mall-go/internal/data/model/speckey"
	"mall-go/internal/data/model/spu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpecKeyUpdate is the builder for updating SpecKey entities.
type SpecKeyUpdate struct {
	config
	hooks    []Hook
	mutation *SpecKeyMutation
}

// Where appends a list predicates to the SpecKeyUpdate builder.
func (sku *SpecKeyUpdate) Where(ps ...predicate.SpecKey) *SpecKeyUpdate {
	sku.mutation.Where(ps...)
	return sku
}

// SetUpdateTime sets the "update_time" field.
func (sku *SpecKeyUpdate) SetUpdateTime(t time.Time) *SpecKeyUpdate {
	sku.mutation.SetUpdateTime(t)
	return sku
}

// SetDeleteTime sets the "delete_time" field.
func (sku *SpecKeyUpdate) SetDeleteTime(t time.Time) *SpecKeyUpdate {
	sku.mutation.SetDeleteTime(t)
	return sku
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sku *SpecKeyUpdate) SetNillableDeleteTime(t *time.Time) *SpecKeyUpdate {
	if t != nil {
		sku.SetDeleteTime(*t)
	}
	return sku
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (sku *SpecKeyUpdate) ClearDeleteTime() *SpecKeyUpdate {
	sku.mutation.ClearDeleteTime()
	return sku
}

// SetName sets the "name" field.
func (sku *SpecKeyUpdate) SetName(s string) *SpecKeyUpdate {
	sku.mutation.SetName(s)
	return sku
}

// SetUnit sets the "unit" field.
func (sku *SpecKeyUpdate) SetUnit(s string) *SpecKeyUpdate {
	sku.mutation.SetUnit(s)
	return sku
}

// SetStandard sets the "standard" field.
func (sku *SpecKeyUpdate) SetStandard(i int) *SpecKeyUpdate {
	sku.mutation.ResetStandard()
	sku.mutation.SetStandard(i)
	return sku
}

// AddStandard adds i to the "standard" field.
func (sku *SpecKeyUpdate) AddStandard(i int) *SpecKeyUpdate {
	sku.mutation.AddStandard(i)
	return sku
}

// SetDescription sets the "description" field.
func (sku *SpecKeyUpdate) SetDescription(s string) *SpecKeyUpdate {
	sku.mutation.SetDescription(s)
	return sku
}

// AddSpuIDs adds the "spu" edge to the Spu entity by IDs.
func (sku *SpecKeyUpdate) AddSpuIDs(ids ...int64) *SpecKeyUpdate {
	sku.mutation.AddSpuIDs(ids...)
	return sku
}

// AddSpu adds the "spu" edges to the Spu entity.
func (sku *SpecKeyUpdate) AddSpu(s ...*Spu) *SpecKeyUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sku.AddSpuIDs(ids...)
}

// Mutation returns the SpecKeyMutation object of the builder.
func (sku *SpecKeyUpdate) Mutation() *SpecKeyMutation {
	return sku.mutation
}

// ClearSpu clears all "spu" edges to the Spu entity.
func (sku *SpecKeyUpdate) ClearSpu() *SpecKeyUpdate {
	sku.mutation.ClearSpu()
	return sku
}

// RemoveSpuIDs removes the "spu" edge to Spu entities by IDs.
func (sku *SpecKeyUpdate) RemoveSpuIDs(ids ...int64) *SpecKeyUpdate {
	sku.mutation.RemoveSpuIDs(ids...)
	return sku
}

// RemoveSpu removes "spu" edges to Spu entities.
func (sku *SpecKeyUpdate) RemoveSpu(s ...*Spu) *SpecKeyUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sku.RemoveSpuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sku *SpecKeyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sku.defaults()
	if len(sku.hooks) == 0 {
		affected, err = sku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sku.mutation = mutation
			affected, err = sku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sku.hooks) - 1; i >= 0; i-- {
			if sku.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = sku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sku *SpecKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := sku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sku *SpecKeyUpdate) Exec(ctx context.Context) error {
	_, err := sku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sku *SpecKeyUpdate) ExecX(ctx context.Context) {
	if err := sku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sku *SpecKeyUpdate) defaults() {
	if _, ok := sku.mutation.UpdateTime(); !ok {
		v := speckey.UpdateDefaultUpdateTime()
		sku.mutation.SetUpdateTime(v)
	}
}

func (sku *SpecKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   speckey.Table,
			Columns: speckey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: speckey.FieldID,
			},
		},
	}
	if ps := sku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sku.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: speckey.FieldUpdateTime,
		})
	}
	if value, ok := sku.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: speckey.FieldDeleteTime,
		})
	}
	if sku.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: speckey.FieldDeleteTime,
		})
	}
	if value, ok := sku.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: speckey.FieldName,
		})
	}
	if value, ok := sku.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: speckey.FieldUnit,
		})
	}
	if value, ok := sku.mutation.Standard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: speckey.FieldStandard,
		})
	}
	if value, ok := sku.mutation.AddedStandard(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: speckey.FieldStandard,
		})
	}
	if value, ok := sku.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: speckey.FieldDescription,
		})
	}
	if sku.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   speckey.SpuTable,
			Columns: speckey.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sku.mutation.RemovedSpuIDs(); len(nodes) > 0 && !sku.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   speckey.SpuTable,
			Columns: speckey.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sku.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   speckey.SpuTable,
			Columns: speckey.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{speckey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SpecKeyUpdateOne is the builder for updating a single SpecKey entity.
type SpecKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpecKeyMutation
}

// SetUpdateTime sets the "update_time" field.
func (skuo *SpecKeyUpdateOne) SetUpdateTime(t time.Time) *SpecKeyUpdateOne {
	skuo.mutation.SetUpdateTime(t)
	return skuo
}

// SetDeleteTime sets the "delete_time" field.
func (skuo *SpecKeyUpdateOne) SetDeleteTime(t time.Time) *SpecKeyUpdateOne {
	skuo.mutation.SetDeleteTime(t)
	return skuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (skuo *SpecKeyUpdateOne) SetNillableDeleteTime(t *time.Time) *SpecKeyUpdateOne {
	if t != nil {
		skuo.SetDeleteTime(*t)
	}
	return skuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (skuo *SpecKeyUpdateOne) ClearDeleteTime() *SpecKeyUpdateOne {
	skuo.mutation.ClearDeleteTime()
	return skuo
}

// SetName sets the "name" field.
func (skuo *SpecKeyUpdateOne) SetName(s string) *SpecKeyUpdateOne {
	skuo.mutation.SetName(s)
	return skuo
}

// SetUnit sets the "unit" field.
func (skuo *SpecKeyUpdateOne) SetUnit(s string) *SpecKeyUpdateOne {
	skuo.mutation.SetUnit(s)
	return skuo
}

// SetStandard sets the "standard" field.
func (skuo *SpecKeyUpdateOne) SetStandard(i int) *SpecKeyUpdateOne {
	skuo.mutation.ResetStandard()
	skuo.mutation.SetStandard(i)
	return skuo
}

// AddStandard adds i to the "standard" field.
func (skuo *SpecKeyUpdateOne) AddStandard(i int) *SpecKeyUpdateOne {
	skuo.mutation.AddStandard(i)
	return skuo
}

// SetDescription sets the "description" field.
func (skuo *SpecKeyUpdateOne) SetDescription(s string) *SpecKeyUpdateOne {
	skuo.mutation.SetDescription(s)
	return skuo
}

// AddSpuIDs adds the "spu" edge to the Spu entity by IDs.
func (skuo *SpecKeyUpdateOne) AddSpuIDs(ids ...int64) *SpecKeyUpdateOne {
	skuo.mutation.AddSpuIDs(ids...)
	return skuo
}

// AddSpu adds the "spu" edges to the Spu entity.
func (skuo *SpecKeyUpdateOne) AddSpu(s ...*Spu) *SpecKeyUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return skuo.AddSpuIDs(ids...)
}

// Mutation returns the SpecKeyMutation object of the builder.
func (skuo *SpecKeyUpdateOne) Mutation() *SpecKeyMutation {
	return skuo.mutation
}

// ClearSpu clears all "spu" edges to the Spu entity.
func (skuo *SpecKeyUpdateOne) ClearSpu() *SpecKeyUpdateOne {
	skuo.mutation.ClearSpu()
	return skuo
}

// RemoveSpuIDs removes the "spu" edge to Spu entities by IDs.
func (skuo *SpecKeyUpdateOne) RemoveSpuIDs(ids ...int64) *SpecKeyUpdateOne {
	skuo.mutation.RemoveSpuIDs(ids...)
	return skuo
}

// RemoveSpu removes "spu" edges to Spu entities.
func (skuo *SpecKeyUpdateOne) RemoveSpu(s ...*Spu) *SpecKeyUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return skuo.RemoveSpuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (skuo *SpecKeyUpdateOne) Select(field string, fields ...string) *SpecKeyUpdateOne {
	skuo.fields = append([]string{field}, fields...)
	return skuo
}

// Save executes the query and returns the updated SpecKey entity.
func (skuo *SpecKeyUpdateOne) Save(ctx context.Context) (*SpecKey, error) {
	var (
		err  error
		node *SpecKey
	)
	skuo.defaults()
	if len(skuo.hooks) == 0 {
		node, err = skuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			skuo.mutation = mutation
			node, err = skuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(skuo.hooks) - 1; i >= 0; i-- {
			if skuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = skuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, skuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (skuo *SpecKeyUpdateOne) SaveX(ctx context.Context) *SpecKey {
	node, err := skuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (skuo *SpecKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := skuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (skuo *SpecKeyUpdateOne) ExecX(ctx context.Context) {
	if err := skuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (skuo *SpecKeyUpdateOne) defaults() {
	if _, ok := skuo.mutation.UpdateTime(); !ok {
		v := speckey.UpdateDefaultUpdateTime()
		skuo.mutation.SetUpdateTime(v)
	}
}

func (skuo *SpecKeyUpdateOne) sqlSave(ctx context.Context) (_node *SpecKey, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   speckey.Table,
			Columns: speckey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: speckey.FieldID,
			},
		},
	}
	id, ok := skuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SpecKey.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := skuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, speckey.FieldID)
		for _, f := range fields {
			if !speckey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != speckey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := skuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := skuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: speckey.FieldUpdateTime,
		})
	}
	if value, ok := skuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: speckey.FieldDeleteTime,
		})
	}
	if skuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: speckey.FieldDeleteTime,
		})
	}
	if value, ok := skuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: speckey.FieldName,
		})
	}
	if value, ok := skuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: speckey.FieldUnit,
		})
	}
	if value, ok := skuo.mutation.Standard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: speckey.FieldStandard,
		})
	}
	if value, ok := skuo.mutation.AddedStandard(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: speckey.FieldStandard,
		})
	}
	if value, ok := skuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: speckey.FieldDescription,
		})
	}
	if skuo.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   speckey.SpuTable,
			Columns: speckey.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := skuo.mutation.RemovedSpuIDs(); len(nodes) > 0 && !skuo.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   speckey.SpuTable,
			Columns: speckey.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := skuo.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   speckey.SpuTable,
			Columns: speckey.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SpecKey{config: skuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, skuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{speckey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
