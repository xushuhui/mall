// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/internal/data/model/predicate"
	"mall-go/internal/data/model/saleexplain"
	"mall-go/internal/data/model/spu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SaleExplainUpdate is the builder for updating SaleExplain entities.
type SaleExplainUpdate struct {
	config
	hooks    []Hook
	mutation *SaleExplainMutation
}

// Where appends a list predicates to the SaleExplainUpdate builder.
func (seu *SaleExplainUpdate) Where(ps ...predicate.SaleExplain) *SaleExplainUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetUpdateTime sets the "update_time" field.
func (seu *SaleExplainUpdate) SetUpdateTime(t time.Time) *SaleExplainUpdate {
	seu.mutation.SetUpdateTime(t)
	return seu
}

// SetDeleteTime sets the "delete_time" field.
func (seu *SaleExplainUpdate) SetDeleteTime(t time.Time) *SaleExplainUpdate {
	seu.mutation.SetDeleteTime(t)
	return seu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (seu *SaleExplainUpdate) SetNillableDeleteTime(t *time.Time) *SaleExplainUpdate {
	if t != nil {
		seu.SetDeleteTime(*t)
	}
	return seu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (seu *SaleExplainUpdate) ClearDeleteTime() *SaleExplainUpdate {
	seu.mutation.ClearDeleteTime()
	return seu
}

// SetFixed sets the "fixed" field.
func (seu *SaleExplainUpdate) SetFixed(i int8) *SaleExplainUpdate {
	seu.mutation.ResetFixed()
	seu.mutation.SetFixed(i)
	return seu
}

// AddFixed adds i to the "fixed" field.
func (seu *SaleExplainUpdate) AddFixed(i int8) *SaleExplainUpdate {
	seu.mutation.AddFixed(i)
	return seu
}

// SetText sets the "text" field.
func (seu *SaleExplainUpdate) SetText(s string) *SaleExplainUpdate {
	seu.mutation.SetText(s)
	return seu
}

// SetSpuID sets the "spu_id" field.
func (seu *SaleExplainUpdate) SetSpuID(i int64) *SaleExplainUpdate {
	seu.mutation.SetSpuID(i)
	return seu
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (seu *SaleExplainUpdate) SetNillableSpuID(i *int64) *SaleExplainUpdate {
	if i != nil {
		seu.SetSpuID(*i)
	}
	return seu
}

// ClearSpuID clears the value of the "spu_id" field.
func (seu *SaleExplainUpdate) ClearSpuID() *SaleExplainUpdate {
	seu.mutation.ClearSpuID()
	return seu
}

// SetIndex sets the "index" field.
func (seu *SaleExplainUpdate) SetIndex(i int) *SaleExplainUpdate {
	seu.mutation.ResetIndex()
	seu.mutation.SetIndex(i)
	return seu
}

// AddIndex adds i to the "index" field.
func (seu *SaleExplainUpdate) AddIndex(i int) *SaleExplainUpdate {
	seu.mutation.AddIndex(i)
	return seu
}

// SetReplaceID sets the "replace_id" field.
func (seu *SaleExplainUpdate) SetReplaceID(i int64) *SaleExplainUpdate {
	seu.mutation.ResetReplaceID()
	seu.mutation.SetReplaceID(i)
	return seu
}

// AddReplaceID adds i to the "replace_id" field.
func (seu *SaleExplainUpdate) AddReplaceID(i int64) *SaleExplainUpdate {
	seu.mutation.AddReplaceID(i)
	return seu
}

// SetSpu sets the "spu" edge to the Spu entity.
func (seu *SaleExplainUpdate) SetSpu(s *Spu) *SaleExplainUpdate {
	return seu.SetSpuID(s.ID)
}

// Mutation returns the SaleExplainMutation object of the builder.
func (seu *SaleExplainUpdate) Mutation() *SaleExplainMutation {
	return seu.mutation
}

// ClearSpu clears the "spu" edge to the Spu entity.
func (seu *SaleExplainUpdate) ClearSpu() *SaleExplainUpdate {
	seu.mutation.ClearSpu()
	return seu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SaleExplainUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	seu.defaults()
	if len(seu.hooks) == 0 {
		affected, err = seu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SaleExplainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			seu.mutation = mutation
			affected, err = seu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(seu.hooks) - 1; i >= 0; i-- {
			if seu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = seu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, seu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SaleExplainUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SaleExplainUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SaleExplainUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seu *SaleExplainUpdate) defaults() {
	if _, ok := seu.mutation.UpdateTime(); !ok {
		v := saleexplain.UpdateDefaultUpdateTime()
		seu.mutation.SetUpdateTime(v)
	}
}

func (seu *SaleExplainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   saleexplain.Table,
			Columns: saleexplain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: saleexplain.FieldID,
			},
		},
	}
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: saleexplain.FieldUpdateTime,
		})
	}
	if value, ok := seu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: saleexplain.FieldDeleteTime,
		})
	}
	if seu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: saleexplain.FieldDeleteTime,
		})
	}
	if value, ok := seu.mutation.Fixed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: saleexplain.FieldFixed,
		})
	}
	if value, ok := seu.mutation.AddedFixed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: saleexplain.FieldFixed,
		})
	}
	if value, ok := seu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: saleexplain.FieldText,
		})
	}
	if value, ok := seu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: saleexplain.FieldIndex,
		})
	}
	if value, ok := seu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: saleexplain.FieldIndex,
		})
	}
	if value, ok := seu.mutation.ReplaceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: saleexplain.FieldReplaceID,
		})
	}
	if value, ok := seu.mutation.AddedReplaceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: saleexplain.FieldReplaceID,
		})
	}
	if seu.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saleexplain.SpuTable,
			Columns: []string{saleexplain.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saleexplain.SpuTable,
			Columns: []string{saleexplain.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{saleexplain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SaleExplainUpdateOne is the builder for updating a single SaleExplain entity.
type SaleExplainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SaleExplainMutation
}

// SetUpdateTime sets the "update_time" field.
func (seuo *SaleExplainUpdateOne) SetUpdateTime(t time.Time) *SaleExplainUpdateOne {
	seuo.mutation.SetUpdateTime(t)
	return seuo
}

// SetDeleteTime sets the "delete_time" field.
func (seuo *SaleExplainUpdateOne) SetDeleteTime(t time.Time) *SaleExplainUpdateOne {
	seuo.mutation.SetDeleteTime(t)
	return seuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (seuo *SaleExplainUpdateOne) SetNillableDeleteTime(t *time.Time) *SaleExplainUpdateOne {
	if t != nil {
		seuo.SetDeleteTime(*t)
	}
	return seuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (seuo *SaleExplainUpdateOne) ClearDeleteTime() *SaleExplainUpdateOne {
	seuo.mutation.ClearDeleteTime()
	return seuo
}

// SetFixed sets the "fixed" field.
func (seuo *SaleExplainUpdateOne) SetFixed(i int8) *SaleExplainUpdateOne {
	seuo.mutation.ResetFixed()
	seuo.mutation.SetFixed(i)
	return seuo
}

// AddFixed adds i to the "fixed" field.
func (seuo *SaleExplainUpdateOne) AddFixed(i int8) *SaleExplainUpdateOne {
	seuo.mutation.AddFixed(i)
	return seuo
}

// SetText sets the "text" field.
func (seuo *SaleExplainUpdateOne) SetText(s string) *SaleExplainUpdateOne {
	seuo.mutation.SetText(s)
	return seuo
}

// SetSpuID sets the "spu_id" field.
func (seuo *SaleExplainUpdateOne) SetSpuID(i int64) *SaleExplainUpdateOne {
	seuo.mutation.SetSpuID(i)
	return seuo
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (seuo *SaleExplainUpdateOne) SetNillableSpuID(i *int64) *SaleExplainUpdateOne {
	if i != nil {
		seuo.SetSpuID(*i)
	}
	return seuo
}

// ClearSpuID clears the value of the "spu_id" field.
func (seuo *SaleExplainUpdateOne) ClearSpuID() *SaleExplainUpdateOne {
	seuo.mutation.ClearSpuID()
	return seuo
}

// SetIndex sets the "index" field.
func (seuo *SaleExplainUpdateOne) SetIndex(i int) *SaleExplainUpdateOne {
	seuo.mutation.ResetIndex()
	seuo.mutation.SetIndex(i)
	return seuo
}

// AddIndex adds i to the "index" field.
func (seuo *SaleExplainUpdateOne) AddIndex(i int) *SaleExplainUpdateOne {
	seuo.mutation.AddIndex(i)
	return seuo
}

// SetReplaceID sets the "replace_id" field.
func (seuo *SaleExplainUpdateOne) SetReplaceID(i int64) *SaleExplainUpdateOne {
	seuo.mutation.ResetReplaceID()
	seuo.mutation.SetReplaceID(i)
	return seuo
}

// AddReplaceID adds i to the "replace_id" field.
func (seuo *SaleExplainUpdateOne) AddReplaceID(i int64) *SaleExplainUpdateOne {
	seuo.mutation.AddReplaceID(i)
	return seuo
}

// SetSpu sets the "spu" edge to the Spu entity.
func (seuo *SaleExplainUpdateOne) SetSpu(s *Spu) *SaleExplainUpdateOne {
	return seuo.SetSpuID(s.ID)
}

// Mutation returns the SaleExplainMutation object of the builder.
func (seuo *SaleExplainUpdateOne) Mutation() *SaleExplainMutation {
	return seuo.mutation
}

// ClearSpu clears the "spu" edge to the Spu entity.
func (seuo *SaleExplainUpdateOne) ClearSpu() *SaleExplainUpdateOne {
	seuo.mutation.ClearSpu()
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SaleExplainUpdateOne) Select(field string, fields ...string) *SaleExplainUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SaleExplain entity.
func (seuo *SaleExplainUpdateOne) Save(ctx context.Context) (*SaleExplain, error) {
	var (
		err  error
		node *SaleExplain
	)
	seuo.defaults()
	if len(seuo.hooks) == 0 {
		node, err = seuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SaleExplainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			seuo.mutation = mutation
			node, err = seuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(seuo.hooks) - 1; i >= 0; i-- {
			if seuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = seuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, seuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SaleExplainUpdateOne) SaveX(ctx context.Context) *SaleExplain {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SaleExplainUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SaleExplainUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seuo *SaleExplainUpdateOne) defaults() {
	if _, ok := seuo.mutation.UpdateTime(); !ok {
		v := saleexplain.UpdateDefaultUpdateTime()
		seuo.mutation.SetUpdateTime(v)
	}
}

func (seuo *SaleExplainUpdateOne) sqlSave(ctx context.Context) (_node *SaleExplain, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   saleexplain.Table,
			Columns: saleexplain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: saleexplain.FieldID,
			},
		},
	}
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SaleExplain.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, saleexplain.FieldID)
		for _, f := range fields {
			if !saleexplain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != saleexplain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: saleexplain.FieldUpdateTime,
		})
	}
	if value, ok := seuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: saleexplain.FieldDeleteTime,
		})
	}
	if seuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: saleexplain.FieldDeleteTime,
		})
	}
	if value, ok := seuo.mutation.Fixed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: saleexplain.FieldFixed,
		})
	}
	if value, ok := seuo.mutation.AddedFixed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: saleexplain.FieldFixed,
		})
	}
	if value, ok := seuo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: saleexplain.FieldText,
		})
	}
	if value, ok := seuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: saleexplain.FieldIndex,
		})
	}
	if value, ok := seuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: saleexplain.FieldIndex,
		})
	}
	if value, ok := seuo.mutation.ReplaceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: saleexplain.FieldReplaceID,
		})
	}
	if value, ok := seuo.mutation.AddedReplaceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: saleexplain.FieldReplaceID,
		})
	}
	if seuo.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saleexplain.SpuTable,
			Columns: []string{saleexplain.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saleexplain.SpuTable,
			Columns: []string{saleexplain.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SaleExplain{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{saleexplain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
