// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/internal/data/model/userinfo"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserInfo is the model entity for the UserInfo schema.
type UserInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// UnifyUID holds the value of the "unify_uid" field.
	UnifyUID int `json:"unify_uid,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// WxProfile holds the value of the "wx_profile" field.
	WxProfile string `json:"wx_profile,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userinfo.FieldID, userinfo.FieldUnifyUID:
			values[i] = new(sql.NullInt64)
		case userinfo.FieldNickname, userinfo.FieldEmail, userinfo.FieldAvatar, userinfo.FieldWxProfile:
			values[i] = new(sql.NullString)
		case userinfo.FieldCreateTime, userinfo.FieldUpdateTime, userinfo.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserInfo fields.
func (ui *UserInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ui.ID = int64(value.Int64)
		case userinfo.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ui.CreateTime = value.Time
			}
		case userinfo.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ui.UpdateTime = value.Time
			}
		case userinfo.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				ui.DeleteTime = value.Time
			}
		case userinfo.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				ui.Nickname = value.String
			}
		case userinfo.FieldUnifyUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unify_uid", values[i])
			} else if value.Valid {
				ui.UnifyUID = int(value.Int64)
			}
		case userinfo.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ui.Email = value.String
			}
		case userinfo.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				ui.Avatar = value.String
			}
		case userinfo.FieldWxProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wx_profile", values[i])
			} else if value.Valid {
				ui.WxProfile = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserInfo.
// Note that you need to call UserInfo.Unwrap() before calling this method if this UserInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ui *UserInfo) Update() *UserInfoUpdateOne {
	return (&UserInfoClient{config: ui.config}).UpdateOne(ui)
}

// Unwrap unwraps the UserInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ui *UserInfo) Unwrap() *UserInfo {
	tx, ok := ui.config.driver.(*txDriver)
	if !ok {
		panic("model: UserInfo is not a transactional entity")
	}
	ui.config.driver = tx.drv
	return ui
}

// String implements the fmt.Stringer.
func (ui *UserInfo) String() string {
	var builder strings.Builder
	builder.WriteString("UserInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", ui.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ui.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ui.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(ui.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", nickname=")
	builder.WriteString(ui.Nickname)
	builder.WriteString(", unify_uid=")
	builder.WriteString(fmt.Sprintf("%v", ui.UnifyUID))
	builder.WriteString(", email=")
	builder.WriteString(ui.Email)
	builder.WriteString(", avatar=")
	builder.WriteString(ui.Avatar)
	builder.WriteString(", wx_profile=")
	builder.WriteString(ui.WxProfile)
	builder.WriteByte(')')
	return builder.String()
}

// UserInfos is a parsable slice of UserInfo.
type UserInfos []*UserInfo

func (ui UserInfos) config(cfg config) {
	for _i := range ui {
		ui[_i].config = cfg
	}
}
