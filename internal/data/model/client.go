// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"log"

	"mall-go/internal/data/model/migrate"

	"mall-go/internal/data/model/activity"
	"mall-go/internal/data/model/banner"
	"mall-go/internal/data/model/banneritem"
	"mall-go/internal/data/model/brand"
	"mall-go/internal/data/model/category"
	"mall-go/internal/data/model/charge"
	"mall-go/internal/data/model/coupon"
	"mall-go/internal/data/model/coupontemplate"
	"mall-go/internal/data/model/coupontype"
	"mall-go/internal/data/model/gridcategory"
	"mall-go/internal/data/model/order"
	"mall-go/internal/data/model/orderdetail"
	"mall-go/internal/data/model/ordersnap"
	"mall-go/internal/data/model/ordersub"
	"mall-go/internal/data/model/refund"
	"mall-go/internal/data/model/saleexplain"
	"mall-go/internal/data/model/sku"
	"mall-go/internal/data/model/skuspec"
	"mall-go/internal/data/model/speckey"
	"mall-go/internal/data/model/specvalue"
	"mall-go/internal/data/model/spu"
	"mall-go/internal/data/model/spudetailimg"
	"mall-go/internal/data/model/spuimg"
	"mall-go/internal/data/model/tag"
	"mall-go/internal/data/model/theme"
	"mall-go/internal/data/model/user"
	"mall-go/internal/data/model/usercoupon"
	"mall-go/internal/data/model/userfavor"
	"mall-go/internal/data/model/userinfo"
	"mall-go/internal/data/model/userpoint"
	"mall-go/internal/data/model/userpointdetail"
	"mall-go/internal/data/model/userwallet"
	"mall-go/internal/data/model/userwalletdetail"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// Banner is the client for interacting with the Banner builders.
	Banner *BannerClient
	// BannerItem is the client for interacting with the BannerItem builders.
	BannerItem *BannerItemClient
	// Brand is the client for interacting with the Brand builders.
	Brand *BrandClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Charge is the client for interacting with the Charge builders.
	Charge *ChargeClient
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// CouponTemplate is the client for interacting with the CouponTemplate builders.
	CouponTemplate *CouponTemplateClient
	// CouponType is the client for interacting with the CouponType builders.
	CouponType *CouponTypeClient
	// GridCategory is the client for interacting with the GridCategory builders.
	GridCategory *GridCategoryClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderDetail is the client for interacting with the OrderDetail builders.
	OrderDetail *OrderDetailClient
	// OrderSnap is the client for interacting with the OrderSnap builders.
	OrderSnap *OrderSnapClient
	// OrderSub is the client for interacting with the OrderSub builders.
	OrderSub *OrderSubClient
	// Refund is the client for interacting with the Refund builders.
	Refund *RefundClient
	// SaleExplain is the client for interacting with the SaleExplain builders.
	SaleExplain *SaleExplainClient
	// Sku is the client for interacting with the Sku builders.
	Sku *SkuClient
	// SkuSpec is the client for interacting with the SkuSpec builders.
	SkuSpec *SkuSpecClient
	// SpecKey is the client for interacting with the SpecKey builders.
	SpecKey *SpecKeyClient
	// SpecValue is the client for interacting with the SpecValue builders.
	SpecValue *SpecValueClient
	// Spu is the client for interacting with the Spu builders.
	Spu *SpuClient
	// SpuDetailImg is the client for interacting with the SpuDetailImg builders.
	SpuDetailImg *SpuDetailImgClient
	// SpuImg is the client for interacting with the SpuImg builders.
	SpuImg *SpuImgClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Theme is the client for interacting with the Theme builders.
	Theme *ThemeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserCoupon is the client for interacting with the UserCoupon builders.
	UserCoupon *UserCouponClient
	// UserFavor is the client for interacting with the UserFavor builders.
	UserFavor *UserFavorClient
	// UserInfo is the client for interacting with the UserInfo builders.
	UserInfo *UserInfoClient
	// UserPoint is the client for interacting with the UserPoint builders.
	UserPoint *UserPointClient
	// UserPointDetail is the client for interacting with the UserPointDetail builders.
	UserPointDetail *UserPointDetailClient
	// UserWallet is the client for interacting with the UserWallet builders.
	UserWallet *UserWalletClient
	// UserWalletDetail is the client for interacting with the UserWalletDetail builders.
	UserWalletDetail *UserWalletDetailClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.Banner = NewBannerClient(c.config)
	c.BannerItem = NewBannerItemClient(c.config)
	c.Brand = NewBrandClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Charge = NewChargeClient(c.config)
	c.Coupon = NewCouponClient(c.config)
	c.CouponTemplate = NewCouponTemplateClient(c.config)
	c.CouponType = NewCouponTypeClient(c.config)
	c.GridCategory = NewGridCategoryClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderDetail = NewOrderDetailClient(c.config)
	c.OrderSnap = NewOrderSnapClient(c.config)
	c.OrderSub = NewOrderSubClient(c.config)
	c.Refund = NewRefundClient(c.config)
	c.SaleExplain = NewSaleExplainClient(c.config)
	c.Sku = NewSkuClient(c.config)
	c.SkuSpec = NewSkuSpecClient(c.config)
	c.SpecKey = NewSpecKeyClient(c.config)
	c.SpecValue = NewSpecValueClient(c.config)
	c.Spu = NewSpuClient(c.config)
	c.SpuDetailImg = NewSpuDetailImgClient(c.config)
	c.SpuImg = NewSpuImgClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Theme = NewThemeClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserCoupon = NewUserCouponClient(c.config)
	c.UserFavor = NewUserFavorClient(c.config)
	c.UserInfo = NewUserInfoClient(c.config)
	c.UserPoint = NewUserPointClient(c.config)
	c.UserPointDetail = NewUserPointDetailClient(c.config)
	c.UserWallet = NewUserWalletClient(c.config)
	c.UserWalletDetail = NewUserWalletDetailClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Activity:         NewActivityClient(cfg),
		Banner:           NewBannerClient(cfg),
		BannerItem:       NewBannerItemClient(cfg),
		Brand:            NewBrandClient(cfg),
		Category:         NewCategoryClient(cfg),
		Charge:           NewChargeClient(cfg),
		Coupon:           NewCouponClient(cfg),
		CouponTemplate:   NewCouponTemplateClient(cfg),
		CouponType:       NewCouponTypeClient(cfg),
		GridCategory:     NewGridCategoryClient(cfg),
		Order:            NewOrderClient(cfg),
		OrderDetail:      NewOrderDetailClient(cfg),
		OrderSnap:        NewOrderSnapClient(cfg),
		OrderSub:         NewOrderSubClient(cfg),
		Refund:           NewRefundClient(cfg),
		SaleExplain:      NewSaleExplainClient(cfg),
		Sku:              NewSkuClient(cfg),
		SkuSpec:          NewSkuSpecClient(cfg),
		SpecKey:          NewSpecKeyClient(cfg),
		SpecValue:        NewSpecValueClient(cfg),
		Spu:              NewSpuClient(cfg),
		SpuDetailImg:     NewSpuDetailImgClient(cfg),
		SpuImg:           NewSpuImgClient(cfg),
		Tag:              NewTagClient(cfg),
		Theme:            NewThemeClient(cfg),
		User:             NewUserClient(cfg),
		UserCoupon:       NewUserCouponClient(cfg),
		UserFavor:        NewUserFavorClient(cfg),
		UserInfo:         NewUserInfoClient(cfg),
		UserPoint:        NewUserPointClient(cfg),
		UserPointDetail:  NewUserPointDetailClient(cfg),
		UserWallet:       NewUserWalletClient(cfg),
		UserWalletDetail: NewUserWalletDetailClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:           cfg,
		Activity:         NewActivityClient(cfg),
		Banner:           NewBannerClient(cfg),
		BannerItem:       NewBannerItemClient(cfg),
		Brand:            NewBrandClient(cfg),
		Category:         NewCategoryClient(cfg),
		Charge:           NewChargeClient(cfg),
		Coupon:           NewCouponClient(cfg),
		CouponTemplate:   NewCouponTemplateClient(cfg),
		CouponType:       NewCouponTypeClient(cfg),
		GridCategory:     NewGridCategoryClient(cfg),
		Order:            NewOrderClient(cfg),
		OrderDetail:      NewOrderDetailClient(cfg),
		OrderSnap:        NewOrderSnapClient(cfg),
		OrderSub:         NewOrderSubClient(cfg),
		Refund:           NewRefundClient(cfg),
		SaleExplain:      NewSaleExplainClient(cfg),
		Sku:              NewSkuClient(cfg),
		SkuSpec:          NewSkuSpecClient(cfg),
		SpecKey:          NewSpecKeyClient(cfg),
		SpecValue:        NewSpecValueClient(cfg),
		Spu:              NewSpuClient(cfg),
		SpuDetailImg:     NewSpuDetailImgClient(cfg),
		SpuImg:           NewSpuImgClient(cfg),
		Tag:              NewTagClient(cfg),
		Theme:            NewThemeClient(cfg),
		User:             NewUserClient(cfg),
		UserCoupon:       NewUserCouponClient(cfg),
		UserFavor:        NewUserFavorClient(cfg),
		UserInfo:         NewUserInfoClient(cfg),
		UserPoint:        NewUserPointClient(cfg),
		UserPointDetail:  NewUserPointDetailClient(cfg),
		UserWallet:       NewUserWalletClient(cfg),
		UserWalletDetail: NewUserWalletDetailClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Activity.Use(hooks...)
	c.Banner.Use(hooks...)
	c.BannerItem.Use(hooks...)
	c.Brand.Use(hooks...)
	c.Category.Use(hooks...)
	c.Charge.Use(hooks...)
	c.Coupon.Use(hooks...)
	c.CouponTemplate.Use(hooks...)
	c.CouponType.Use(hooks...)
	c.GridCategory.Use(hooks...)
	c.Order.Use(hooks...)
	c.OrderDetail.Use(hooks...)
	c.OrderSnap.Use(hooks...)
	c.OrderSub.Use(hooks...)
	c.Refund.Use(hooks...)
	c.SaleExplain.Use(hooks...)
	c.Sku.Use(hooks...)
	c.SkuSpec.Use(hooks...)
	c.SpecKey.Use(hooks...)
	c.SpecValue.Use(hooks...)
	c.Spu.Use(hooks...)
	c.SpuDetailImg.Use(hooks...)
	c.SpuImg.Use(hooks...)
	c.Tag.Use(hooks...)
	c.Theme.Use(hooks...)
	c.User.Use(hooks...)
	c.UserCoupon.Use(hooks...)
	c.UserFavor.Use(hooks...)
	c.UserInfo.Use(hooks...)
	c.UserPoint.Use(hooks...)
	c.UserPointDetail.Use(hooks...)
	c.UserWallet.Use(hooks...)
	c.UserWalletDetail.Use(hooks...)
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Create returns a create builder for Activity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id int64) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityClient) DeleteOneID(id int64) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id int64) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id int64) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a Activity.
func (c *ActivityClient) QuerySpu(a *Activity) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, activity.SpuTable, activity.SpuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCoupon queries the coupon edge of a Activity.
func (c *ActivityClient) QueryCoupon(a *Activity) *CouponQuery {
	query := &CouponQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, activity.CouponTable, activity.CouponPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// BannerClient is a client for the Banner schema.
type BannerClient struct {
	config
}

// NewBannerClient returns a client for the Banner from the given config.
func NewBannerClient(c config) *BannerClient {
	return &BannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banner.Hooks(f(g(h())))`.
func (c *BannerClient) Use(hooks ...Hook) {
	c.hooks.Banner = append(c.hooks.Banner, hooks...)
}

// Create returns a create builder for Banner.
func (c *BannerClient) Create() *BannerCreate {
	mutation := newBannerMutation(c.config, OpCreate)
	return &BannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Banner entities.
func (c *BannerClient) CreateBulk(builders ...*BannerCreate) *BannerCreateBulk {
	return &BannerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Banner.
func (c *BannerClient) Update() *BannerUpdate {
	mutation := newBannerMutation(c.config, OpUpdate)
	return &BannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannerClient) UpdateOne(b *Banner) *BannerUpdateOne {
	mutation := newBannerMutation(c.config, OpUpdateOne, withBanner(b))
	return &BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannerClient) UpdateOneID(id int64) *BannerUpdateOne {
	mutation := newBannerMutation(c.config, OpUpdateOne, withBannerID(id))
	return &BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Banner.
func (c *BannerClient) Delete() *BannerDelete {
	mutation := newBannerMutation(c.config, OpDelete)
	return &BannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BannerClient) DeleteOne(b *Banner) *BannerDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BannerClient) DeleteOneID(id int64) *BannerDeleteOne {
	builder := c.Delete().Where(banner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannerDeleteOne{builder}
}

// Query returns a query builder for Banner.
func (c *BannerClient) Query() *BannerQuery {
	return &BannerQuery{
		config: c.config,
	}
}

// Get returns a Banner entity by its id.
func (c *BannerClient) Get(ctx context.Context, id int64) (*Banner, error) {
	return c.Query().Where(banner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannerClient) GetX(ctx context.Context, id int64) *Banner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBannerItem queries the banner_item edge of a Banner.
func (c *BannerClient) QueryBannerItem(b *Banner) *BannerItemQuery {
	query := &BannerItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(banner.Table, banner.FieldID, id),
			sqlgraph.To(banneritem.Table, banneritem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, banner.BannerItemTable, banner.BannerItemColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BannerClient) Hooks() []Hook {
	return c.hooks.Banner
}

// BannerItemClient is a client for the BannerItem schema.
type BannerItemClient struct {
	config
}

// NewBannerItemClient returns a client for the BannerItem from the given config.
func NewBannerItemClient(c config) *BannerItemClient {
	return &BannerItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banneritem.Hooks(f(g(h())))`.
func (c *BannerItemClient) Use(hooks ...Hook) {
	c.hooks.BannerItem = append(c.hooks.BannerItem, hooks...)
}

// Create returns a create builder for BannerItem.
func (c *BannerItemClient) Create() *BannerItemCreate {
	mutation := newBannerItemMutation(c.config, OpCreate)
	return &BannerItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BannerItem entities.
func (c *BannerItemClient) CreateBulk(builders ...*BannerItemCreate) *BannerItemCreateBulk {
	return &BannerItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BannerItem.
func (c *BannerItemClient) Update() *BannerItemUpdate {
	mutation := newBannerItemMutation(c.config, OpUpdate)
	return &BannerItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannerItemClient) UpdateOne(bi *BannerItem) *BannerItemUpdateOne {
	mutation := newBannerItemMutation(c.config, OpUpdateOne, withBannerItem(bi))
	return &BannerItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannerItemClient) UpdateOneID(id int64) *BannerItemUpdateOne {
	mutation := newBannerItemMutation(c.config, OpUpdateOne, withBannerItemID(id))
	return &BannerItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BannerItem.
func (c *BannerItemClient) Delete() *BannerItemDelete {
	mutation := newBannerItemMutation(c.config, OpDelete)
	return &BannerItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BannerItemClient) DeleteOne(bi *BannerItem) *BannerItemDeleteOne {
	return c.DeleteOneID(bi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BannerItemClient) DeleteOneID(id int64) *BannerItemDeleteOne {
	builder := c.Delete().Where(banneritem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannerItemDeleteOne{builder}
}

// Query returns a query builder for BannerItem.
func (c *BannerItemClient) Query() *BannerItemQuery {
	return &BannerItemQuery{
		config: c.config,
	}
}

// Get returns a BannerItem entity by its id.
func (c *BannerItemClient) Get(ctx context.Context, id int64) (*BannerItem, error) {
	return c.Query().Where(banneritem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannerItemClient) GetX(ctx context.Context, id int64) *BannerItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBanner queries the banner edge of a BannerItem.
func (c *BannerItemClient) QueryBanner(bi *BannerItem) *BannerQuery {
	query := &BannerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(banneritem.Table, banneritem.FieldID, id),
			sqlgraph.To(banner.Table, banner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, banneritem.BannerTable, banneritem.BannerColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BannerItemClient) Hooks() []Hook {
	return c.hooks.BannerItem
}

// BrandClient is a client for the Brand schema.
type BrandClient struct {
	config
}

// NewBrandClient returns a client for the Brand from the given config.
func NewBrandClient(c config) *BrandClient {
	return &BrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `brand.Hooks(f(g(h())))`.
func (c *BrandClient) Use(hooks ...Hook) {
	c.hooks.Brand = append(c.hooks.Brand, hooks...)
}

// Create returns a create builder for Brand.
func (c *BrandClient) Create() *BrandCreate {
	mutation := newBrandMutation(c.config, OpCreate)
	return &BrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Brand entities.
func (c *BrandClient) CreateBulk(builders ...*BrandCreate) *BrandCreateBulk {
	return &BrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Brand.
func (c *BrandClient) Update() *BrandUpdate {
	mutation := newBrandMutation(c.config, OpUpdate)
	return &BrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BrandClient) UpdateOne(b *Brand) *BrandUpdateOne {
	mutation := newBrandMutation(c.config, OpUpdateOne, withBrand(b))
	return &BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BrandClient) UpdateOneID(id int64) *BrandUpdateOne {
	mutation := newBrandMutation(c.config, OpUpdateOne, withBrandID(id))
	return &BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Brand.
func (c *BrandClient) Delete() *BrandDelete {
	mutation := newBrandMutation(c.config, OpDelete)
	return &BrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BrandClient) DeleteOne(b *Brand) *BrandDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BrandClient) DeleteOneID(id int64) *BrandDeleteOne {
	builder := c.Delete().Where(brand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BrandDeleteOne{builder}
}

// Query returns a query builder for Brand.
func (c *BrandClient) Query() *BrandQuery {
	return &BrandQuery{
		config: c.config,
	}
}

// Get returns a Brand entity by its id.
func (c *BrandClient) Get(ctx context.Context, id int64) (*Brand, error) {
	return c.Query().Where(brand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BrandClient) GetX(ctx context.Context, id int64) *Brand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a Brand.
func (c *BrandClient) QuerySpu(b *Brand) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(brand.Table, brand.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, brand.SpuTable, brand.SpuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BrandClient) Hooks() []Hook {
	return c.hooks.Brand
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int64) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int64) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int64) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int64) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoupon queries the coupon edge of a Category.
func (c *CategoryClient) QueryCoupon(ca *Category) *CouponQuery {
	query := &CouponQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, category.CouponTable, category.CouponPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Category.
func (c *CategoryClient) QueryParent(ca *Category) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, category.ParentTable, category.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Category.
func (c *CategoryClient) QueryChildren(ca *Category) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.ChildrenTable, category.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// ChargeClient is a client for the Charge schema.
type ChargeClient struct {
	config
}

// NewChargeClient returns a client for the Charge from the given config.
func NewChargeClient(c config) *ChargeClient {
	return &ChargeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `charge.Hooks(f(g(h())))`.
func (c *ChargeClient) Use(hooks ...Hook) {
	c.hooks.Charge = append(c.hooks.Charge, hooks...)
}

// Create returns a create builder for Charge.
func (c *ChargeClient) Create() *ChargeCreate {
	mutation := newChargeMutation(c.config, OpCreate)
	return &ChargeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Charge entities.
func (c *ChargeClient) CreateBulk(builders ...*ChargeCreate) *ChargeCreateBulk {
	return &ChargeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Charge.
func (c *ChargeClient) Update() *ChargeUpdate {
	mutation := newChargeMutation(c.config, OpUpdate)
	return &ChargeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChargeClient) UpdateOne(ch *Charge) *ChargeUpdateOne {
	mutation := newChargeMutation(c.config, OpUpdateOne, withCharge(ch))
	return &ChargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChargeClient) UpdateOneID(id int64) *ChargeUpdateOne {
	mutation := newChargeMutation(c.config, OpUpdateOne, withChargeID(id))
	return &ChargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Charge.
func (c *ChargeClient) Delete() *ChargeDelete {
	mutation := newChargeMutation(c.config, OpDelete)
	return &ChargeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChargeClient) DeleteOne(ch *Charge) *ChargeDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChargeClient) DeleteOneID(id int64) *ChargeDeleteOne {
	builder := c.Delete().Where(charge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChargeDeleteOne{builder}
}

// Query returns a query builder for Charge.
func (c *ChargeClient) Query() *ChargeQuery {
	return &ChargeQuery{
		config: c.config,
	}
}

// Get returns a Charge entity by its id.
func (c *ChargeClient) Get(ctx context.Context, id int64) (*Charge, error) {
	return c.Query().Where(charge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChargeClient) GetX(ctx context.Context, id int64) *Charge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChargeClient) Hooks() []Hook {
	return c.hooks.Charge
}

// CouponClient is a client for the Coupon schema.
type CouponClient struct {
	config
}

// NewCouponClient returns a client for the Coupon from the given config.
func NewCouponClient(c config) *CouponClient {
	return &CouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupon.Hooks(f(g(h())))`.
func (c *CouponClient) Use(hooks ...Hook) {
	c.hooks.Coupon = append(c.hooks.Coupon, hooks...)
}

// Create returns a create builder for Coupon.
func (c *CouponClient) Create() *CouponCreate {
	mutation := newCouponMutation(c.config, OpCreate)
	return &CouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coupon entities.
func (c *CouponClient) CreateBulk(builders ...*CouponCreate) *CouponCreateBulk {
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coupon.
func (c *CouponClient) Update() *CouponUpdate {
	mutation := newCouponMutation(c.config, OpUpdate)
	return &CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponClient) UpdateOne(co *Coupon) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(co))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponClient) UpdateOneID(id int64) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCouponID(id))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coupon.
func (c *CouponClient) Delete() *CouponDelete {
	mutation := newCouponMutation(c.config, OpDelete)
	return &CouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CouponClient) DeleteOne(co *Coupon) *CouponDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CouponClient) DeleteOneID(id int64) *CouponDeleteOne {
	builder := c.Delete().Where(coupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDeleteOne{builder}
}

// Query returns a query builder for Coupon.
func (c *CouponClient) Query() *CouponQuery {
	return &CouponQuery{
		config: c.config,
	}
}

// Get returns a Coupon entity by its id.
func (c *CouponClient) Get(ctx context.Context, id int64) (*Coupon, error) {
	return c.Query().Where(coupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponClient) GetX(ctx context.Context, id int64) *Coupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategory queries the category edge of a Coupon.
func (c *CouponClient) QueryCategory(co *Coupon) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, coupon.CategoryTable, coupon.CategoryPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivity queries the activity edge of a Coupon.
func (c *CouponClient) QueryActivity(co *Coupon) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, coupon.ActivityTable, coupon.ActivityPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponClient) Hooks() []Hook {
	return c.hooks.Coupon
}

// CouponTemplateClient is a client for the CouponTemplate schema.
type CouponTemplateClient struct {
	config
}

// NewCouponTemplateClient returns a client for the CouponTemplate from the given config.
func NewCouponTemplateClient(c config) *CouponTemplateClient {
	return &CouponTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupontemplate.Hooks(f(g(h())))`.
func (c *CouponTemplateClient) Use(hooks ...Hook) {
	c.hooks.CouponTemplate = append(c.hooks.CouponTemplate, hooks...)
}

// Create returns a create builder for CouponTemplate.
func (c *CouponTemplateClient) Create() *CouponTemplateCreate {
	mutation := newCouponTemplateMutation(c.config, OpCreate)
	return &CouponTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponTemplate entities.
func (c *CouponTemplateClient) CreateBulk(builders ...*CouponTemplateCreate) *CouponTemplateCreateBulk {
	return &CouponTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponTemplate.
func (c *CouponTemplateClient) Update() *CouponTemplateUpdate {
	mutation := newCouponTemplateMutation(c.config, OpUpdate)
	return &CouponTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponTemplateClient) UpdateOne(ct *CouponTemplate) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplate(ct))
	return &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponTemplateClient) UpdateOneID(id int64) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplateID(id))
	return &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponTemplate.
func (c *CouponTemplateClient) Delete() *CouponTemplateDelete {
	mutation := newCouponTemplateMutation(c.config, OpDelete)
	return &CouponTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CouponTemplateClient) DeleteOne(ct *CouponTemplate) *CouponTemplateDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CouponTemplateClient) DeleteOneID(id int64) *CouponTemplateDeleteOne {
	builder := c.Delete().Where(coupontemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponTemplateDeleteOne{builder}
}

// Query returns a query builder for CouponTemplate.
func (c *CouponTemplateClient) Query() *CouponTemplateQuery {
	return &CouponTemplateQuery{
		config: c.config,
	}
}

// Get returns a CouponTemplate entity by its id.
func (c *CouponTemplateClient) Get(ctx context.Context, id int64) (*CouponTemplate, error) {
	return c.Query().Where(coupontemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponTemplateClient) GetX(ctx context.Context, id int64) *CouponTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponTemplateClient) Hooks() []Hook {
	return c.hooks.CouponTemplate
}

// CouponTypeClient is a client for the CouponType schema.
type CouponTypeClient struct {
	config
}

// NewCouponTypeClient returns a client for the CouponType from the given config.
func NewCouponTypeClient(c config) *CouponTypeClient {
	return &CouponTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupontype.Hooks(f(g(h())))`.
func (c *CouponTypeClient) Use(hooks ...Hook) {
	c.hooks.CouponType = append(c.hooks.CouponType, hooks...)
}

// Create returns a create builder for CouponType.
func (c *CouponTypeClient) Create() *CouponTypeCreate {
	mutation := newCouponTypeMutation(c.config, OpCreate)
	return &CouponTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponType entities.
func (c *CouponTypeClient) CreateBulk(builders ...*CouponTypeCreate) *CouponTypeCreateBulk {
	return &CouponTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponType.
func (c *CouponTypeClient) Update() *CouponTypeUpdate {
	mutation := newCouponTypeMutation(c.config, OpUpdate)
	return &CouponTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponTypeClient) UpdateOne(ct *CouponType) *CouponTypeUpdateOne {
	mutation := newCouponTypeMutation(c.config, OpUpdateOne, withCouponType(ct))
	return &CouponTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponTypeClient) UpdateOneID(id int64) *CouponTypeUpdateOne {
	mutation := newCouponTypeMutation(c.config, OpUpdateOne, withCouponTypeID(id))
	return &CouponTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponType.
func (c *CouponTypeClient) Delete() *CouponTypeDelete {
	mutation := newCouponTypeMutation(c.config, OpDelete)
	return &CouponTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CouponTypeClient) DeleteOne(ct *CouponType) *CouponTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CouponTypeClient) DeleteOneID(id int64) *CouponTypeDeleteOne {
	builder := c.Delete().Where(coupontype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponTypeDeleteOne{builder}
}

// Query returns a query builder for CouponType.
func (c *CouponTypeClient) Query() *CouponTypeQuery {
	return &CouponTypeQuery{
		config: c.config,
	}
}

// Get returns a CouponType entity by its id.
func (c *CouponTypeClient) Get(ctx context.Context, id int64) (*CouponType, error) {
	return c.Query().Where(coupontype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponTypeClient) GetX(ctx context.Context, id int64) *CouponType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponTypeClient) Hooks() []Hook {
	return c.hooks.CouponType
}

// GridCategoryClient is a client for the GridCategory schema.
type GridCategoryClient struct {
	config
}

// NewGridCategoryClient returns a client for the GridCategory from the given config.
func NewGridCategoryClient(c config) *GridCategoryClient {
	return &GridCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gridcategory.Hooks(f(g(h())))`.
func (c *GridCategoryClient) Use(hooks ...Hook) {
	c.hooks.GridCategory = append(c.hooks.GridCategory, hooks...)
}

// Create returns a create builder for GridCategory.
func (c *GridCategoryClient) Create() *GridCategoryCreate {
	mutation := newGridCategoryMutation(c.config, OpCreate)
	return &GridCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GridCategory entities.
func (c *GridCategoryClient) CreateBulk(builders ...*GridCategoryCreate) *GridCategoryCreateBulk {
	return &GridCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GridCategory.
func (c *GridCategoryClient) Update() *GridCategoryUpdate {
	mutation := newGridCategoryMutation(c.config, OpUpdate)
	return &GridCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GridCategoryClient) UpdateOne(gc *GridCategory) *GridCategoryUpdateOne {
	mutation := newGridCategoryMutation(c.config, OpUpdateOne, withGridCategory(gc))
	return &GridCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GridCategoryClient) UpdateOneID(id int64) *GridCategoryUpdateOne {
	mutation := newGridCategoryMutation(c.config, OpUpdateOne, withGridCategoryID(id))
	return &GridCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GridCategory.
func (c *GridCategoryClient) Delete() *GridCategoryDelete {
	mutation := newGridCategoryMutation(c.config, OpDelete)
	return &GridCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GridCategoryClient) DeleteOne(gc *GridCategory) *GridCategoryDeleteOne {
	return c.DeleteOneID(gc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GridCategoryClient) DeleteOneID(id int64) *GridCategoryDeleteOne {
	builder := c.Delete().Where(gridcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GridCategoryDeleteOne{builder}
}

// Query returns a query builder for GridCategory.
func (c *GridCategoryClient) Query() *GridCategoryQuery {
	return &GridCategoryQuery{
		config: c.config,
	}
}

// Get returns a GridCategory entity by its id.
func (c *GridCategoryClient) Get(ctx context.Context, id int64) (*GridCategory, error) {
	return c.Query().Where(gridcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GridCategoryClient) GetX(ctx context.Context, id int64) *GridCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GridCategoryClient) Hooks() []Hook {
	return c.hooks.GridCategory
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a create builder for Order.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderClient) DeleteOneID(id int64) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int64) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int64) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Order.
func (c *OrderClient) QueryUser(o *Order) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.UserTable, order.UserColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderSnap queries the order_snap edge of a Order.
func (c *OrderClient) QueryOrderSnap(o *Order) *OrderSnapQuery {
	query := &OrderSnapQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ordersnap.Table, ordersnap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderSnapTable, order.OrderSnapColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderSub queries the order_sub edge of a Order.
func (c *OrderClient) QueryOrderSub(o *Order) *OrderSubQuery {
	query := &OrderSubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ordersub.Table, ordersub.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderSubTable, order.OrderSubColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// OrderDetailClient is a client for the OrderDetail schema.
type OrderDetailClient struct {
	config
}

// NewOrderDetailClient returns a client for the OrderDetail from the given config.
func NewOrderDetailClient(c config) *OrderDetailClient {
	return &OrderDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderdetail.Hooks(f(g(h())))`.
func (c *OrderDetailClient) Use(hooks ...Hook) {
	c.hooks.OrderDetail = append(c.hooks.OrderDetail, hooks...)
}

// Create returns a create builder for OrderDetail.
func (c *OrderDetailClient) Create() *OrderDetailCreate {
	mutation := newOrderDetailMutation(c.config, OpCreate)
	return &OrderDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderDetail entities.
func (c *OrderDetailClient) CreateBulk(builders ...*OrderDetailCreate) *OrderDetailCreateBulk {
	return &OrderDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderDetail.
func (c *OrderDetailClient) Update() *OrderDetailUpdate {
	mutation := newOrderDetailMutation(c.config, OpUpdate)
	return &OrderDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderDetailClient) UpdateOne(od *OrderDetail) *OrderDetailUpdateOne {
	mutation := newOrderDetailMutation(c.config, OpUpdateOne, withOrderDetail(od))
	return &OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderDetailClient) UpdateOneID(id int64) *OrderDetailUpdateOne {
	mutation := newOrderDetailMutation(c.config, OpUpdateOne, withOrderDetailID(id))
	return &OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderDetail.
func (c *OrderDetailClient) Delete() *OrderDetailDelete {
	mutation := newOrderDetailMutation(c.config, OpDelete)
	return &OrderDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderDetailClient) DeleteOne(od *OrderDetail) *OrderDetailDeleteOne {
	return c.DeleteOneID(od.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderDetailClient) DeleteOneID(id int64) *OrderDetailDeleteOne {
	builder := c.Delete().Where(orderdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDetailDeleteOne{builder}
}

// Query returns a query builder for OrderDetail.
func (c *OrderDetailClient) Query() *OrderDetailQuery {
	return &OrderDetailQuery{
		config: c.config,
	}
}

// Get returns a OrderDetail entity by its id.
func (c *OrderDetailClient) Get(ctx context.Context, id int64) (*OrderDetail, error) {
	return c.Query().Where(orderdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderDetailClient) GetX(ctx context.Context, id int64) *OrderDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderDetailClient) Hooks() []Hook {
	return c.hooks.OrderDetail
}

// OrderSnapClient is a client for the OrderSnap schema.
type OrderSnapClient struct {
	config
}

// NewOrderSnapClient returns a client for the OrderSnap from the given config.
func NewOrderSnapClient(c config) *OrderSnapClient {
	return &OrderSnapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordersnap.Hooks(f(g(h())))`.
func (c *OrderSnapClient) Use(hooks ...Hook) {
	c.hooks.OrderSnap = append(c.hooks.OrderSnap, hooks...)
}

// Create returns a create builder for OrderSnap.
func (c *OrderSnapClient) Create() *OrderSnapCreate {
	mutation := newOrderSnapMutation(c.config, OpCreate)
	return &OrderSnapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderSnap entities.
func (c *OrderSnapClient) CreateBulk(builders ...*OrderSnapCreate) *OrderSnapCreateBulk {
	return &OrderSnapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderSnap.
func (c *OrderSnapClient) Update() *OrderSnapUpdate {
	mutation := newOrderSnapMutation(c.config, OpUpdate)
	return &OrderSnapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderSnapClient) UpdateOne(os *OrderSnap) *OrderSnapUpdateOne {
	mutation := newOrderSnapMutation(c.config, OpUpdateOne, withOrderSnap(os))
	return &OrderSnapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderSnapClient) UpdateOneID(id int64) *OrderSnapUpdateOne {
	mutation := newOrderSnapMutation(c.config, OpUpdateOne, withOrderSnapID(id))
	return &OrderSnapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderSnap.
func (c *OrderSnapClient) Delete() *OrderSnapDelete {
	mutation := newOrderSnapMutation(c.config, OpDelete)
	return &OrderSnapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderSnapClient) DeleteOne(os *OrderSnap) *OrderSnapDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderSnapClient) DeleteOneID(id int64) *OrderSnapDeleteOne {
	builder := c.Delete().Where(ordersnap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderSnapDeleteOne{builder}
}

// Query returns a query builder for OrderSnap.
func (c *OrderSnapClient) Query() *OrderSnapQuery {
	return &OrderSnapQuery{
		config: c.config,
	}
}

// Get returns a OrderSnap entity by its id.
func (c *OrderSnapClient) Get(ctx context.Context, id int64) (*OrderSnap, error) {
	return c.Query().Where(ordersnap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderSnapClient) GetX(ctx context.Context, id int64) *OrderSnap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderSnap.
func (c *OrderSnapClient) QueryOrder(os *OrderSnap) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordersnap.Table, ordersnap.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordersnap.OrderTable, ordersnap.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderSnapClient) Hooks() []Hook {
	return c.hooks.OrderSnap
}

// OrderSubClient is a client for the OrderSub schema.
type OrderSubClient struct {
	config
}

// NewOrderSubClient returns a client for the OrderSub from the given config.
func NewOrderSubClient(c config) *OrderSubClient {
	return &OrderSubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordersub.Hooks(f(g(h())))`.
func (c *OrderSubClient) Use(hooks ...Hook) {
	c.hooks.OrderSub = append(c.hooks.OrderSub, hooks...)
}

// Create returns a create builder for OrderSub.
func (c *OrderSubClient) Create() *OrderSubCreate {
	mutation := newOrderSubMutation(c.config, OpCreate)
	return &OrderSubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderSub entities.
func (c *OrderSubClient) CreateBulk(builders ...*OrderSubCreate) *OrderSubCreateBulk {
	return &OrderSubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderSub.
func (c *OrderSubClient) Update() *OrderSubUpdate {
	mutation := newOrderSubMutation(c.config, OpUpdate)
	return &OrderSubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderSubClient) UpdateOne(os *OrderSub) *OrderSubUpdateOne {
	mutation := newOrderSubMutation(c.config, OpUpdateOne, withOrderSub(os))
	return &OrderSubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderSubClient) UpdateOneID(id int64) *OrderSubUpdateOne {
	mutation := newOrderSubMutation(c.config, OpUpdateOne, withOrderSubID(id))
	return &OrderSubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderSub.
func (c *OrderSubClient) Delete() *OrderSubDelete {
	mutation := newOrderSubMutation(c.config, OpDelete)
	return &OrderSubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderSubClient) DeleteOne(os *OrderSub) *OrderSubDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderSubClient) DeleteOneID(id int64) *OrderSubDeleteOne {
	builder := c.Delete().Where(ordersub.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderSubDeleteOne{builder}
}

// Query returns a query builder for OrderSub.
func (c *OrderSubClient) Query() *OrderSubQuery {
	return &OrderSubQuery{
		config: c.config,
	}
}

// Get returns a OrderSub entity by its id.
func (c *OrderSubClient) Get(ctx context.Context, id int64) (*OrderSub, error) {
	return c.Query().Where(ordersub.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderSubClient) GetX(ctx context.Context, id int64) *OrderSub {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderSub.
func (c *OrderSubClient) QueryOrder(os *OrderSub) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordersub.Table, ordersub.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordersub.OrderTable, ordersub.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderSubClient) Hooks() []Hook {
	return c.hooks.OrderSub
}

// RefundClient is a client for the Refund schema.
type RefundClient struct {
	config
}

// NewRefundClient returns a client for the Refund from the given config.
func NewRefundClient(c config) *RefundClient {
	return &RefundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `refund.Hooks(f(g(h())))`.
func (c *RefundClient) Use(hooks ...Hook) {
	c.hooks.Refund = append(c.hooks.Refund, hooks...)
}

// Create returns a create builder for Refund.
func (c *RefundClient) Create() *RefundCreate {
	mutation := newRefundMutation(c.config, OpCreate)
	return &RefundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Refund entities.
func (c *RefundClient) CreateBulk(builders ...*RefundCreate) *RefundCreateBulk {
	return &RefundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Refund.
func (c *RefundClient) Update() *RefundUpdate {
	mutation := newRefundMutation(c.config, OpUpdate)
	return &RefundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RefundClient) UpdateOne(r *Refund) *RefundUpdateOne {
	mutation := newRefundMutation(c.config, OpUpdateOne, withRefund(r))
	return &RefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RefundClient) UpdateOneID(id int64) *RefundUpdateOne {
	mutation := newRefundMutation(c.config, OpUpdateOne, withRefundID(id))
	return &RefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Refund.
func (c *RefundClient) Delete() *RefundDelete {
	mutation := newRefundMutation(c.config, OpDelete)
	return &RefundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RefundClient) DeleteOne(r *Refund) *RefundDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RefundClient) DeleteOneID(id int64) *RefundDeleteOne {
	builder := c.Delete().Where(refund.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RefundDeleteOne{builder}
}

// Query returns a query builder for Refund.
func (c *RefundClient) Query() *RefundQuery {
	return &RefundQuery{
		config: c.config,
	}
}

// Get returns a Refund entity by its id.
func (c *RefundClient) Get(ctx context.Context, id int64) (*Refund, error) {
	return c.Query().Where(refund.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RefundClient) GetX(ctx context.Context, id int64) *Refund {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Refund.
func (c *RefundClient) QueryUser(r *Refund) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(refund.Table, refund.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, refund.UserTable, refund.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RefundClient) Hooks() []Hook {
	return c.hooks.Refund
}

// SaleExplainClient is a client for the SaleExplain schema.
type SaleExplainClient struct {
	config
}

// NewSaleExplainClient returns a client for the SaleExplain from the given config.
func NewSaleExplainClient(c config) *SaleExplainClient {
	return &SaleExplainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `saleexplain.Hooks(f(g(h())))`.
func (c *SaleExplainClient) Use(hooks ...Hook) {
	c.hooks.SaleExplain = append(c.hooks.SaleExplain, hooks...)
}

// Create returns a create builder for SaleExplain.
func (c *SaleExplainClient) Create() *SaleExplainCreate {
	mutation := newSaleExplainMutation(c.config, OpCreate)
	return &SaleExplainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SaleExplain entities.
func (c *SaleExplainClient) CreateBulk(builders ...*SaleExplainCreate) *SaleExplainCreateBulk {
	return &SaleExplainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SaleExplain.
func (c *SaleExplainClient) Update() *SaleExplainUpdate {
	mutation := newSaleExplainMutation(c.config, OpUpdate)
	return &SaleExplainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SaleExplainClient) UpdateOne(se *SaleExplain) *SaleExplainUpdateOne {
	mutation := newSaleExplainMutation(c.config, OpUpdateOne, withSaleExplain(se))
	return &SaleExplainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SaleExplainClient) UpdateOneID(id int64) *SaleExplainUpdateOne {
	mutation := newSaleExplainMutation(c.config, OpUpdateOne, withSaleExplainID(id))
	return &SaleExplainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SaleExplain.
func (c *SaleExplainClient) Delete() *SaleExplainDelete {
	mutation := newSaleExplainMutation(c.config, OpDelete)
	return &SaleExplainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SaleExplainClient) DeleteOne(se *SaleExplain) *SaleExplainDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SaleExplainClient) DeleteOneID(id int64) *SaleExplainDeleteOne {
	builder := c.Delete().Where(saleexplain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SaleExplainDeleteOne{builder}
}

// Query returns a query builder for SaleExplain.
func (c *SaleExplainClient) Query() *SaleExplainQuery {
	return &SaleExplainQuery{
		config: c.config,
	}
}

// Get returns a SaleExplain entity by its id.
func (c *SaleExplainClient) Get(ctx context.Context, id int64) (*SaleExplain, error) {
	return c.Query().Where(saleexplain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SaleExplainClient) GetX(ctx context.Context, id int64) *SaleExplain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a SaleExplain.
func (c *SaleExplainClient) QuerySpu(se *SaleExplain) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(saleexplain.Table, saleexplain.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, saleexplain.SpuTable, saleexplain.SpuColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SaleExplainClient) Hooks() []Hook {
	return c.hooks.SaleExplain
}

// SkuClient is a client for the Sku schema.
type SkuClient struct {
	config
}

// NewSkuClient returns a client for the Sku from the given config.
func NewSkuClient(c config) *SkuClient {
	return &SkuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sku.Hooks(f(g(h())))`.
func (c *SkuClient) Use(hooks ...Hook) {
	c.hooks.Sku = append(c.hooks.Sku, hooks...)
}

// Create returns a create builder for Sku.
func (c *SkuClient) Create() *SkuCreate {
	mutation := newSkuMutation(c.config, OpCreate)
	return &SkuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sku entities.
func (c *SkuClient) CreateBulk(builders ...*SkuCreate) *SkuCreateBulk {
	return &SkuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sku.
func (c *SkuClient) Update() *SkuUpdate {
	mutation := newSkuMutation(c.config, OpUpdate)
	return &SkuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkuClient) UpdateOne(s *Sku) *SkuUpdateOne {
	mutation := newSkuMutation(c.config, OpUpdateOne, withSku(s))
	return &SkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkuClient) UpdateOneID(id int64) *SkuUpdateOne {
	mutation := newSkuMutation(c.config, OpUpdateOne, withSkuID(id))
	return &SkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sku.
func (c *SkuClient) Delete() *SkuDelete {
	mutation := newSkuMutation(c.config, OpDelete)
	return &SkuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkuClient) DeleteOne(s *Sku) *SkuDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkuClient) DeleteOneID(id int64) *SkuDeleteOne {
	builder := c.Delete().Where(sku.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkuDeleteOne{builder}
}

// Query returns a query builder for Sku.
func (c *SkuClient) Query() *SkuQuery {
	return &SkuQuery{
		config: c.config,
	}
}

// Get returns a Sku entity by its id.
func (c *SkuClient) Get(ctx context.Context, id int64) (*Sku, error) {
	return c.Query().Where(sku.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkuClient) GetX(ctx context.Context, id int64) *Sku {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SkuClient) Hooks() []Hook {
	return c.hooks.Sku
}

// SkuSpecClient is a client for the SkuSpec schema.
type SkuSpecClient struct {
	config
}

// NewSkuSpecClient returns a client for the SkuSpec from the given config.
func NewSkuSpecClient(c config) *SkuSpecClient {
	return &SkuSpecClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skuspec.Hooks(f(g(h())))`.
func (c *SkuSpecClient) Use(hooks ...Hook) {
	c.hooks.SkuSpec = append(c.hooks.SkuSpec, hooks...)
}

// Create returns a create builder for SkuSpec.
func (c *SkuSpecClient) Create() *SkuSpecCreate {
	mutation := newSkuSpecMutation(c.config, OpCreate)
	return &SkuSpecCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkuSpec entities.
func (c *SkuSpecClient) CreateBulk(builders ...*SkuSpecCreate) *SkuSpecCreateBulk {
	return &SkuSpecCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkuSpec.
func (c *SkuSpecClient) Update() *SkuSpecUpdate {
	mutation := newSkuSpecMutation(c.config, OpUpdate)
	return &SkuSpecUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkuSpecClient) UpdateOne(ss *SkuSpec) *SkuSpecUpdateOne {
	mutation := newSkuSpecMutation(c.config, OpUpdateOne, withSkuSpec(ss))
	return &SkuSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkuSpecClient) UpdateOneID(id int64) *SkuSpecUpdateOne {
	mutation := newSkuSpecMutation(c.config, OpUpdateOne, withSkuSpecID(id))
	return &SkuSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkuSpec.
func (c *SkuSpecClient) Delete() *SkuSpecDelete {
	mutation := newSkuSpecMutation(c.config, OpDelete)
	return &SkuSpecDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkuSpecClient) DeleteOne(ss *SkuSpec) *SkuSpecDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkuSpecClient) DeleteOneID(id int64) *SkuSpecDeleteOne {
	builder := c.Delete().Where(skuspec.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkuSpecDeleteOne{builder}
}

// Query returns a query builder for SkuSpec.
func (c *SkuSpecClient) Query() *SkuSpecQuery {
	return &SkuSpecQuery{
		config: c.config,
	}
}

// Get returns a SkuSpec entity by its id.
func (c *SkuSpecClient) Get(ctx context.Context, id int64) (*SkuSpec, error) {
	return c.Query().Where(skuspec.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkuSpecClient) GetX(ctx context.Context, id int64) *SkuSpec {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SkuSpecClient) Hooks() []Hook {
	return c.hooks.SkuSpec
}

// SpecKeyClient is a client for the SpecKey schema.
type SpecKeyClient struct {
	config
}

// NewSpecKeyClient returns a client for the SpecKey from the given config.
func NewSpecKeyClient(c config) *SpecKeyClient {
	return &SpecKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `speckey.Hooks(f(g(h())))`.
func (c *SpecKeyClient) Use(hooks ...Hook) {
	c.hooks.SpecKey = append(c.hooks.SpecKey, hooks...)
}

// Create returns a create builder for SpecKey.
func (c *SpecKeyClient) Create() *SpecKeyCreate {
	mutation := newSpecKeyMutation(c.config, OpCreate)
	return &SpecKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpecKey entities.
func (c *SpecKeyClient) CreateBulk(builders ...*SpecKeyCreate) *SpecKeyCreateBulk {
	return &SpecKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpecKey.
func (c *SpecKeyClient) Update() *SpecKeyUpdate {
	mutation := newSpecKeyMutation(c.config, OpUpdate)
	return &SpecKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpecKeyClient) UpdateOne(sk *SpecKey) *SpecKeyUpdateOne {
	mutation := newSpecKeyMutation(c.config, OpUpdateOne, withSpecKey(sk))
	return &SpecKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpecKeyClient) UpdateOneID(id int64) *SpecKeyUpdateOne {
	mutation := newSpecKeyMutation(c.config, OpUpdateOne, withSpecKeyID(id))
	return &SpecKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpecKey.
func (c *SpecKeyClient) Delete() *SpecKeyDelete {
	mutation := newSpecKeyMutation(c.config, OpDelete)
	return &SpecKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpecKeyClient) DeleteOne(sk *SpecKey) *SpecKeyDeleteOne {
	return c.DeleteOneID(sk.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpecKeyClient) DeleteOneID(id int64) *SpecKeyDeleteOne {
	builder := c.Delete().Where(speckey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpecKeyDeleteOne{builder}
}

// Query returns a query builder for SpecKey.
func (c *SpecKeyClient) Query() *SpecKeyQuery {
	return &SpecKeyQuery{
		config: c.config,
	}
}

// Get returns a SpecKey entity by its id.
func (c *SpecKeyClient) Get(ctx context.Context, id int64) (*SpecKey, error) {
	return c.Query().Where(speckey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpecKeyClient) GetX(ctx context.Context, id int64) *SpecKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a SpecKey.
func (c *SpecKeyClient) QuerySpu(sk *SpecKey) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(speckey.Table, speckey.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, speckey.SpuTable, speckey.SpuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpecKeyClient) Hooks() []Hook {
	return c.hooks.SpecKey
}

// SpecValueClient is a client for the SpecValue schema.
type SpecValueClient struct {
	config
}

// NewSpecValueClient returns a client for the SpecValue from the given config.
func NewSpecValueClient(c config) *SpecValueClient {
	return &SpecValueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `specvalue.Hooks(f(g(h())))`.
func (c *SpecValueClient) Use(hooks ...Hook) {
	c.hooks.SpecValue = append(c.hooks.SpecValue, hooks...)
}

// Create returns a create builder for SpecValue.
func (c *SpecValueClient) Create() *SpecValueCreate {
	mutation := newSpecValueMutation(c.config, OpCreate)
	return &SpecValueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpecValue entities.
func (c *SpecValueClient) CreateBulk(builders ...*SpecValueCreate) *SpecValueCreateBulk {
	return &SpecValueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpecValue.
func (c *SpecValueClient) Update() *SpecValueUpdate {
	mutation := newSpecValueMutation(c.config, OpUpdate)
	return &SpecValueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpecValueClient) UpdateOne(sv *SpecValue) *SpecValueUpdateOne {
	mutation := newSpecValueMutation(c.config, OpUpdateOne, withSpecValue(sv))
	return &SpecValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpecValueClient) UpdateOneID(id int64) *SpecValueUpdateOne {
	mutation := newSpecValueMutation(c.config, OpUpdateOne, withSpecValueID(id))
	return &SpecValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpecValue.
func (c *SpecValueClient) Delete() *SpecValueDelete {
	mutation := newSpecValueMutation(c.config, OpDelete)
	return &SpecValueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpecValueClient) DeleteOne(sv *SpecValue) *SpecValueDeleteOne {
	return c.DeleteOneID(sv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpecValueClient) DeleteOneID(id int64) *SpecValueDeleteOne {
	builder := c.Delete().Where(specvalue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpecValueDeleteOne{builder}
}

// Query returns a query builder for SpecValue.
func (c *SpecValueClient) Query() *SpecValueQuery {
	return &SpecValueQuery{
		config: c.config,
	}
}

// Get returns a SpecValue entity by its id.
func (c *SpecValueClient) Get(ctx context.Context, id int64) (*SpecValue, error) {
	return c.Query().Where(specvalue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpecValueClient) GetX(ctx context.Context, id int64) *SpecValue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SpecValueClient) Hooks() []Hook {
	return c.hooks.SpecValue
}

// SpuClient is a client for the Spu schema.
type SpuClient struct {
	config
}

// NewSpuClient returns a client for the Spu from the given config.
func NewSpuClient(c config) *SpuClient {
	return &SpuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spu.Hooks(f(g(h())))`.
func (c *SpuClient) Use(hooks ...Hook) {
	c.hooks.Spu = append(c.hooks.Spu, hooks...)
}

// Create returns a create builder for Spu.
func (c *SpuClient) Create() *SpuCreate {
	mutation := newSpuMutation(c.config, OpCreate)
	return &SpuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Spu entities.
func (c *SpuClient) CreateBulk(builders ...*SpuCreate) *SpuCreateBulk {
	return &SpuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Spu.
func (c *SpuClient) Update() *SpuUpdate {
	mutation := newSpuMutation(c.config, OpUpdate)
	return &SpuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpuClient) UpdateOne(s *Spu) *SpuUpdateOne {
	mutation := newSpuMutation(c.config, OpUpdateOne, withSpu(s))
	return &SpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpuClient) UpdateOneID(id int64) *SpuUpdateOne {
	mutation := newSpuMutation(c.config, OpUpdateOne, withSpuID(id))
	return &SpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Spu.
func (c *SpuClient) Delete() *SpuDelete {
	mutation := newSpuMutation(c.config, OpDelete)
	return &SpuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpuClient) DeleteOne(s *Spu) *SpuDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpuClient) DeleteOneID(id int64) *SpuDeleteOne {
	builder := c.Delete().Where(spu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpuDeleteOne{builder}
}

// Query returns a query builder for Spu.
func (c *SpuClient) Query() *SpuQuery {
	return &SpuQuery{
		config: c.config,
	}
}

// Get returns a Spu entity by its id.
func (c *SpuClient) Get(ctx context.Context, id int64) (*Spu, error) {
	return c.Query().Where(spu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpuClient) GetX(ctx context.Context, id int64) *Spu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySaleExplain queries the sale_explain edge of a Spu.
func (c *SpuClient) QuerySaleExplain(s *Spu) *SaleExplainQuery {
	query := &SaleExplainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(saleexplain.Table, saleexplain.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, spu.SaleExplainTable, spu.SaleExplainColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpuImg queries the spu_img edge of a Spu.
func (c *SpuClient) QuerySpuImg(s *Spu) *SpuImgQuery {
	query := &SpuImgQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(spuimg.Table, spuimg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, spu.SpuImgTable, spu.SpuImgColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpuDetailImg queries the spu_detail_img edge of a Spu.
func (c *SpuClient) QuerySpuDetailImg(s *Spu) *SpuDetailImgQuery {
	query := &SpuDetailImgQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(spudetailimg.Table, spudetailimg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, spu.SpuDetailImgTable, spu.SpuDetailImgColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpecKey queries the spec_key edge of a Spu.
func (c *SpuClient) QuerySpecKey(s *Spu) *SpecKeyQuery {
	query := &SpecKeyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(speckey.Table, speckey.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, spu.SpecKeyTable, spu.SpecKeyPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a Spu.
func (c *SpuClient) QueryTag(s *Spu) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, spu.TagTable, spu.TagPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTheme queries the theme edge of a Spu.
func (c *SpuClient) QueryTheme(s *Spu) *ThemeQuery {
	query := &ThemeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(theme.Table, theme.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, spu.ThemeTable, spu.ThemePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivity queries the activity edge of a Spu.
func (c *SpuClient) QueryActivity(s *Spu) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, spu.ActivityTable, spu.ActivityPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Spu.
func (c *SpuClient) QueryBrand(s *Spu) *BrandQuery {
	query := &BrandQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(brand.Table, brand.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, spu.BrandTable, spu.BrandPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpuClient) Hooks() []Hook {
	return c.hooks.Spu
}

// SpuDetailImgClient is a client for the SpuDetailImg schema.
type SpuDetailImgClient struct {
	config
}

// NewSpuDetailImgClient returns a client for the SpuDetailImg from the given config.
func NewSpuDetailImgClient(c config) *SpuDetailImgClient {
	return &SpuDetailImgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spudetailimg.Hooks(f(g(h())))`.
func (c *SpuDetailImgClient) Use(hooks ...Hook) {
	c.hooks.SpuDetailImg = append(c.hooks.SpuDetailImg, hooks...)
}

// Create returns a create builder for SpuDetailImg.
func (c *SpuDetailImgClient) Create() *SpuDetailImgCreate {
	mutation := newSpuDetailImgMutation(c.config, OpCreate)
	return &SpuDetailImgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpuDetailImg entities.
func (c *SpuDetailImgClient) CreateBulk(builders ...*SpuDetailImgCreate) *SpuDetailImgCreateBulk {
	return &SpuDetailImgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpuDetailImg.
func (c *SpuDetailImgClient) Update() *SpuDetailImgUpdate {
	mutation := newSpuDetailImgMutation(c.config, OpUpdate)
	return &SpuDetailImgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpuDetailImgClient) UpdateOne(sdi *SpuDetailImg) *SpuDetailImgUpdateOne {
	mutation := newSpuDetailImgMutation(c.config, OpUpdateOne, withSpuDetailImg(sdi))
	return &SpuDetailImgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpuDetailImgClient) UpdateOneID(id int64) *SpuDetailImgUpdateOne {
	mutation := newSpuDetailImgMutation(c.config, OpUpdateOne, withSpuDetailImgID(id))
	return &SpuDetailImgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpuDetailImg.
func (c *SpuDetailImgClient) Delete() *SpuDetailImgDelete {
	mutation := newSpuDetailImgMutation(c.config, OpDelete)
	return &SpuDetailImgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpuDetailImgClient) DeleteOne(sdi *SpuDetailImg) *SpuDetailImgDeleteOne {
	return c.DeleteOneID(sdi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpuDetailImgClient) DeleteOneID(id int64) *SpuDetailImgDeleteOne {
	builder := c.Delete().Where(spudetailimg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpuDetailImgDeleteOne{builder}
}

// Query returns a query builder for SpuDetailImg.
func (c *SpuDetailImgClient) Query() *SpuDetailImgQuery {
	return &SpuDetailImgQuery{
		config: c.config,
	}
}

// Get returns a SpuDetailImg entity by its id.
func (c *SpuDetailImgClient) Get(ctx context.Context, id int64) (*SpuDetailImg, error) {
	return c.Query().Where(spudetailimg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpuDetailImgClient) GetX(ctx context.Context, id int64) *SpuDetailImg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a SpuDetailImg.
func (c *SpuDetailImgClient) QuerySpu(sdi *SpuDetailImg) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sdi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spudetailimg.Table, spudetailimg.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, spudetailimg.SpuTable, spudetailimg.SpuColumn),
		)
		fromV = sqlgraph.Neighbors(sdi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpuDetailImgClient) Hooks() []Hook {
	return c.hooks.SpuDetailImg
}

// SpuImgClient is a client for the SpuImg schema.
type SpuImgClient struct {
	config
}

// NewSpuImgClient returns a client for the SpuImg from the given config.
func NewSpuImgClient(c config) *SpuImgClient {
	return &SpuImgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spuimg.Hooks(f(g(h())))`.
func (c *SpuImgClient) Use(hooks ...Hook) {
	c.hooks.SpuImg = append(c.hooks.SpuImg, hooks...)
}

// Create returns a create builder for SpuImg.
func (c *SpuImgClient) Create() *SpuImgCreate {
	mutation := newSpuImgMutation(c.config, OpCreate)
	return &SpuImgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpuImg entities.
func (c *SpuImgClient) CreateBulk(builders ...*SpuImgCreate) *SpuImgCreateBulk {
	return &SpuImgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpuImg.
func (c *SpuImgClient) Update() *SpuImgUpdate {
	mutation := newSpuImgMutation(c.config, OpUpdate)
	return &SpuImgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpuImgClient) UpdateOne(si *SpuImg) *SpuImgUpdateOne {
	mutation := newSpuImgMutation(c.config, OpUpdateOne, withSpuImg(si))
	return &SpuImgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpuImgClient) UpdateOneID(id int64) *SpuImgUpdateOne {
	mutation := newSpuImgMutation(c.config, OpUpdateOne, withSpuImgID(id))
	return &SpuImgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpuImg.
func (c *SpuImgClient) Delete() *SpuImgDelete {
	mutation := newSpuImgMutation(c.config, OpDelete)
	return &SpuImgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpuImgClient) DeleteOne(si *SpuImg) *SpuImgDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpuImgClient) DeleteOneID(id int64) *SpuImgDeleteOne {
	builder := c.Delete().Where(spuimg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpuImgDeleteOne{builder}
}

// Query returns a query builder for SpuImg.
func (c *SpuImgClient) Query() *SpuImgQuery {
	return &SpuImgQuery{
		config: c.config,
	}
}

// Get returns a SpuImg entity by its id.
func (c *SpuImgClient) Get(ctx context.Context, id int64) (*SpuImg, error) {
	return c.Query().Where(spuimg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpuImgClient) GetX(ctx context.Context, id int64) *SpuImg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a SpuImg.
func (c *SpuImgClient) QuerySpu(si *SpuImg) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spuimg.Table, spuimg.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, spuimg.SpuTable, spuimg.SpuColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpuImgClient) Hooks() []Hook {
	return c.hooks.SpuImg
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int64) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int64) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int64) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int64) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a Tag.
func (c *TagClient) QuerySpu(t *Tag) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.SpuTable, tag.SpuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// ThemeClient is a client for the Theme schema.
type ThemeClient struct {
	config
}

// NewThemeClient returns a client for the Theme from the given config.
func NewThemeClient(c config) *ThemeClient {
	return &ThemeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `theme.Hooks(f(g(h())))`.
func (c *ThemeClient) Use(hooks ...Hook) {
	c.hooks.Theme = append(c.hooks.Theme, hooks...)
}

// Create returns a create builder for Theme.
func (c *ThemeClient) Create() *ThemeCreate {
	mutation := newThemeMutation(c.config, OpCreate)
	return &ThemeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Theme entities.
func (c *ThemeClient) CreateBulk(builders ...*ThemeCreate) *ThemeCreateBulk {
	return &ThemeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Theme.
func (c *ThemeClient) Update() *ThemeUpdate {
	mutation := newThemeMutation(c.config, OpUpdate)
	return &ThemeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThemeClient) UpdateOne(t *Theme) *ThemeUpdateOne {
	mutation := newThemeMutation(c.config, OpUpdateOne, withTheme(t))
	return &ThemeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThemeClient) UpdateOneID(id int64) *ThemeUpdateOne {
	mutation := newThemeMutation(c.config, OpUpdateOne, withThemeID(id))
	return &ThemeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Theme.
func (c *ThemeClient) Delete() *ThemeDelete {
	mutation := newThemeMutation(c.config, OpDelete)
	return &ThemeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ThemeClient) DeleteOne(t *Theme) *ThemeDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ThemeClient) DeleteOneID(id int64) *ThemeDeleteOne {
	builder := c.Delete().Where(theme.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThemeDeleteOne{builder}
}

// Query returns a query builder for Theme.
func (c *ThemeClient) Query() *ThemeQuery {
	return &ThemeQuery{
		config: c.config,
	}
}

// Get returns a Theme entity by its id.
func (c *ThemeClient) Get(ctx context.Context, id int64) (*Theme, error) {
	return c.Query().Where(theme.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThemeClient) GetX(ctx context.Context, id int64) *Theme {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a Theme.
func (c *ThemeClient) QuerySpu(t *Theme) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(theme.Table, theme.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, theme.SpuTable, theme.SpuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ThemeClient) Hooks() []Hook {
	return c.hooks.Theme
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a User.
func (c *UserClient) QueryOrder(u *User) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OrderTable, user.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRefund queries the refund edge of a User.
func (c *UserClient) QueryRefund(u *User) *RefundQuery {
	query := &RefundQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(refund.Table, refund.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RefundTable, user.RefundColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserCouponClient is a client for the UserCoupon schema.
type UserCouponClient struct {
	config
}

// NewUserCouponClient returns a client for the UserCoupon from the given config.
func NewUserCouponClient(c config) *UserCouponClient {
	return &UserCouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercoupon.Hooks(f(g(h())))`.
func (c *UserCouponClient) Use(hooks ...Hook) {
	c.hooks.UserCoupon = append(c.hooks.UserCoupon, hooks...)
}

// Create returns a create builder for UserCoupon.
func (c *UserCouponClient) Create() *UserCouponCreate {
	mutation := newUserCouponMutation(c.config, OpCreate)
	return &UserCouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCoupon entities.
func (c *UserCouponClient) CreateBulk(builders ...*UserCouponCreate) *UserCouponCreateBulk {
	return &UserCouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCoupon.
func (c *UserCouponClient) Update() *UserCouponUpdate {
	mutation := newUserCouponMutation(c.config, OpUpdate)
	return &UserCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCouponClient) UpdateOne(uc *UserCoupon) *UserCouponUpdateOne {
	mutation := newUserCouponMutation(c.config, OpUpdateOne, withUserCoupon(uc))
	return &UserCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCouponClient) UpdateOneID(id int64) *UserCouponUpdateOne {
	mutation := newUserCouponMutation(c.config, OpUpdateOne, withUserCouponID(id))
	return &UserCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCoupon.
func (c *UserCouponClient) Delete() *UserCouponDelete {
	mutation := newUserCouponMutation(c.config, OpDelete)
	return &UserCouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserCouponClient) DeleteOne(uc *UserCoupon) *UserCouponDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserCouponClient) DeleteOneID(id int64) *UserCouponDeleteOne {
	builder := c.Delete().Where(usercoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCouponDeleteOne{builder}
}

// Query returns a query builder for UserCoupon.
func (c *UserCouponClient) Query() *UserCouponQuery {
	return &UserCouponQuery{
		config: c.config,
	}
}

// Get returns a UserCoupon entity by its id.
func (c *UserCouponClient) Get(ctx context.Context, id int64) (*UserCoupon, error) {
	return c.Query().Where(usercoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCouponClient) GetX(ctx context.Context, id int64) *UserCoupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserCouponClient) Hooks() []Hook {
	return c.hooks.UserCoupon
}

// UserFavorClient is a client for the UserFavor schema.
type UserFavorClient struct {
	config
}

// NewUserFavorClient returns a client for the UserFavor from the given config.
func NewUserFavorClient(c config) *UserFavorClient {
	return &UserFavorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfavor.Hooks(f(g(h())))`.
func (c *UserFavorClient) Use(hooks ...Hook) {
	c.hooks.UserFavor = append(c.hooks.UserFavor, hooks...)
}

// Create returns a create builder for UserFavor.
func (c *UserFavorClient) Create() *UserFavorCreate {
	mutation := newUserFavorMutation(c.config, OpCreate)
	return &UserFavorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFavor entities.
func (c *UserFavorClient) CreateBulk(builders ...*UserFavorCreate) *UserFavorCreateBulk {
	return &UserFavorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFavor.
func (c *UserFavorClient) Update() *UserFavorUpdate {
	mutation := newUserFavorMutation(c.config, OpUpdate)
	return &UserFavorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFavorClient) UpdateOne(uf *UserFavor) *UserFavorUpdateOne {
	mutation := newUserFavorMutation(c.config, OpUpdateOne, withUserFavor(uf))
	return &UserFavorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFavorClient) UpdateOneID(id int64) *UserFavorUpdateOne {
	mutation := newUserFavorMutation(c.config, OpUpdateOne, withUserFavorID(id))
	return &UserFavorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFavor.
func (c *UserFavorClient) Delete() *UserFavorDelete {
	mutation := newUserFavorMutation(c.config, OpDelete)
	return &UserFavorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserFavorClient) DeleteOne(uf *UserFavor) *UserFavorDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserFavorClient) DeleteOneID(id int64) *UserFavorDeleteOne {
	builder := c.Delete().Where(userfavor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFavorDeleteOne{builder}
}

// Query returns a query builder for UserFavor.
func (c *UserFavorClient) Query() *UserFavorQuery {
	return &UserFavorQuery{
		config: c.config,
	}
}

// Get returns a UserFavor entity by its id.
func (c *UserFavorClient) Get(ctx context.Context, id int64) (*UserFavor, error) {
	return c.Query().Where(userfavor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFavorClient) GetX(ctx context.Context, id int64) *UserFavor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserFavorClient) Hooks() []Hook {
	return c.hooks.UserFavor
}

// UserInfoClient is a client for the UserInfo schema.
type UserInfoClient struct {
	config
}

// NewUserInfoClient returns a client for the UserInfo from the given config.
func NewUserInfoClient(c config) *UserInfoClient {
	return &UserInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userinfo.Hooks(f(g(h())))`.
func (c *UserInfoClient) Use(hooks ...Hook) {
	c.hooks.UserInfo = append(c.hooks.UserInfo, hooks...)
}

// Create returns a create builder for UserInfo.
func (c *UserInfoClient) Create() *UserInfoCreate {
	mutation := newUserInfoMutation(c.config, OpCreate)
	return &UserInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserInfo entities.
func (c *UserInfoClient) CreateBulk(builders ...*UserInfoCreate) *UserInfoCreateBulk {
	return &UserInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserInfo.
func (c *UserInfoClient) Update() *UserInfoUpdate {
	mutation := newUserInfoMutation(c.config, OpUpdate)
	return &UserInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserInfoClient) UpdateOne(ui *UserInfo) *UserInfoUpdateOne {
	mutation := newUserInfoMutation(c.config, OpUpdateOne, withUserInfo(ui))
	return &UserInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserInfoClient) UpdateOneID(id int64) *UserInfoUpdateOne {
	mutation := newUserInfoMutation(c.config, OpUpdateOne, withUserInfoID(id))
	return &UserInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserInfo.
func (c *UserInfoClient) Delete() *UserInfoDelete {
	mutation := newUserInfoMutation(c.config, OpDelete)
	return &UserInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserInfoClient) DeleteOne(ui *UserInfo) *UserInfoDeleteOne {
	return c.DeleteOneID(ui.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserInfoClient) DeleteOneID(id int64) *UserInfoDeleteOne {
	builder := c.Delete().Where(userinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserInfoDeleteOne{builder}
}

// Query returns a query builder for UserInfo.
func (c *UserInfoClient) Query() *UserInfoQuery {
	return &UserInfoQuery{
		config: c.config,
	}
}

// Get returns a UserInfo entity by its id.
func (c *UserInfoClient) Get(ctx context.Context, id int64) (*UserInfo, error) {
	return c.Query().Where(userinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserInfoClient) GetX(ctx context.Context, id int64) *UserInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserInfoClient) Hooks() []Hook {
	return c.hooks.UserInfo
}

// UserPointClient is a client for the UserPoint schema.
type UserPointClient struct {
	config
}

// NewUserPointClient returns a client for the UserPoint from the given config.
func NewUserPointClient(c config) *UserPointClient {
	return &UserPointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpoint.Hooks(f(g(h())))`.
func (c *UserPointClient) Use(hooks ...Hook) {
	c.hooks.UserPoint = append(c.hooks.UserPoint, hooks...)
}

// Create returns a create builder for UserPoint.
func (c *UserPointClient) Create() *UserPointCreate {
	mutation := newUserPointMutation(c.config, OpCreate)
	return &UserPointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPoint entities.
func (c *UserPointClient) CreateBulk(builders ...*UserPointCreate) *UserPointCreateBulk {
	return &UserPointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPoint.
func (c *UserPointClient) Update() *UserPointUpdate {
	mutation := newUserPointMutation(c.config, OpUpdate)
	return &UserPointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPointClient) UpdateOne(up *UserPoint) *UserPointUpdateOne {
	mutation := newUserPointMutation(c.config, OpUpdateOne, withUserPoint(up))
	return &UserPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPointClient) UpdateOneID(id int64) *UserPointUpdateOne {
	mutation := newUserPointMutation(c.config, OpUpdateOne, withUserPointID(id))
	return &UserPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPoint.
func (c *UserPointClient) Delete() *UserPointDelete {
	mutation := newUserPointMutation(c.config, OpDelete)
	return &UserPointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserPointClient) DeleteOne(up *UserPoint) *UserPointDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserPointClient) DeleteOneID(id int64) *UserPointDeleteOne {
	builder := c.Delete().Where(userpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPointDeleteOne{builder}
}

// Query returns a query builder for UserPoint.
func (c *UserPointClient) Query() *UserPointQuery {
	return &UserPointQuery{
		config: c.config,
	}
}

// Get returns a UserPoint entity by its id.
func (c *UserPointClient) Get(ctx context.Context, id int64) (*UserPoint, error) {
	return c.Query().Where(userpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPointClient) GetX(ctx context.Context, id int64) *UserPoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserPointClient) Hooks() []Hook {
	return c.hooks.UserPoint
}

// UserPointDetailClient is a client for the UserPointDetail schema.
type UserPointDetailClient struct {
	config
}

// NewUserPointDetailClient returns a client for the UserPointDetail from the given config.
func NewUserPointDetailClient(c config) *UserPointDetailClient {
	return &UserPointDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpointdetail.Hooks(f(g(h())))`.
func (c *UserPointDetailClient) Use(hooks ...Hook) {
	c.hooks.UserPointDetail = append(c.hooks.UserPointDetail, hooks...)
}

// Create returns a create builder for UserPointDetail.
func (c *UserPointDetailClient) Create() *UserPointDetailCreate {
	mutation := newUserPointDetailMutation(c.config, OpCreate)
	return &UserPointDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPointDetail entities.
func (c *UserPointDetailClient) CreateBulk(builders ...*UserPointDetailCreate) *UserPointDetailCreateBulk {
	return &UserPointDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPointDetail.
func (c *UserPointDetailClient) Update() *UserPointDetailUpdate {
	mutation := newUserPointDetailMutation(c.config, OpUpdate)
	return &UserPointDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPointDetailClient) UpdateOne(upd *UserPointDetail) *UserPointDetailUpdateOne {
	mutation := newUserPointDetailMutation(c.config, OpUpdateOne, withUserPointDetail(upd))
	return &UserPointDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPointDetailClient) UpdateOneID(id int64) *UserPointDetailUpdateOne {
	mutation := newUserPointDetailMutation(c.config, OpUpdateOne, withUserPointDetailID(id))
	return &UserPointDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPointDetail.
func (c *UserPointDetailClient) Delete() *UserPointDetailDelete {
	mutation := newUserPointDetailMutation(c.config, OpDelete)
	return &UserPointDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserPointDetailClient) DeleteOne(upd *UserPointDetail) *UserPointDetailDeleteOne {
	return c.DeleteOneID(upd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserPointDetailClient) DeleteOneID(id int64) *UserPointDetailDeleteOne {
	builder := c.Delete().Where(userpointdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPointDetailDeleteOne{builder}
}

// Query returns a query builder for UserPointDetail.
func (c *UserPointDetailClient) Query() *UserPointDetailQuery {
	return &UserPointDetailQuery{
		config: c.config,
	}
}

// Get returns a UserPointDetail entity by its id.
func (c *UserPointDetailClient) Get(ctx context.Context, id int64) (*UserPointDetail, error) {
	return c.Query().Where(userpointdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPointDetailClient) GetX(ctx context.Context, id int64) *UserPointDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserPointDetailClient) Hooks() []Hook {
	return c.hooks.UserPointDetail
}

// UserWalletClient is a client for the UserWallet schema.
type UserWalletClient struct {
	config
}

// NewUserWalletClient returns a client for the UserWallet from the given config.
func NewUserWalletClient(c config) *UserWalletClient {
	return &UserWalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userwallet.Hooks(f(g(h())))`.
func (c *UserWalletClient) Use(hooks ...Hook) {
	c.hooks.UserWallet = append(c.hooks.UserWallet, hooks...)
}

// Create returns a create builder for UserWallet.
func (c *UserWalletClient) Create() *UserWalletCreate {
	mutation := newUserWalletMutation(c.config, OpCreate)
	return &UserWalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserWallet entities.
func (c *UserWalletClient) CreateBulk(builders ...*UserWalletCreate) *UserWalletCreateBulk {
	return &UserWalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserWallet.
func (c *UserWalletClient) Update() *UserWalletUpdate {
	mutation := newUserWalletMutation(c.config, OpUpdate)
	return &UserWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserWalletClient) UpdateOne(uw *UserWallet) *UserWalletUpdateOne {
	mutation := newUserWalletMutation(c.config, OpUpdateOne, withUserWallet(uw))
	return &UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserWalletClient) UpdateOneID(id int64) *UserWalletUpdateOne {
	mutation := newUserWalletMutation(c.config, OpUpdateOne, withUserWalletID(id))
	return &UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserWallet.
func (c *UserWalletClient) Delete() *UserWalletDelete {
	mutation := newUserWalletMutation(c.config, OpDelete)
	return &UserWalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserWalletClient) DeleteOne(uw *UserWallet) *UserWalletDeleteOne {
	return c.DeleteOneID(uw.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserWalletClient) DeleteOneID(id int64) *UserWalletDeleteOne {
	builder := c.Delete().Where(userwallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserWalletDeleteOne{builder}
}

// Query returns a query builder for UserWallet.
func (c *UserWalletClient) Query() *UserWalletQuery {
	return &UserWalletQuery{
		config: c.config,
	}
}

// Get returns a UserWallet entity by its id.
func (c *UserWalletClient) Get(ctx context.Context, id int64) (*UserWallet, error) {
	return c.Query().Where(userwallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserWalletClient) GetX(ctx context.Context, id int64) *UserWallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserWalletClient) Hooks() []Hook {
	return c.hooks.UserWallet
}

// UserWalletDetailClient is a client for the UserWalletDetail schema.
type UserWalletDetailClient struct {
	config
}

// NewUserWalletDetailClient returns a client for the UserWalletDetail from the given config.
func NewUserWalletDetailClient(c config) *UserWalletDetailClient {
	return &UserWalletDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userwalletdetail.Hooks(f(g(h())))`.
func (c *UserWalletDetailClient) Use(hooks ...Hook) {
	c.hooks.UserWalletDetail = append(c.hooks.UserWalletDetail, hooks...)
}

// Create returns a create builder for UserWalletDetail.
func (c *UserWalletDetailClient) Create() *UserWalletDetailCreate {
	mutation := newUserWalletDetailMutation(c.config, OpCreate)
	return &UserWalletDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserWalletDetail entities.
func (c *UserWalletDetailClient) CreateBulk(builders ...*UserWalletDetailCreate) *UserWalletDetailCreateBulk {
	return &UserWalletDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserWalletDetail.
func (c *UserWalletDetailClient) Update() *UserWalletDetailUpdate {
	mutation := newUserWalletDetailMutation(c.config, OpUpdate)
	return &UserWalletDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserWalletDetailClient) UpdateOne(uwd *UserWalletDetail) *UserWalletDetailUpdateOne {
	mutation := newUserWalletDetailMutation(c.config, OpUpdateOne, withUserWalletDetail(uwd))
	return &UserWalletDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserWalletDetailClient) UpdateOneID(id int64) *UserWalletDetailUpdateOne {
	mutation := newUserWalletDetailMutation(c.config, OpUpdateOne, withUserWalletDetailID(id))
	return &UserWalletDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserWalletDetail.
func (c *UserWalletDetailClient) Delete() *UserWalletDetailDelete {
	mutation := newUserWalletDetailMutation(c.config, OpDelete)
	return &UserWalletDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserWalletDetailClient) DeleteOne(uwd *UserWalletDetail) *UserWalletDetailDeleteOne {
	return c.DeleteOneID(uwd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserWalletDetailClient) DeleteOneID(id int64) *UserWalletDetailDeleteOne {
	builder := c.Delete().Where(userwalletdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserWalletDetailDeleteOne{builder}
}

// Query returns a query builder for UserWalletDetail.
func (c *UserWalletDetailClient) Query() *UserWalletDetailQuery {
	return &UserWalletDetailQuery{
		config: c.config,
	}
}

// Get returns a UserWalletDetail entity by its id.
func (c *UserWalletDetailClient) Get(ctx context.Context, id int64) (*UserWalletDetail, error) {
	return c.Query().Where(userwalletdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserWalletDetailClient) GetX(ctx context.Context, id int64) *UserWalletDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserWalletDetailClient) Hooks() []Hook {
	return c.hooks.UserWalletDetail
}
