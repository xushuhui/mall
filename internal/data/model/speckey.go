// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/internal/data/model/speckey"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SpecKey is the model entity for the SpecKey schema.
type SpecKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// Standard holds the value of the "standard" field.
	Standard int `json:"standard,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpecKeyQuery when eager-loading is set.
	Edges SpecKeyEdges `json:"edges"`
}

// SpecKeyEdges holds the relations/edges for other nodes in the graph.
type SpecKeyEdges struct {
	// Spu holds the value of the spu edge.
	Spu []*Spu `json:"spu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SpuOrErr returns the Spu value or an error if the edge
// was not loaded in eager-loading.
func (e SpecKeyEdges) SpuOrErr() ([]*Spu, error) {
	if e.loadedTypes[0] {
		return e.Spu, nil
	}
	return nil, &NotLoadedError{edge: "spu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpecKey) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case speckey.FieldID, speckey.FieldStandard:
			values[i] = new(sql.NullInt64)
		case speckey.FieldName, speckey.FieldUnit, speckey.FieldDescription:
			values[i] = new(sql.NullString)
		case speckey.FieldCreateTime, speckey.FieldUpdateTime, speckey.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SpecKey", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpecKey fields.
func (sk *SpecKey) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case speckey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sk.ID = int64(value.Int64)
		case speckey.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sk.CreateTime = value.Time
			}
		case speckey.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sk.UpdateTime = value.Time
			}
		case speckey.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				sk.DeleteTime = value.Time
			}
		case speckey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sk.Name = value.String
			}
		case speckey.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				sk.Unit = value.String
			}
		case speckey.FieldStandard:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field standard", values[i])
			} else if value.Valid {
				sk.Standard = int(value.Int64)
			}
		case speckey.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sk.Description = value.String
			}
		}
	}
	return nil
}

// QuerySpu queries the "spu" edge of the SpecKey entity.
func (sk *SpecKey) QuerySpu() *SpuQuery {
	return (&SpecKeyClient{config: sk.config}).QuerySpu(sk)
}

// Update returns a builder for updating this SpecKey.
// Note that you need to call SpecKey.Unwrap() before calling this method if this SpecKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (sk *SpecKey) Update() *SpecKeyUpdateOne {
	return (&SpecKeyClient{config: sk.config}).UpdateOne(sk)
}

// Unwrap unwraps the SpecKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sk *SpecKey) Unwrap() *SpecKey {
	tx, ok := sk.config.driver.(*txDriver)
	if !ok {
		panic("model: SpecKey is not a transactional entity")
	}
	sk.config.driver = tx.drv
	return sk
}

// String implements the fmt.Stringer.
func (sk *SpecKey) String() string {
	var builder strings.Builder
	builder.WriteString("SpecKey(")
	builder.WriteString(fmt.Sprintf("id=%v", sk.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sk.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sk.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(sk.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(sk.Name)
	builder.WriteString(", unit=")
	builder.WriteString(sk.Unit)
	builder.WriteString(", standard=")
	builder.WriteString(fmt.Sprintf("%v", sk.Standard))
	builder.WriteString(", description=")
	builder.WriteString(sk.Description)
	builder.WriteByte(')')
	return builder.String()
}

// SpecKeys is a parsable slice of SpecKey.
type SpecKeys []*SpecKey

func (sk SpecKeys) config(cfg config) {
	for _i := range sk {
		sk[_i].config = cfg
	}
}
