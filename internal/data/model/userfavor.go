// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/internal/data/model/userfavor"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserFavor is the model entity for the UserFavor schema.
type UserFavor struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// SpuID holds the value of the "spu_id" field.
	SpuID int64 `json:"spu_id,omitempty"`
	// Status holds the value of the "status" field.
	// 1收藏 0取消收藏
	Status int `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserFavor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userfavor.FieldID, userfavor.FieldUserID, userfavor.FieldSpuID, userfavor.FieldStatus:
			values[i] = new(sql.NullInt64)
		case userfavor.FieldCreateTime, userfavor.FieldUpdateTime, userfavor.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserFavor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserFavor fields.
func (uf *UserFavor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userfavor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uf.ID = int64(value.Int64)
		case userfavor.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				uf.CreateTime = value.Time
			}
		case userfavor.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				uf.UpdateTime = value.Time
			}
		case userfavor.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				uf.DeleteTime = value.Time
			}
		case userfavor.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uf.UserID = value.Int64
			}
		case userfavor.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				uf.SpuID = value.Int64
			}
		case userfavor.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				uf.Status = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserFavor.
// Note that you need to call UserFavor.Unwrap() before calling this method if this UserFavor
// was returned from a transaction, and the transaction was committed or rolled back.
func (uf *UserFavor) Update() *UserFavorUpdateOne {
	return (&UserFavorClient{config: uf.config}).UpdateOne(uf)
}

// Unwrap unwraps the UserFavor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uf *UserFavor) Unwrap() *UserFavor {
	tx, ok := uf.config.driver.(*txDriver)
	if !ok {
		panic("model: UserFavor is not a transactional entity")
	}
	uf.config.driver = tx.drv
	return uf
}

// String implements the fmt.Stringer.
func (uf *UserFavor) String() string {
	var builder strings.Builder
	builder.WriteString("UserFavor(")
	builder.WriteString(fmt.Sprintf("id=%v", uf.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(uf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(uf.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(uf.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", uf.UserID))
	builder.WriteString(", spu_id=")
	builder.WriteString(fmt.Sprintf("%v", uf.SpuID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", uf.Status))
	builder.WriteByte(')')
	return builder.String()
}

// UserFavors is a parsable slice of UserFavor.
type UserFavors []*UserFavor

func (uf UserFavors) config(cfg config) {
	for _i := range uf {
		uf[_i].config = cfg
	}
}
