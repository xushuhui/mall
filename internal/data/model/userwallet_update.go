// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/internal/data/model/predicate"
	"mall-go/internal/data/model/userwallet"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserWalletUpdate is the builder for updating UserWallet entities.
type UserWalletUpdate struct {
	config
	hooks    []Hook
	mutation *UserWalletMutation
}

// Where appends a list predicates to the UserWalletUpdate builder.
func (uwu *UserWalletUpdate) Where(ps ...predicate.UserWallet) *UserWalletUpdate {
	uwu.mutation.Where(ps...)
	return uwu
}

// SetUpdateTime sets the "update_time" field.
func (uwu *UserWalletUpdate) SetUpdateTime(t time.Time) *UserWalletUpdate {
	uwu.mutation.SetUpdateTime(t)
	return uwu
}

// SetDeleteTime sets the "delete_time" field.
func (uwu *UserWalletUpdate) SetDeleteTime(t time.Time) *UserWalletUpdate {
	uwu.mutation.SetDeleteTime(t)
	return uwu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uwu *UserWalletUpdate) SetNillableDeleteTime(t *time.Time) *UserWalletUpdate {
	if t != nil {
		uwu.SetDeleteTime(*t)
	}
	return uwu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (uwu *UserWalletUpdate) ClearDeleteTime() *UserWalletUpdate {
	uwu.mutation.ClearDeleteTime()
	return uwu
}

// SetValue sets the "value" field.
func (uwu *UserWalletUpdate) SetValue(i int) *UserWalletUpdate {
	uwu.mutation.ResetValue()
	uwu.mutation.SetValue(i)
	return uwu
}

// AddValue adds i to the "value" field.
func (uwu *UserWalletUpdate) AddValue(i int) *UserWalletUpdate {
	uwu.mutation.AddValue(i)
	return uwu
}

// Mutation returns the UserWalletMutation object of the builder.
func (uwu *UserWalletUpdate) Mutation() *UserWalletMutation {
	return uwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uwu *UserWalletUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uwu.defaults()
	if len(uwu.hooks) == 0 {
		affected, err = uwu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uwu.mutation = mutation
			affected, err = uwu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uwu.hooks) - 1; i >= 0; i-- {
			if uwu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = uwu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uwu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uwu *UserWalletUpdate) SaveX(ctx context.Context) int {
	affected, err := uwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uwu *UserWalletUpdate) Exec(ctx context.Context) error {
	_, err := uwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwu *UserWalletUpdate) ExecX(ctx context.Context) {
	if err := uwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwu *UserWalletUpdate) defaults() {
	if _, ok := uwu.mutation.UpdateTime(); !ok {
		v := userwallet.UpdateDefaultUpdateTime()
		uwu.mutation.SetUpdateTime(v)
	}
}

func (uwu *UserWalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userwallet.Table,
			Columns: userwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userwallet.FieldID,
			},
		},
	}
	if ps := uwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldUpdateTime,
		})
	}
	if value, ok := uwu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldDeleteTime,
		})
	}
	if uwu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldDeleteTime,
		})
	}
	if value, ok := uwu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldValue,
		})
	}
	if value, ok := uwu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldValue,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserWalletUpdateOne is the builder for updating a single UserWallet entity.
type UserWalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserWalletMutation
}

// SetUpdateTime sets the "update_time" field.
func (uwuo *UserWalletUpdateOne) SetUpdateTime(t time.Time) *UserWalletUpdateOne {
	uwuo.mutation.SetUpdateTime(t)
	return uwuo
}

// SetDeleteTime sets the "delete_time" field.
func (uwuo *UserWalletUpdateOne) SetDeleteTime(t time.Time) *UserWalletUpdateOne {
	uwuo.mutation.SetDeleteTime(t)
	return uwuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uwuo *UserWalletUpdateOne) SetNillableDeleteTime(t *time.Time) *UserWalletUpdateOne {
	if t != nil {
		uwuo.SetDeleteTime(*t)
	}
	return uwuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (uwuo *UserWalletUpdateOne) ClearDeleteTime() *UserWalletUpdateOne {
	uwuo.mutation.ClearDeleteTime()
	return uwuo
}

// SetValue sets the "value" field.
func (uwuo *UserWalletUpdateOne) SetValue(i int) *UserWalletUpdateOne {
	uwuo.mutation.ResetValue()
	uwuo.mutation.SetValue(i)
	return uwuo
}

// AddValue adds i to the "value" field.
func (uwuo *UserWalletUpdateOne) AddValue(i int) *UserWalletUpdateOne {
	uwuo.mutation.AddValue(i)
	return uwuo
}

// Mutation returns the UserWalletMutation object of the builder.
func (uwuo *UserWalletUpdateOne) Mutation() *UserWalletMutation {
	return uwuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uwuo *UserWalletUpdateOne) Select(field string, fields ...string) *UserWalletUpdateOne {
	uwuo.fields = append([]string{field}, fields...)
	return uwuo
}

// Save executes the query and returns the updated UserWallet entity.
func (uwuo *UserWalletUpdateOne) Save(ctx context.Context) (*UserWallet, error) {
	var (
		err  error
		node *UserWallet
	)
	uwuo.defaults()
	if len(uwuo.hooks) == 0 {
		node, err = uwuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uwuo.mutation = mutation
			node, err = uwuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uwuo.hooks) - 1; i >= 0; i-- {
			if uwuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = uwuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uwuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uwuo *UserWalletUpdateOne) SaveX(ctx context.Context) *UserWallet {
	node, err := uwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uwuo *UserWalletUpdateOne) Exec(ctx context.Context) error {
	_, err := uwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwuo *UserWalletUpdateOne) ExecX(ctx context.Context) {
	if err := uwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwuo *UserWalletUpdateOne) defaults() {
	if _, ok := uwuo.mutation.UpdateTime(); !ok {
		v := userwallet.UpdateDefaultUpdateTime()
		uwuo.mutation.SetUpdateTime(v)
	}
}

func (uwuo *UserWalletUpdateOne) sqlSave(ctx context.Context) (_node *UserWallet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userwallet.Table,
			Columns: userwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userwallet.FieldID,
			},
		},
	}
	id, ok := uwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserWallet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userwallet.FieldID)
		for _, f := range fields {
			if !userwallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != userwallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldUpdateTime,
		})
	}
	if value, ok := uwuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldDeleteTime,
		})
	}
	if uwuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldDeleteTime,
		})
	}
	if value, ok := uwuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldValue,
		})
	}
	if value, ok := uwuo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldValue,
		})
	}
	_node = &UserWallet{config: uwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
