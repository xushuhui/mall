// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/internal/data/model/theme"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Theme is the model entity for the Theme schema.
type Theme struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// TplName holds the value of the "tpl_name" field.
	TplName string `json:"tpl_name,omitempty"`
	// EntranceImg holds the value of the "entrance_img" field.
	EntranceImg string `json:"entrance_img,omitempty"`
	// Extend holds the value of the "extend" field.
	Extend string `json:"extend,omitempty"`
	// InternalTopImg holds the value of the "internal_top_img" field.
	InternalTopImg string `json:"internal_top_img,omitempty"`
	// TitleImg holds the value of the "title_img" field.
	TitleImg string `json:"title_img,omitempty"`
	// Online holds the value of the "online" field.
	Online int8 `json:"online,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThemeQuery when eager-loading is set.
	Edges ThemeEdges `json:"edges"`
}

// ThemeEdges holds the relations/edges for other nodes in the graph.
type ThemeEdges struct {
	// Spu holds the value of the spu edge.
	Spu []*Spu `json:"spu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SpuOrErr returns the Spu value or an error if the edge
// was not loaded in eager-loading.
func (e ThemeEdges) SpuOrErr() ([]*Spu, error) {
	if e.loadedTypes[0] {
		return e.Spu, nil
	}
	return nil, &NotLoadedError{edge: "spu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Theme) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case theme.FieldID, theme.FieldOnline:
			values[i] = new(sql.NullInt64)
		case theme.FieldTitle, theme.FieldDescription, theme.FieldName, theme.FieldTplName, theme.FieldEntranceImg, theme.FieldExtend, theme.FieldInternalTopImg, theme.FieldTitleImg:
			values[i] = new(sql.NullString)
		case theme.FieldCreateTime, theme.FieldUpdateTime, theme.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Theme", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Theme fields.
func (t *Theme) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case theme.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case theme.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case theme.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case theme.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				t.DeleteTime = value.Time
			}
		case theme.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case theme.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case theme.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case theme.FieldTplName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tpl_name", values[i])
			} else if value.Valid {
				t.TplName = value.String
			}
		case theme.FieldEntranceImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entrance_img", values[i])
			} else if value.Valid {
				t.EntranceImg = value.String
			}
		case theme.FieldExtend:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extend", values[i])
			} else if value.Valid {
				t.Extend = value.String
			}
		case theme.FieldInternalTopImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_top_img", values[i])
			} else if value.Valid {
				t.InternalTopImg = value.String
			}
		case theme.FieldTitleImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title_img", values[i])
			} else if value.Valid {
				t.TitleImg = value.String
			}
		case theme.FieldOnline:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field online", values[i])
			} else if value.Valid {
				t.Online = int8(value.Int64)
			}
		}
	}
	return nil
}

// QuerySpu queries the "spu" edge of the Theme entity.
func (t *Theme) QuerySpu() *SpuQuery {
	return (&ThemeClient{config: t.config}).QuerySpu(t)
}

// Update returns a builder for updating this Theme.
// Note that you need to call Theme.Unwrap() before calling this method if this Theme
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Theme) Update() *ThemeUpdateOne {
	return (&ThemeClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Theme entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Theme) Unwrap() *Theme {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("model: Theme is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Theme) String() string {
	var builder strings.Builder
	builder.WriteString("Theme(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(t.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(t.Title)
	builder.WriteString(", description=")
	builder.WriteString(t.Description)
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", tpl_name=")
	builder.WriteString(t.TplName)
	builder.WriteString(", entrance_img=")
	builder.WriteString(t.EntranceImg)
	builder.WriteString(", extend=")
	builder.WriteString(t.Extend)
	builder.WriteString(", internal_top_img=")
	builder.WriteString(t.InternalTopImg)
	builder.WriteString(", title_img=")
	builder.WriteString(t.TitleImg)
	builder.WriteString(", online=")
	builder.WriteString(fmt.Sprintf("%v", t.Online))
	builder.WriteByte(')')
	return builder.String()
}

// Themes is a parsable slice of Theme.
type Themes []*Theme

func (t Themes) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
