// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/internal/data/model/predicate"
	"mall-go/internal/data/model/userpointdetail"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPointDetailUpdate is the builder for updating UserPointDetail entities.
type UserPointDetailUpdate struct {
	config
	hooks    []Hook
	mutation *UserPointDetailMutation
}

// Where appends a list predicates to the UserPointDetailUpdate builder.
func (updu *UserPointDetailUpdate) Where(ps ...predicate.UserPointDetail) *UserPointDetailUpdate {
	updu.mutation.Where(ps...)
	return updu
}

// SetUpdateTime sets the "update_time" field.
func (updu *UserPointDetailUpdate) SetUpdateTime(t time.Time) *UserPointDetailUpdate {
	updu.mutation.SetUpdateTime(t)
	return updu
}

// SetDeleteTime sets the "delete_time" field.
func (updu *UserPointDetailUpdate) SetDeleteTime(t time.Time) *UserPointDetailUpdate {
	updu.mutation.SetDeleteTime(t)
	return updu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (updu *UserPointDetailUpdate) SetNillableDeleteTime(t *time.Time) *UserPointDetailUpdate {
	if t != nil {
		updu.SetDeleteTime(*t)
	}
	return updu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (updu *UserPointDetailUpdate) ClearDeleteTime() *UserPointDetailUpdate {
	updu.mutation.ClearDeleteTime()
	return updu
}

// SetUserID sets the "user_id" field.
func (updu *UserPointDetailUpdate) SetUserID(i int64) *UserPointDetailUpdate {
	updu.mutation.ResetUserID()
	updu.mutation.SetUserID(i)
	return updu
}

// AddUserID adds i to the "user_id" field.
func (updu *UserPointDetailUpdate) AddUserID(i int64) *UserPointDetailUpdate {
	updu.mutation.AddUserID(i)
	return updu
}

// SetValue sets the "value" field.
func (updu *UserPointDetailUpdate) SetValue(i int) *UserPointDetailUpdate {
	updu.mutation.ResetValue()
	updu.mutation.SetValue(i)
	return updu
}

// AddValue adds i to the "value" field.
func (updu *UserPointDetailUpdate) AddValue(i int) *UserPointDetailUpdate {
	updu.mutation.AddValue(i)
	return updu
}

// Mutation returns the UserPointDetailMutation object of the builder.
func (updu *UserPointDetailUpdate) Mutation() *UserPointDetailMutation {
	return updu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (updu *UserPointDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	updu.defaults()
	if len(updu.hooks) == 0 {
		affected, err = updu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPointDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			updu.mutation = mutation
			affected, err = updu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(updu.hooks) - 1; i >= 0; i-- {
			if updu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = updu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, updu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (updu *UserPointDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := updu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (updu *UserPointDetailUpdate) Exec(ctx context.Context) error {
	_, err := updu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (updu *UserPointDetailUpdate) ExecX(ctx context.Context) {
	if err := updu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (updu *UserPointDetailUpdate) defaults() {
	if _, ok := updu.mutation.UpdateTime(); !ok {
		v := userpointdetail.UpdateDefaultUpdateTime()
		updu.mutation.SetUpdateTime(v)
	}
}

func (updu *UserPointDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpointdetail.Table,
			Columns: userpointdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userpointdetail.FieldID,
			},
		},
	}
	if ps := updu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := updu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpointdetail.FieldUpdateTime,
		})
	}
	if value, ok := updu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpointdetail.FieldDeleteTime,
		})
	}
	if updu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userpointdetail.FieldDeleteTime,
		})
	}
	if value, ok := updu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userpointdetail.FieldUserID,
		})
	}
	if value, ok := updu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userpointdetail.FieldUserID,
		})
	}
	if value, ok := updu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpointdetail.FieldValue,
		})
	}
	if value, ok := updu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpointdetail.FieldValue,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, updu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpointdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserPointDetailUpdateOne is the builder for updating a single UserPointDetail entity.
type UserPointDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPointDetailMutation
}

// SetUpdateTime sets the "update_time" field.
func (upduo *UserPointDetailUpdateOne) SetUpdateTime(t time.Time) *UserPointDetailUpdateOne {
	upduo.mutation.SetUpdateTime(t)
	return upduo
}

// SetDeleteTime sets the "delete_time" field.
func (upduo *UserPointDetailUpdateOne) SetDeleteTime(t time.Time) *UserPointDetailUpdateOne {
	upduo.mutation.SetDeleteTime(t)
	return upduo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (upduo *UserPointDetailUpdateOne) SetNillableDeleteTime(t *time.Time) *UserPointDetailUpdateOne {
	if t != nil {
		upduo.SetDeleteTime(*t)
	}
	return upduo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (upduo *UserPointDetailUpdateOne) ClearDeleteTime() *UserPointDetailUpdateOne {
	upduo.mutation.ClearDeleteTime()
	return upduo
}

// SetUserID sets the "user_id" field.
func (upduo *UserPointDetailUpdateOne) SetUserID(i int64) *UserPointDetailUpdateOne {
	upduo.mutation.ResetUserID()
	upduo.mutation.SetUserID(i)
	return upduo
}

// AddUserID adds i to the "user_id" field.
func (upduo *UserPointDetailUpdateOne) AddUserID(i int64) *UserPointDetailUpdateOne {
	upduo.mutation.AddUserID(i)
	return upduo
}

// SetValue sets the "value" field.
func (upduo *UserPointDetailUpdateOne) SetValue(i int) *UserPointDetailUpdateOne {
	upduo.mutation.ResetValue()
	upduo.mutation.SetValue(i)
	return upduo
}

// AddValue adds i to the "value" field.
func (upduo *UserPointDetailUpdateOne) AddValue(i int) *UserPointDetailUpdateOne {
	upduo.mutation.AddValue(i)
	return upduo
}

// Mutation returns the UserPointDetailMutation object of the builder.
func (upduo *UserPointDetailUpdateOne) Mutation() *UserPointDetailMutation {
	return upduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upduo *UserPointDetailUpdateOne) Select(field string, fields ...string) *UserPointDetailUpdateOne {
	upduo.fields = append([]string{field}, fields...)
	return upduo
}

// Save executes the query and returns the updated UserPointDetail entity.
func (upduo *UserPointDetailUpdateOne) Save(ctx context.Context) (*UserPointDetail, error) {
	var (
		err  error
		node *UserPointDetail
	)
	upduo.defaults()
	if len(upduo.hooks) == 0 {
		node, err = upduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPointDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			upduo.mutation = mutation
			node, err = upduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upduo.hooks) - 1; i >= 0; i-- {
			if upduo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = upduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (upduo *UserPointDetailUpdateOne) SaveX(ctx context.Context) *UserPointDetail {
	node, err := upduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upduo *UserPointDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := upduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upduo *UserPointDetailUpdateOne) ExecX(ctx context.Context) {
	if err := upduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upduo *UserPointDetailUpdateOne) defaults() {
	if _, ok := upduo.mutation.UpdateTime(); !ok {
		v := userpointdetail.UpdateDefaultUpdateTime()
		upduo.mutation.SetUpdateTime(v)
	}
}

func (upduo *UserPointDetailUpdateOne) sqlSave(ctx context.Context) (_node *UserPointDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpointdetail.Table,
			Columns: userpointdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userpointdetail.FieldID,
			},
		},
	}
	id, ok := upduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserPointDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := upduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpointdetail.FieldID)
		for _, f := range fields {
			if !userpointdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != userpointdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpointdetail.FieldUpdateTime,
		})
	}
	if value, ok := upduo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpointdetail.FieldDeleteTime,
		})
	}
	if upduo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userpointdetail.FieldDeleteTime,
		})
	}
	if value, ok := upduo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userpointdetail.FieldUserID,
		})
	}
	if value, ok := upduo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userpointdetail.FieldUserID,
		})
	}
	if value, ok := upduo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpointdetail.FieldValue,
		})
	}
	if value, ok := upduo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpointdetail.FieldValue,
		})
	}
	_node = &UserPointDetail{config: upduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpointdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
