// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/internal/data/model/saleexplain"
	"mall-go/internal/data/model/spu"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SaleExplain is the model entity for the SaleExplain schema.
type SaleExplain struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Fixed holds the value of the "fixed" field.
	Fixed int8 `json:"fixed,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// SpuID holds the value of the "spu_id" field.
	SpuID int64 `json:"spu_id,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// ReplaceID holds the value of the "replace_id" field.
	ReplaceID int64 `json:"replace_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SaleExplainQuery when eager-loading is set.
	Edges SaleExplainEdges `json:"edges"`
}

// SaleExplainEdges holds the relations/edges for other nodes in the graph.
type SaleExplainEdges struct {
	// Spu holds the value of the spu edge.
	Spu *Spu `json:"spu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SpuOrErr returns the Spu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SaleExplainEdges) SpuOrErr() (*Spu, error) {
	if e.loadedTypes[0] {
		if e.Spu == nil {
			// The edge spu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: spu.Label}
		}
		return e.Spu, nil
	}
	return nil, &NotLoadedError{edge: "spu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SaleExplain) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case saleexplain.FieldID, saleexplain.FieldFixed, saleexplain.FieldSpuID, saleexplain.FieldIndex, saleexplain.FieldReplaceID:
			values[i] = new(sql.NullInt64)
		case saleexplain.FieldText:
			values[i] = new(sql.NullString)
		case saleexplain.FieldCreateTime, saleexplain.FieldUpdateTime, saleexplain.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SaleExplain", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SaleExplain fields.
func (se *SaleExplain) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case saleexplain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			se.ID = int64(value.Int64)
		case saleexplain.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				se.CreateTime = value.Time
			}
		case saleexplain.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				se.UpdateTime = value.Time
			}
		case saleexplain.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				se.DeleteTime = value.Time
			}
		case saleexplain.FieldFixed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fixed", values[i])
			} else if value.Valid {
				se.Fixed = int8(value.Int64)
			}
		case saleexplain.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				se.Text = value.String
			}
		case saleexplain.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				se.SpuID = value.Int64
			}
		case saleexplain.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				se.Index = int(value.Int64)
			}
		case saleexplain.FieldReplaceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field replace_id", values[i])
			} else if value.Valid {
				se.ReplaceID = value.Int64
			}
		}
	}
	return nil
}

// QuerySpu queries the "spu" edge of the SaleExplain entity.
func (se *SaleExplain) QuerySpu() *SpuQuery {
	return (&SaleExplainClient{config: se.config}).QuerySpu(se)
}

// Update returns a builder for updating this SaleExplain.
// Note that you need to call SaleExplain.Unwrap() before calling this method if this SaleExplain
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SaleExplain) Update() *SaleExplainUpdateOne {
	return (&SaleExplainClient{config: se.config}).UpdateOne(se)
}

// Unwrap unwraps the SaleExplain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SaleExplain) Unwrap() *SaleExplain {
	tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("model: SaleExplain is not a transactional entity")
	}
	se.config.driver = tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SaleExplain) String() string {
	var builder strings.Builder
	builder.WriteString("SaleExplain(")
	builder.WriteString(fmt.Sprintf("id=%v", se.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(se.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(se.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(se.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", fixed=")
	builder.WriteString(fmt.Sprintf("%v", se.Fixed))
	builder.WriteString(", text=")
	builder.WriteString(se.Text)
	builder.WriteString(", spu_id=")
	builder.WriteString(fmt.Sprintf("%v", se.SpuID))
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", se.Index))
	builder.WriteString(", replace_id=")
	builder.WriteString(fmt.Sprintf("%v", se.ReplaceID))
	builder.WriteByte(')')
	return builder.String()
}

// SaleExplains is a parsable slice of SaleExplain.
type SaleExplains []*SaleExplain

func (se SaleExplains) config(cfg config) {
	for _i := range se {
		se[_i].config = cfg
	}
}
