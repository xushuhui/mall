// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/internal/data/model/banner"
	"mall-go/internal/data/model/banneritem"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerCreate is the builder for creating a Banner entity.
type BannerCreate struct {
	config
	mutation *BannerMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (bc *BannerCreate) SetCreateTime(t time.Time) *BannerCreate {
	bc.mutation.SetCreateTime(t)
	return bc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bc *BannerCreate) SetNillableCreateTime(t *time.Time) *BannerCreate {
	if t != nil {
		bc.SetCreateTime(*t)
	}
	return bc
}

// SetUpdateTime sets the "update_time" field.
func (bc *BannerCreate) SetUpdateTime(t time.Time) *BannerCreate {
	bc.mutation.SetUpdateTime(t)
	return bc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bc *BannerCreate) SetNillableUpdateTime(t *time.Time) *BannerCreate {
	if t != nil {
		bc.SetUpdateTime(*t)
	}
	return bc
}

// SetDeleteTime sets the "delete_time" field.
func (bc *BannerCreate) SetDeleteTime(t time.Time) *BannerCreate {
	bc.mutation.SetDeleteTime(t)
	return bc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (bc *BannerCreate) SetNillableDeleteTime(t *time.Time) *BannerCreate {
	if t != nil {
		bc.SetDeleteTime(*t)
	}
	return bc
}

// SetName sets the "name" field.
func (bc *BannerCreate) SetName(s string) *BannerCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetDescription sets the "description" field.
func (bc *BannerCreate) SetDescription(s string) *BannerCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// SetTitle sets the "title" field.
func (bc *BannerCreate) SetTitle(s string) *BannerCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetImg sets the "img" field.
func (bc *BannerCreate) SetImg(s string) *BannerCreate {
	bc.mutation.SetImg(s)
	return bc
}

// AddBannerItemIDs adds the "banner_item" edge to the BannerItem entity by IDs.
func (bc *BannerCreate) AddBannerItemIDs(ids ...int64) *BannerCreate {
	bc.mutation.AddBannerItemIDs(ids...)
	return bc
}

// AddBannerItem adds the "banner_item" edges to the BannerItem entity.
func (bc *BannerCreate) AddBannerItem(b ...*BannerItem) *BannerCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBannerItemIDs(ids...)
}

// Mutation returns the BannerMutation object of the builder.
func (bc *BannerCreate) Mutation() *BannerMutation {
	return bc.mutation
}

// Save creates the Banner in the database.
func (bc *BannerCreate) Save(ctx context.Context) (*Banner, error) {
	var (
		err  error
		node *Banner
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BannerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BannerCreate) SaveX(ctx context.Context) *Banner {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BannerCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BannerCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BannerCreate) defaults() {
	if _, ok := bc.mutation.CreateTime(); !ok {
		v := banner.DefaultCreateTime()
		bc.mutation.SetCreateTime(v)
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		v := banner.DefaultUpdateTime()
		bc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BannerCreate) check() error {
	if _, ok := bc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "create_time"`)}
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "update_time"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "name"`)}
	}
	if _, ok := bc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`model: missing required field "description"`)}
	}
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`model: missing required field "title"`)}
	}
	if _, ok := bc.mutation.Img(); !ok {
		return &ValidationError{Name: "img", err: errors.New(`model: missing required field "img"`)}
	}
	return nil
}

func (bc *BannerCreate) sqlSave(ctx context.Context) (*Banner, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (bc *BannerCreate) createSpec() (*Banner, *sqlgraph.CreateSpec) {
	var (
		_node = &Banner{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: banner.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: banner.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: banner.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := bc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: banner.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := bc.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: banner.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: banner.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: banner.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := bc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: banner.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := bc.mutation.Img(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: banner.FieldImg,
		})
		_node.Img = value
	}
	if nodes := bc.mutation.BannerItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   banner.BannerItemTable,
			Columns: []string{banner.BannerItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: banneritem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BannerCreateBulk is the builder for creating many Banner entities in bulk.
type BannerCreateBulk struct {
	config
	builders []*BannerCreate
}

// Save creates the Banner entities in the database.
func (bcb *BannerCreateBulk) Save(ctx context.Context) ([]*Banner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Banner, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BannerCreateBulk) SaveX(ctx context.Context) []*Banner {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BannerCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BannerCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
