// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/internal/data/model/userwalletdetail"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserWalletDetailCreate is the builder for creating a UserWalletDetail entity.
type UserWalletDetailCreate struct {
	config
	mutation *UserWalletDetailMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (uwdc *UserWalletDetailCreate) SetCreateTime(t time.Time) *UserWalletDetailCreate {
	uwdc.mutation.SetCreateTime(t)
	return uwdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uwdc *UserWalletDetailCreate) SetNillableCreateTime(t *time.Time) *UserWalletDetailCreate {
	if t != nil {
		uwdc.SetCreateTime(*t)
	}
	return uwdc
}

// SetUpdateTime sets the "update_time" field.
func (uwdc *UserWalletDetailCreate) SetUpdateTime(t time.Time) *UserWalletDetailCreate {
	uwdc.mutation.SetUpdateTime(t)
	return uwdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uwdc *UserWalletDetailCreate) SetNillableUpdateTime(t *time.Time) *UserWalletDetailCreate {
	if t != nil {
		uwdc.SetUpdateTime(*t)
	}
	return uwdc
}

// SetDeleteTime sets the "delete_time" field.
func (uwdc *UserWalletDetailCreate) SetDeleteTime(t time.Time) *UserWalletDetailCreate {
	uwdc.mutation.SetDeleteTime(t)
	return uwdc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uwdc *UserWalletDetailCreate) SetNillableDeleteTime(t *time.Time) *UserWalletDetailCreate {
	if t != nil {
		uwdc.SetDeleteTime(*t)
	}
	return uwdc
}

// SetDescription sets the "description" field.
func (uwdc *UserWalletDetailCreate) SetDescription(s string) *UserWalletDetailCreate {
	uwdc.mutation.SetDescription(s)
	return uwdc
}

// SetOp sets the "op" field.
func (uwdc *UserWalletDetailCreate) SetOp(i int8) *UserWalletDetailCreate {
	uwdc.mutation.SetOp(i)
	return uwdc
}

// SetNillableOp sets the "op" field if the given value is not nil.
func (uwdc *UserWalletDetailCreate) SetNillableOp(i *int8) *UserWalletDetailCreate {
	if i != nil {
		uwdc.SetOp(*i)
	}
	return uwdc
}

// SetCurrent sets the "current" field.
func (uwdc *UserWalletDetailCreate) SetCurrent(i int) *UserWalletDetailCreate {
	uwdc.mutation.SetCurrent(i)
	return uwdc
}

// SetValue sets the "value" field.
func (uwdc *UserWalletDetailCreate) SetValue(i int) *UserWalletDetailCreate {
	uwdc.mutation.SetValue(i)
	return uwdc
}

// SetType sets the "type" field.
func (uwdc *UserWalletDetailCreate) SetType(i int8) *UserWalletDetailCreate {
	uwdc.mutation.SetType(i)
	return uwdc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uwdc *UserWalletDetailCreate) SetNillableType(i *int8) *UserWalletDetailCreate {
	if i != nil {
		uwdc.SetType(*i)
	}
	return uwdc
}

// Mutation returns the UserWalletDetailMutation object of the builder.
func (uwdc *UserWalletDetailCreate) Mutation() *UserWalletDetailMutation {
	return uwdc.mutation
}

// Save creates the UserWalletDetail in the database.
func (uwdc *UserWalletDetailCreate) Save(ctx context.Context) (*UserWalletDetail, error) {
	var (
		err  error
		node *UserWalletDetail
	)
	uwdc.defaults()
	if len(uwdc.hooks) == 0 {
		if err = uwdc.check(); err != nil {
			return nil, err
		}
		node, err = uwdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserWalletDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uwdc.check(); err != nil {
				return nil, err
			}
			uwdc.mutation = mutation
			if node, err = uwdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uwdc.hooks) - 1; i >= 0; i-- {
			if uwdc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = uwdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uwdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uwdc *UserWalletDetailCreate) SaveX(ctx context.Context) *UserWalletDetail {
	v, err := uwdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwdc *UserWalletDetailCreate) Exec(ctx context.Context) error {
	_, err := uwdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwdc *UserWalletDetailCreate) ExecX(ctx context.Context) {
	if err := uwdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwdc *UserWalletDetailCreate) defaults() {
	if _, ok := uwdc.mutation.CreateTime(); !ok {
		v := userwalletdetail.DefaultCreateTime()
		uwdc.mutation.SetCreateTime(v)
	}
	if _, ok := uwdc.mutation.UpdateTime(); !ok {
		v := userwalletdetail.DefaultUpdateTime()
		uwdc.mutation.SetUpdateTime(v)
	}
	if _, ok := uwdc.mutation.GetOp(); !ok {
		v := userwalletdetail.DefaultOp
		uwdc.mutation.SetOp(v)
	}
	if _, ok := uwdc.mutation.GetType(); !ok {
		v := userwalletdetail.DefaultType
		uwdc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwdc *UserWalletDetailCreate) check() error {
	if _, ok := uwdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "create_time"`)}
	}
	if _, ok := uwdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "update_time"`)}
	}
	if _, ok := uwdc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`model: missing required field "description"`)}
	}
	if _, ok := uwdc.mutation.GetOp(); !ok {
		return &ValidationError{Name: "op", err: errors.New(`model: missing required field "op"`)}
	}
	if _, ok := uwdc.mutation.Current(); !ok {
		return &ValidationError{Name: "current", err: errors.New(`model: missing required field "current"`)}
	}
	if _, ok := uwdc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`model: missing required field "value"`)}
	}
	if _, ok := uwdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "type"`)}
	}
	return nil
}

func (uwdc *UserWalletDetailCreate) sqlSave(ctx context.Context) (*UserWalletDetail, error) {
	_node, _spec := uwdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uwdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (uwdc *UserWalletDetailCreate) createSpec() (*UserWalletDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &UserWalletDetail{config: uwdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userwalletdetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userwalletdetail.FieldID,
			},
		}
	)
	if value, ok := uwdc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwalletdetail.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := uwdc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwalletdetail.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := uwdc.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwalletdetail.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := uwdc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwalletdetail.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := uwdc.mutation.GetOp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: userwalletdetail.FieldOp,
		})
		_node.Op = value
	}
	if value, ok := uwdc.mutation.Current(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwalletdetail.FieldCurrent,
		})
		_node.Current = value
	}
	if value, ok := uwdc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwalletdetail.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := uwdc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: userwalletdetail.FieldType,
		})
		_node.Type = value
	}
	return _node, _spec
}

// UserWalletDetailCreateBulk is the builder for creating many UserWalletDetail entities in bulk.
type UserWalletDetailCreateBulk struct {
	config
	builders []*UserWalletDetailCreate
}

// Save creates the UserWalletDetail entities in the database.
func (uwdcb *UserWalletDetailCreateBulk) Save(ctx context.Context) ([]*UserWalletDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uwdcb.builders))
	nodes := make([]*UserWalletDetail, len(uwdcb.builders))
	mutators := make([]Mutator, len(uwdcb.builders))
	for i := range uwdcb.builders {
		func(i int, root context.Context) {
			builder := uwdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserWalletDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uwdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uwdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uwdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uwdcb *UserWalletDetailCreateBulk) SaveX(ctx context.Context) []*UserWalletDetail {
	v, err := uwdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwdcb *UserWalletDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := uwdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwdcb *UserWalletDetailCreateBulk) ExecX(ctx context.Context) {
	if err := uwdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
