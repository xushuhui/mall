// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/internal/data/model/activity"
	"mall-go/internal/data/model/brand"
	"mall-go/internal/data/model/saleexplain"
	"mall-go/internal/data/model/speckey"
	"mall-go/internal/data/model/spu"
	"mall-go/internal/data/model/spudetailimg"
	"mall-go/internal/data/model/spuimg"
	"mall-go/internal/data/model/tag"
	"mall-go/internal/data/model/theme"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpuCreate is the builder for creating a Spu entity.
type SpuCreate struct {
	config
	mutation *SpuMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *SpuCreate) SetCreateTime(t time.Time) *SpuCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SpuCreate) SetNillableCreateTime(t *time.Time) *SpuCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SpuCreate) SetUpdateTime(t time.Time) *SpuCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SpuCreate) SetNillableUpdateTime(t *time.Time) *SpuCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetDeleteTime sets the "delete_time" field.
func (sc *SpuCreate) SetDeleteTime(t time.Time) *SpuCreate {
	sc.mutation.SetDeleteTime(t)
	return sc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sc *SpuCreate) SetNillableDeleteTime(t *time.Time) *SpuCreate {
	if t != nil {
		sc.SetDeleteTime(*t)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *SpuCreate) SetTitle(s string) *SpuCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetSubtitle sets the "subtitle" field.
func (sc *SpuCreate) SetSubtitle(s string) *SpuCreate {
	sc.mutation.SetSubtitle(s)
	return sc
}

// SetCategoryID sets the "category_id" field.
func (sc *SpuCreate) SetCategoryID(i int64) *SpuCreate {
	sc.mutation.SetCategoryID(i)
	return sc
}

// SetRootCategoryID sets the "root_category_id" field.
func (sc *SpuCreate) SetRootCategoryID(i int64) *SpuCreate {
	sc.mutation.SetRootCategoryID(i)
	return sc
}

// SetOnline sets the "online" field.
func (sc *SpuCreate) SetOnline(i int8) *SpuCreate {
	sc.mutation.SetOnline(i)
	return sc
}

// SetPrice sets the "price" field.
func (sc *SpuCreate) SetPrice(s string) *SpuCreate {
	sc.mutation.SetPrice(s)
	return sc
}

// SetSketchSpecID sets the "sketch_spec_id" field.
func (sc *SpuCreate) SetSketchSpecID(i int) *SpuCreate {
	sc.mutation.SetSketchSpecID(i)
	return sc
}

// SetDefaultSkuID sets the "default_sku_id" field.
func (sc *SpuCreate) SetDefaultSkuID(i int) *SpuCreate {
	sc.mutation.SetDefaultSkuID(i)
	return sc
}

// SetImg sets the "img" field.
func (sc *SpuCreate) SetImg(s string) *SpuCreate {
	sc.mutation.SetImg(s)
	return sc
}

// SetDiscountPrice sets the "discount_price" field.
func (sc *SpuCreate) SetDiscountPrice(s string) *SpuCreate {
	sc.mutation.SetDiscountPrice(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SpuCreate) SetDescription(s string) *SpuCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetTags sets the "tags" field.
func (sc *SpuCreate) SetTags(s string) *SpuCreate {
	sc.mutation.SetTags(s)
	return sc
}

// SetSpuThemeImg sets the "spu_theme_img" field.
func (sc *SpuCreate) SetSpuThemeImg(s string) *SpuCreate {
	sc.mutation.SetSpuThemeImg(s)
	return sc
}

// SetForThemeImg sets the "for_theme_img" field.
func (sc *SpuCreate) SetForThemeImg(s string) *SpuCreate {
	sc.mutation.SetForThemeImg(s)
	return sc
}

// AddSaleExplainIDs adds the "sale_explain" edge to the SaleExplain entity by IDs.
func (sc *SpuCreate) AddSaleExplainIDs(ids ...int64) *SpuCreate {
	sc.mutation.AddSaleExplainIDs(ids...)
	return sc
}

// AddSaleExplain adds the "sale_explain" edges to the SaleExplain entity.
func (sc *SpuCreate) AddSaleExplain(s ...*SaleExplain) *SpuCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSaleExplainIDs(ids...)
}

// AddSpuImgIDs adds the "spu_img" edge to the SpuImg entity by IDs.
func (sc *SpuCreate) AddSpuImgIDs(ids ...int64) *SpuCreate {
	sc.mutation.AddSpuImgIDs(ids...)
	return sc
}

// AddSpuImg adds the "spu_img" edges to the SpuImg entity.
func (sc *SpuCreate) AddSpuImg(s ...*SpuImg) *SpuCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSpuImgIDs(ids...)
}

// AddSpuDetailImgIDs adds the "spu_detail_img" edge to the SpuDetailImg entity by IDs.
func (sc *SpuCreate) AddSpuDetailImgIDs(ids ...int64) *SpuCreate {
	sc.mutation.AddSpuDetailImgIDs(ids...)
	return sc
}

// AddSpuDetailImg adds the "spu_detail_img" edges to the SpuDetailImg entity.
func (sc *SpuCreate) AddSpuDetailImg(s ...*SpuDetailImg) *SpuCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSpuDetailImgIDs(ids...)
}

// AddSpecKeyIDs adds the "spec_key" edge to the SpecKey entity by IDs.
func (sc *SpuCreate) AddSpecKeyIDs(ids ...int64) *SpuCreate {
	sc.mutation.AddSpecKeyIDs(ids...)
	return sc
}

// AddSpecKey adds the "spec_key" edges to the SpecKey entity.
func (sc *SpuCreate) AddSpecKey(s ...*SpecKey) *SpuCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSpecKeyIDs(ids...)
}

// AddTagIDs adds the "tag" edge to the Tag entity by IDs.
func (sc *SpuCreate) AddTagIDs(ids ...int64) *SpuCreate {
	sc.mutation.AddTagIDs(ids...)
	return sc
}

// AddTag adds the "tag" edges to the Tag entity.
func (sc *SpuCreate) AddTag(t ...*Tag) *SpuCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTagIDs(ids...)
}

// AddThemeIDs adds the "theme" edge to the Theme entity by IDs.
func (sc *SpuCreate) AddThemeIDs(ids ...int64) *SpuCreate {
	sc.mutation.AddThemeIDs(ids...)
	return sc
}

// AddTheme adds the "theme" edges to the Theme entity.
func (sc *SpuCreate) AddTheme(t ...*Theme) *SpuCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddThemeIDs(ids...)
}

// AddActivityIDs adds the "activity" edge to the Activity entity by IDs.
func (sc *SpuCreate) AddActivityIDs(ids ...int64) *SpuCreate {
	sc.mutation.AddActivityIDs(ids...)
	return sc
}

// AddActivity adds the "activity" edges to the Activity entity.
func (sc *SpuCreate) AddActivity(a ...*Activity) *SpuCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddActivityIDs(ids...)
}

// AddBrandIDs adds the "brand" edge to the Brand entity by IDs.
func (sc *SpuCreate) AddBrandIDs(ids ...int64) *SpuCreate {
	sc.mutation.AddBrandIDs(ids...)
	return sc
}

// AddBrand adds the "brand" edges to the Brand entity.
func (sc *SpuCreate) AddBrand(b ...*Brand) *SpuCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sc.AddBrandIDs(ids...)
}

// Mutation returns the SpuMutation object of the builder.
func (sc *SpuCreate) Mutation() *SpuMutation {
	return sc.mutation
}

// Save creates the Spu in the database.
func (sc *SpuCreate) Save(ctx context.Context) (*Spu, error) {
	var (
		err  error
		node *Spu
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpuCreate) SaveX(ctx context.Context) *Spu {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SpuCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SpuCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SpuCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := spu.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := spu.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SpuCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "update_time"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`model: missing required field "title"`)}
	}
	if _, ok := sc.mutation.Subtitle(); !ok {
		return &ValidationError{Name: "subtitle", err: errors.New(`model: missing required field "subtitle"`)}
	}
	if _, ok := sc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`model: missing required field "category_id"`)}
	}
	if _, ok := sc.mutation.RootCategoryID(); !ok {
		return &ValidationError{Name: "root_category_id", err: errors.New(`model: missing required field "root_category_id"`)}
	}
	if _, ok := sc.mutation.Online(); !ok {
		return &ValidationError{Name: "online", err: errors.New(`model: missing required field "online"`)}
	}
	if _, ok := sc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`model: missing required field "price"`)}
	}
	if _, ok := sc.mutation.SketchSpecID(); !ok {
		return &ValidationError{Name: "sketch_spec_id", err: errors.New(`model: missing required field "sketch_spec_id"`)}
	}
	if _, ok := sc.mutation.DefaultSkuID(); !ok {
		return &ValidationError{Name: "default_sku_id", err: errors.New(`model: missing required field "default_sku_id"`)}
	}
	if _, ok := sc.mutation.Img(); !ok {
		return &ValidationError{Name: "img", err: errors.New(`model: missing required field "img"`)}
	}
	if _, ok := sc.mutation.DiscountPrice(); !ok {
		return &ValidationError{Name: "discount_price", err: errors.New(`model: missing required field "discount_price"`)}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`model: missing required field "description"`)}
	}
	if _, ok := sc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`model: missing required field "tags"`)}
	}
	if _, ok := sc.mutation.SpuThemeImg(); !ok {
		return &ValidationError{Name: "spu_theme_img", err: errors.New(`model: missing required field "spu_theme_img"`)}
	}
	if _, ok := sc.mutation.ForThemeImg(); !ok {
		return &ValidationError{Name: "for_theme_img", err: errors.New(`model: missing required field "for_theme_img"`)}
	}
	return nil
}

func (sc *SpuCreate) sqlSave(ctx context.Context) (*Spu, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (sc *SpuCreate) createSpec() (*Spu, *sqlgraph.CreateSpec) {
	var (
		_node = &Spu{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: spu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: spu.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spu.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spu.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spu.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := sc.mutation.Subtitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldSubtitle,
		})
		_node.Subtitle = value
	}
	if value, ok := sc.mutation.CategoryID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldCategoryID,
		})
		_node.CategoryID = value
	}
	if value, ok := sc.mutation.RootCategoryID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldRootCategoryID,
		})
		_node.RootCategoryID = value
	}
	if value, ok := sc.mutation.Online(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: spu.FieldOnline,
		})
		_node.Online = value
	}
	if value, ok := sc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := sc.mutation.SketchSpecID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldSketchSpecID,
		})
		_node.SketchSpecID = value
	}
	if value, ok := sc.mutation.DefaultSkuID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldDefaultSkuID,
		})
		_node.DefaultSkuID = value
	}
	if value, ok := sc.mutation.Img(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldImg,
		})
		_node.Img = value
	}
	if value, ok := sc.mutation.DiscountPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldDiscountPrice,
		})
		_node.DiscountPrice = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := sc.mutation.SpuThemeImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldSpuThemeImg,
		})
		_node.SpuThemeImg = value
	}
	if value, ok := sc.mutation.ForThemeImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldForThemeImg,
		})
		_node.ForThemeImg = value
	}
	if nodes := sc.mutation.SaleExplainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SaleExplainTable,
			Columns: []string{spu.SaleExplainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: saleexplain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SpuImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuImgTable,
			Columns: []string{spu.SpuImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spuimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SpuDetailImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuDetailImgTable,
			Columns: []string{spu.SpuDetailImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spudetailimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SpecKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.SpecKeyTable,
			Columns: spu.SpecKeyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: speckey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.TagTable,
			Columns: spu.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ThemeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spu.ThemeTable,
			Columns: spu.ThemePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spu.ActivityTable,
			Columns: spu.ActivityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spu.BrandTable,
			Columns: spu.BrandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: brand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SpuCreateBulk is the builder for creating many Spu entities in bulk.
type SpuCreateBulk struct {
	config
	builders []*SpuCreate
}

// Save creates the Spu entities in the database.
func (scb *SpuCreateBulk) Save(ctx context.Context) ([]*Spu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Spu, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SpuCreateBulk) SaveX(ctx context.Context) []*Spu {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SpuCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SpuCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
