// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/internal/data/model/predicate"
	"mall-go/internal/data/model/spu"
	"mall-go/internal/data/model/spuimg"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpuImgUpdate is the builder for updating SpuImg entities.
type SpuImgUpdate struct {
	config
	hooks    []Hook
	mutation *SpuImgMutation
}

// Where appends a list predicates to the SpuImgUpdate builder.
func (siu *SpuImgUpdate) Where(ps ...predicate.SpuImg) *SpuImgUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetUpdateTime sets the "update_time" field.
func (siu *SpuImgUpdate) SetUpdateTime(t time.Time) *SpuImgUpdate {
	siu.mutation.SetUpdateTime(t)
	return siu
}

// SetDeleteTime sets the "delete_time" field.
func (siu *SpuImgUpdate) SetDeleteTime(t time.Time) *SpuImgUpdate {
	siu.mutation.SetDeleteTime(t)
	return siu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (siu *SpuImgUpdate) SetNillableDeleteTime(t *time.Time) *SpuImgUpdate {
	if t != nil {
		siu.SetDeleteTime(*t)
	}
	return siu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (siu *SpuImgUpdate) ClearDeleteTime() *SpuImgUpdate {
	siu.mutation.ClearDeleteTime()
	return siu
}

// SetImg sets the "img" field.
func (siu *SpuImgUpdate) SetImg(s string) *SpuImgUpdate {
	siu.mutation.SetImg(s)
	return siu
}

// SetSpuID sets the "spu_id" field.
func (siu *SpuImgUpdate) SetSpuID(i int64) *SpuImgUpdate {
	siu.mutation.SetSpuID(i)
	return siu
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (siu *SpuImgUpdate) SetNillableSpuID(i *int64) *SpuImgUpdate {
	if i != nil {
		siu.SetSpuID(*i)
	}
	return siu
}

// ClearSpuID clears the value of the "spu_id" field.
func (siu *SpuImgUpdate) ClearSpuID() *SpuImgUpdate {
	siu.mutation.ClearSpuID()
	return siu
}

// SetSpu sets the "spu" edge to the Spu entity.
func (siu *SpuImgUpdate) SetSpu(s *Spu) *SpuImgUpdate {
	return siu.SetSpuID(s.ID)
}

// Mutation returns the SpuImgMutation object of the builder.
func (siu *SpuImgUpdate) Mutation() *SpuImgMutation {
	return siu.mutation
}

// ClearSpu clears the "spu" edge to the Spu entity.
func (siu *SpuImgUpdate) ClearSpu() *SpuImgUpdate {
	siu.mutation.ClearSpu()
	return siu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *SpuImgUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	siu.defaults()
	if len(siu.hooks) == 0 {
		affected, err = siu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpuImgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siu.mutation = mutation
			affected, err = siu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(siu.hooks) - 1; i >= 0; i-- {
			if siu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = siu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (siu *SpuImgUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *SpuImgUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *SpuImgUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *SpuImgUpdate) defaults() {
	if _, ok := siu.mutation.UpdateTime(); !ok {
		v := spuimg.UpdateDefaultUpdateTime()
		siu.mutation.SetUpdateTime(v)
	}
}

func (siu *SpuImgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spuimg.Table,
			Columns: spuimg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: spuimg.FieldID,
			},
		},
	}
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spuimg.FieldUpdateTime,
		})
	}
	if value, ok := siu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spuimg.FieldDeleteTime,
		})
	}
	if siu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: spuimg.FieldDeleteTime,
		})
	}
	if value, ok := siu.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spuimg.FieldImg,
		})
	}
	if siu.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spuimg.SpuTable,
			Columns: []string{spuimg.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spuimg.SpuTable,
			Columns: []string{spuimg.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spuimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SpuImgUpdateOne is the builder for updating a single SpuImg entity.
type SpuImgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpuImgMutation
}

// SetUpdateTime sets the "update_time" field.
func (siuo *SpuImgUpdateOne) SetUpdateTime(t time.Time) *SpuImgUpdateOne {
	siuo.mutation.SetUpdateTime(t)
	return siuo
}

// SetDeleteTime sets the "delete_time" field.
func (siuo *SpuImgUpdateOne) SetDeleteTime(t time.Time) *SpuImgUpdateOne {
	siuo.mutation.SetDeleteTime(t)
	return siuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (siuo *SpuImgUpdateOne) SetNillableDeleteTime(t *time.Time) *SpuImgUpdateOne {
	if t != nil {
		siuo.SetDeleteTime(*t)
	}
	return siuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (siuo *SpuImgUpdateOne) ClearDeleteTime() *SpuImgUpdateOne {
	siuo.mutation.ClearDeleteTime()
	return siuo
}

// SetImg sets the "img" field.
func (siuo *SpuImgUpdateOne) SetImg(s string) *SpuImgUpdateOne {
	siuo.mutation.SetImg(s)
	return siuo
}

// SetSpuID sets the "spu_id" field.
func (siuo *SpuImgUpdateOne) SetSpuID(i int64) *SpuImgUpdateOne {
	siuo.mutation.SetSpuID(i)
	return siuo
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (siuo *SpuImgUpdateOne) SetNillableSpuID(i *int64) *SpuImgUpdateOne {
	if i != nil {
		siuo.SetSpuID(*i)
	}
	return siuo
}

// ClearSpuID clears the value of the "spu_id" field.
func (siuo *SpuImgUpdateOne) ClearSpuID() *SpuImgUpdateOne {
	siuo.mutation.ClearSpuID()
	return siuo
}

// SetSpu sets the "spu" edge to the Spu entity.
func (siuo *SpuImgUpdateOne) SetSpu(s *Spu) *SpuImgUpdateOne {
	return siuo.SetSpuID(s.ID)
}

// Mutation returns the SpuImgMutation object of the builder.
func (siuo *SpuImgUpdateOne) Mutation() *SpuImgMutation {
	return siuo.mutation
}

// ClearSpu clears the "spu" edge to the Spu entity.
func (siuo *SpuImgUpdateOne) ClearSpu() *SpuImgUpdateOne {
	siuo.mutation.ClearSpu()
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *SpuImgUpdateOne) Select(field string, fields ...string) *SpuImgUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated SpuImg entity.
func (siuo *SpuImgUpdateOne) Save(ctx context.Context) (*SpuImg, error) {
	var (
		err  error
		node *SpuImg
	)
	siuo.defaults()
	if len(siuo.hooks) == 0 {
		node, err = siuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpuImgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siuo.mutation = mutation
			node, err = siuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(siuo.hooks) - 1; i >= 0; i-- {
			if siuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = siuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *SpuImgUpdateOne) SaveX(ctx context.Context) *SpuImg {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *SpuImgUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *SpuImgUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *SpuImgUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdateTime(); !ok {
		v := spuimg.UpdateDefaultUpdateTime()
		siuo.mutation.SetUpdateTime(v)
	}
}

func (siuo *SpuImgUpdateOne) sqlSave(ctx context.Context) (_node *SpuImg, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spuimg.Table,
			Columns: spuimg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: spuimg.FieldID,
			},
		},
	}
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SpuImg.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spuimg.FieldID)
		for _, f := range fields {
			if !spuimg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != spuimg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spuimg.FieldUpdateTime,
		})
	}
	if value, ok := siuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spuimg.FieldDeleteTime,
		})
	}
	if siuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: spuimg.FieldDeleteTime,
		})
	}
	if value, ok := siuo.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spuimg.FieldImg,
		})
	}
	if siuo.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spuimg.SpuTable,
			Columns: []string{spuimg.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spuimg.SpuTable,
			Columns: []string{spuimg.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SpuImg{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spuimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
