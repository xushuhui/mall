// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/app/spu/service/internal/data/model/predicate"
	"mall-go/app/spu/service/internal/data/model/saleexplain"
	"mall-go/app/spu/service/internal/data/model/speckey"
	"mall-go/app/spu/service/internal/data/model/spu"
	"mall-go/app/spu/service/internal/data/model/spudetailimg"
	"mall-go/app/spu/service/internal/data/model/spuimg"
	"mall-go/app/spu/service/internal/data/model/tag"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpuUpdate is the builder for updating Spu entities.
type SpuUpdate struct {
	config
	hooks    []Hook
	mutation *SpuMutation
}

// Where appends a list predicates to the SpuUpdate builder.
func (su *SpuUpdate) Where(ps ...predicate.Spu) *SpuUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SpuUpdate) SetUpdateTime(t time.Time) *SpuUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetDeleteTime sets the "delete_time" field.
func (su *SpuUpdate) SetDeleteTime(t time.Time) *SpuUpdate {
	su.mutation.SetDeleteTime(t)
	return su
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (su *SpuUpdate) SetNillableDeleteTime(t *time.Time) *SpuUpdate {
	if t != nil {
		su.SetDeleteTime(*t)
	}
	return su
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (su *SpuUpdate) ClearDeleteTime() *SpuUpdate {
	su.mutation.ClearDeleteTime()
	return su
}

// SetTitle sets the "title" field.
func (su *SpuUpdate) SetTitle(s string) *SpuUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetSubtitle sets the "subtitle" field.
func (su *SpuUpdate) SetSubtitle(s string) *SpuUpdate {
	su.mutation.SetSubtitle(s)
	return su
}

// SetCategoryID sets the "category_id" field.
func (su *SpuUpdate) SetCategoryID(i int64) *SpuUpdate {
	su.mutation.ResetCategoryID()
	su.mutation.SetCategoryID(i)
	return su
}

// AddCategoryID adds i to the "category_id" field.
func (su *SpuUpdate) AddCategoryID(i int64) *SpuUpdate {
	su.mutation.AddCategoryID(i)
	return su
}

// SetRootCategoryID sets the "root_category_id" field.
func (su *SpuUpdate) SetRootCategoryID(i int64) *SpuUpdate {
	su.mutation.ResetRootCategoryID()
	su.mutation.SetRootCategoryID(i)
	return su
}

// AddRootCategoryID adds i to the "root_category_id" field.
func (su *SpuUpdate) AddRootCategoryID(i int64) *SpuUpdate {
	su.mutation.AddRootCategoryID(i)
	return su
}

// SetOnline sets the "online" field.
func (su *SpuUpdate) SetOnline(i int) *SpuUpdate {
	su.mutation.ResetOnline()
	su.mutation.SetOnline(i)
	return su
}

// AddOnline adds i to the "online" field.
func (su *SpuUpdate) AddOnline(i int) *SpuUpdate {
	su.mutation.AddOnline(i)
	return su
}

// SetPrice sets the "price" field.
func (su *SpuUpdate) SetPrice(s string) *SpuUpdate {
	su.mutation.SetPrice(s)
	return su
}

// SetSketchSpecID sets the "sketch_spec_id" field.
func (su *SpuUpdate) SetSketchSpecID(i int) *SpuUpdate {
	su.mutation.ResetSketchSpecID()
	su.mutation.SetSketchSpecID(i)
	return su
}

// AddSketchSpecID adds i to the "sketch_spec_id" field.
func (su *SpuUpdate) AddSketchSpecID(i int) *SpuUpdate {
	su.mutation.AddSketchSpecID(i)
	return su
}

// SetDefaultSkuID sets the "default_sku_id" field.
func (su *SpuUpdate) SetDefaultSkuID(i int) *SpuUpdate {
	su.mutation.ResetDefaultSkuID()
	su.mutation.SetDefaultSkuID(i)
	return su
}

// AddDefaultSkuID adds i to the "default_sku_id" field.
func (su *SpuUpdate) AddDefaultSkuID(i int) *SpuUpdate {
	su.mutation.AddDefaultSkuID(i)
	return su
}

// SetImg sets the "img" field.
func (su *SpuUpdate) SetImg(s string) *SpuUpdate {
	su.mutation.SetImg(s)
	return su
}

// SetDiscountPrice sets the "discount_price" field.
func (su *SpuUpdate) SetDiscountPrice(s string) *SpuUpdate {
	su.mutation.SetDiscountPrice(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SpuUpdate) SetDescription(s string) *SpuUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetTags sets the "tags" field.
func (su *SpuUpdate) SetTags(s string) *SpuUpdate {
	su.mutation.SetTags(s)
	return su
}

// SetSpuThemeImg sets the "spu_theme_img" field.
func (su *SpuUpdate) SetSpuThemeImg(s string) *SpuUpdate {
	su.mutation.SetSpuThemeImg(s)
	return su
}

// SetForThemeImg sets the "for_theme_img" field.
func (su *SpuUpdate) SetForThemeImg(s string) *SpuUpdate {
	su.mutation.SetForThemeImg(s)
	return su
}

// AddSaleExplainIDs adds the "sale_explain" edge to the SaleExplain entity by IDs.
func (su *SpuUpdate) AddSaleExplainIDs(ids ...int64) *SpuUpdate {
	su.mutation.AddSaleExplainIDs(ids...)
	return su
}

// AddSaleExplain adds the "sale_explain" edges to the SaleExplain entity.
func (su *SpuUpdate) AddSaleExplain(s ...*SaleExplain) *SpuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSaleExplainIDs(ids...)
}

// AddSpuImgIDs adds the "spu_img" edge to the SpuImg entity by IDs.
func (su *SpuUpdate) AddSpuImgIDs(ids ...int64) *SpuUpdate {
	su.mutation.AddSpuImgIDs(ids...)
	return su
}

// AddSpuImg adds the "spu_img" edges to the SpuImg entity.
func (su *SpuUpdate) AddSpuImg(s ...*SpuImg) *SpuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSpuImgIDs(ids...)
}

// AddSpuDetailImgIDs adds the "spu_detail_img" edge to the SpuDetailImg entity by IDs.
func (su *SpuUpdate) AddSpuDetailImgIDs(ids ...int64) *SpuUpdate {
	su.mutation.AddSpuDetailImgIDs(ids...)
	return su
}

// AddSpuDetailImg adds the "spu_detail_img" edges to the SpuDetailImg entity.
func (su *SpuUpdate) AddSpuDetailImg(s ...*SpuDetailImg) *SpuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSpuDetailImgIDs(ids...)
}

// AddSpecKeyIDs adds the "spec_key" edge to the SpecKey entity by IDs.
func (su *SpuUpdate) AddSpecKeyIDs(ids ...int64) *SpuUpdate {
	su.mutation.AddSpecKeyIDs(ids...)
	return su
}

// AddSpecKey adds the "spec_key" edges to the SpecKey entity.
func (su *SpuUpdate) AddSpecKey(s ...*SpecKey) *SpuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSpecKeyIDs(ids...)
}

// AddTagIDs adds the "tag" edge to the Tag entity by IDs.
func (su *SpuUpdate) AddTagIDs(ids ...int64) *SpuUpdate {
	su.mutation.AddTagIDs(ids...)
	return su
}

// AddTag adds the "tag" edges to the Tag entity.
func (su *SpuUpdate) AddTag(t ...*Tag) *SpuUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTagIDs(ids...)
}

// Mutation returns the SpuMutation object of the builder.
func (su *SpuUpdate) Mutation() *SpuMutation {
	return su.mutation
}

// ClearSaleExplain clears all "sale_explain" edges to the SaleExplain entity.
func (su *SpuUpdate) ClearSaleExplain() *SpuUpdate {
	su.mutation.ClearSaleExplain()
	return su
}

// RemoveSaleExplainIDs removes the "sale_explain" edge to SaleExplain entities by IDs.
func (su *SpuUpdate) RemoveSaleExplainIDs(ids ...int64) *SpuUpdate {
	su.mutation.RemoveSaleExplainIDs(ids...)
	return su
}

// RemoveSaleExplain removes "sale_explain" edges to SaleExplain entities.
func (su *SpuUpdate) RemoveSaleExplain(s ...*SaleExplain) *SpuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSaleExplainIDs(ids...)
}

// ClearSpuImg clears all "spu_img" edges to the SpuImg entity.
func (su *SpuUpdate) ClearSpuImg() *SpuUpdate {
	su.mutation.ClearSpuImg()
	return su
}

// RemoveSpuImgIDs removes the "spu_img" edge to SpuImg entities by IDs.
func (su *SpuUpdate) RemoveSpuImgIDs(ids ...int64) *SpuUpdate {
	su.mutation.RemoveSpuImgIDs(ids...)
	return su
}

// RemoveSpuImg removes "spu_img" edges to SpuImg entities.
func (su *SpuUpdate) RemoveSpuImg(s ...*SpuImg) *SpuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSpuImgIDs(ids...)
}

// ClearSpuDetailImg clears all "spu_detail_img" edges to the SpuDetailImg entity.
func (su *SpuUpdate) ClearSpuDetailImg() *SpuUpdate {
	su.mutation.ClearSpuDetailImg()
	return su
}

// RemoveSpuDetailImgIDs removes the "spu_detail_img" edge to SpuDetailImg entities by IDs.
func (su *SpuUpdate) RemoveSpuDetailImgIDs(ids ...int64) *SpuUpdate {
	su.mutation.RemoveSpuDetailImgIDs(ids...)
	return su
}

// RemoveSpuDetailImg removes "spu_detail_img" edges to SpuDetailImg entities.
func (su *SpuUpdate) RemoveSpuDetailImg(s ...*SpuDetailImg) *SpuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSpuDetailImgIDs(ids...)
}

// ClearSpecKey clears all "spec_key" edges to the SpecKey entity.
func (su *SpuUpdate) ClearSpecKey() *SpuUpdate {
	su.mutation.ClearSpecKey()
	return su
}

// RemoveSpecKeyIDs removes the "spec_key" edge to SpecKey entities by IDs.
func (su *SpuUpdate) RemoveSpecKeyIDs(ids ...int64) *SpuUpdate {
	su.mutation.RemoveSpecKeyIDs(ids...)
	return su
}

// RemoveSpecKey removes "spec_key" edges to SpecKey entities.
func (su *SpuUpdate) RemoveSpecKey(s ...*SpecKey) *SpuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSpecKeyIDs(ids...)
}

// ClearTag clears all "tag" edges to the Tag entity.
func (su *SpuUpdate) ClearTag() *SpuUpdate {
	su.mutation.ClearTag()
	return su
}

// RemoveTagIDs removes the "tag" edge to Tag entities by IDs.
func (su *SpuUpdate) RemoveTagIDs(ids ...int64) *SpuUpdate {
	su.mutation.RemoveTagIDs(ids...)
	return su
}

// RemoveTag removes "tag" edges to Tag entities.
func (su *SpuUpdate) RemoveTag(t ...*Tag) *SpuUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SpuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpuUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpuUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpuUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SpuUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := spu.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

func (su *SpuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spu.Table,
			Columns: spu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: spu.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spu.FieldUpdateTime,
		})
	}
	if value, ok := su.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spu.FieldDeleteTime,
		})
	}
	if su.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: spu.FieldDeleteTime,
		})
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldTitle,
		})
	}
	if value, ok := su.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldSubtitle,
		})
	}
	if value, ok := su.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldCategoryID,
		})
	}
	if value, ok := su.mutation.AddedCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldCategoryID,
		})
	}
	if value, ok := su.mutation.RootCategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldRootCategoryID,
		})
	}
	if value, ok := su.mutation.AddedRootCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldRootCategoryID,
		})
	}
	if value, ok := su.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldOnline,
		})
	}
	if value, ok := su.mutation.AddedOnline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldOnline,
		})
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldPrice,
		})
	}
	if value, ok := su.mutation.SketchSpecID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldSketchSpecID,
		})
	}
	if value, ok := su.mutation.AddedSketchSpecID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldSketchSpecID,
		})
	}
	if value, ok := su.mutation.DefaultSkuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldDefaultSkuID,
		})
	}
	if value, ok := su.mutation.AddedDefaultSkuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldDefaultSkuID,
		})
	}
	if value, ok := su.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldImg,
		})
	}
	if value, ok := su.mutation.DiscountPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldDiscountPrice,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldDescription,
		})
	}
	if value, ok := su.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldTags,
		})
	}
	if value, ok := su.mutation.SpuThemeImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldSpuThemeImg,
		})
	}
	if value, ok := su.mutation.ForThemeImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldForThemeImg,
		})
	}
	if su.mutation.SaleExplainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SaleExplainTable,
			Columns: []string{spu.SaleExplainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: saleexplain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSaleExplainIDs(); len(nodes) > 0 && !su.mutation.SaleExplainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SaleExplainTable,
			Columns: []string{spu.SaleExplainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: saleexplain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SaleExplainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SaleExplainTable,
			Columns: []string{spu.SaleExplainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: saleexplain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SpuImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuImgTable,
			Columns: []string{spu.SpuImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spuimg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSpuImgIDs(); len(nodes) > 0 && !su.mutation.SpuImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuImgTable,
			Columns: []string{spu.SpuImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spuimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SpuImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuImgTable,
			Columns: []string{spu.SpuImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spuimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SpuDetailImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuDetailImgTable,
			Columns: []string{spu.SpuDetailImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spudetailimg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSpuDetailImgIDs(); len(nodes) > 0 && !su.mutation.SpuDetailImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuDetailImgTable,
			Columns: []string{spu.SpuDetailImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spudetailimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SpuDetailImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuDetailImgTable,
			Columns: []string{spu.SpuDetailImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spudetailimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SpecKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.SpecKeyTable,
			Columns: spu.SpecKeyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: speckey.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSpecKeyIDs(); len(nodes) > 0 && !su.mutation.SpecKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.SpecKeyTable,
			Columns: spu.SpecKeyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: speckey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SpecKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.SpecKeyTable,
			Columns: spu.SpecKeyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: speckey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.TagTable,
			Columns: spu.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTagIDs(); len(nodes) > 0 && !su.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.TagTable,
			Columns: spu.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.TagTable,
			Columns: spu.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SpuUpdateOne is the builder for updating a single Spu entity.
type SpuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpuMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *SpuUpdateOne) SetUpdateTime(t time.Time) *SpuUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetDeleteTime sets the "delete_time" field.
func (suo *SpuUpdateOne) SetDeleteTime(t time.Time) *SpuUpdateOne {
	suo.mutation.SetDeleteTime(t)
	return suo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (suo *SpuUpdateOne) SetNillableDeleteTime(t *time.Time) *SpuUpdateOne {
	if t != nil {
		suo.SetDeleteTime(*t)
	}
	return suo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (suo *SpuUpdateOne) ClearDeleteTime() *SpuUpdateOne {
	suo.mutation.ClearDeleteTime()
	return suo
}

// SetTitle sets the "title" field.
func (suo *SpuUpdateOne) SetTitle(s string) *SpuUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetSubtitle sets the "subtitle" field.
func (suo *SpuUpdateOne) SetSubtitle(s string) *SpuUpdateOne {
	suo.mutation.SetSubtitle(s)
	return suo
}

// SetCategoryID sets the "category_id" field.
func (suo *SpuUpdateOne) SetCategoryID(i int64) *SpuUpdateOne {
	suo.mutation.ResetCategoryID()
	suo.mutation.SetCategoryID(i)
	return suo
}

// AddCategoryID adds i to the "category_id" field.
func (suo *SpuUpdateOne) AddCategoryID(i int64) *SpuUpdateOne {
	suo.mutation.AddCategoryID(i)
	return suo
}

// SetRootCategoryID sets the "root_category_id" field.
func (suo *SpuUpdateOne) SetRootCategoryID(i int64) *SpuUpdateOne {
	suo.mutation.ResetRootCategoryID()
	suo.mutation.SetRootCategoryID(i)
	return suo
}

// AddRootCategoryID adds i to the "root_category_id" field.
func (suo *SpuUpdateOne) AddRootCategoryID(i int64) *SpuUpdateOne {
	suo.mutation.AddRootCategoryID(i)
	return suo
}

// SetOnline sets the "online" field.
func (suo *SpuUpdateOne) SetOnline(i int) *SpuUpdateOne {
	suo.mutation.ResetOnline()
	suo.mutation.SetOnline(i)
	return suo
}

// AddOnline adds i to the "online" field.
func (suo *SpuUpdateOne) AddOnline(i int) *SpuUpdateOne {
	suo.mutation.AddOnline(i)
	return suo
}

// SetPrice sets the "price" field.
func (suo *SpuUpdateOne) SetPrice(s string) *SpuUpdateOne {
	suo.mutation.SetPrice(s)
	return suo
}

// SetSketchSpecID sets the "sketch_spec_id" field.
func (suo *SpuUpdateOne) SetSketchSpecID(i int) *SpuUpdateOne {
	suo.mutation.ResetSketchSpecID()
	suo.mutation.SetSketchSpecID(i)
	return suo
}

// AddSketchSpecID adds i to the "sketch_spec_id" field.
func (suo *SpuUpdateOne) AddSketchSpecID(i int) *SpuUpdateOne {
	suo.mutation.AddSketchSpecID(i)
	return suo
}

// SetDefaultSkuID sets the "default_sku_id" field.
func (suo *SpuUpdateOne) SetDefaultSkuID(i int) *SpuUpdateOne {
	suo.mutation.ResetDefaultSkuID()
	suo.mutation.SetDefaultSkuID(i)
	return suo
}

// AddDefaultSkuID adds i to the "default_sku_id" field.
func (suo *SpuUpdateOne) AddDefaultSkuID(i int) *SpuUpdateOne {
	suo.mutation.AddDefaultSkuID(i)
	return suo
}

// SetImg sets the "img" field.
func (suo *SpuUpdateOne) SetImg(s string) *SpuUpdateOne {
	suo.mutation.SetImg(s)
	return suo
}

// SetDiscountPrice sets the "discount_price" field.
func (suo *SpuUpdateOne) SetDiscountPrice(s string) *SpuUpdateOne {
	suo.mutation.SetDiscountPrice(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SpuUpdateOne) SetDescription(s string) *SpuUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetTags sets the "tags" field.
func (suo *SpuUpdateOne) SetTags(s string) *SpuUpdateOne {
	suo.mutation.SetTags(s)
	return suo
}

// SetSpuThemeImg sets the "spu_theme_img" field.
func (suo *SpuUpdateOne) SetSpuThemeImg(s string) *SpuUpdateOne {
	suo.mutation.SetSpuThemeImg(s)
	return suo
}

// SetForThemeImg sets the "for_theme_img" field.
func (suo *SpuUpdateOne) SetForThemeImg(s string) *SpuUpdateOne {
	suo.mutation.SetForThemeImg(s)
	return suo
}

// AddSaleExplainIDs adds the "sale_explain" edge to the SaleExplain entity by IDs.
func (suo *SpuUpdateOne) AddSaleExplainIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.AddSaleExplainIDs(ids...)
	return suo
}

// AddSaleExplain adds the "sale_explain" edges to the SaleExplain entity.
func (suo *SpuUpdateOne) AddSaleExplain(s ...*SaleExplain) *SpuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSaleExplainIDs(ids...)
}

// AddSpuImgIDs adds the "spu_img" edge to the SpuImg entity by IDs.
func (suo *SpuUpdateOne) AddSpuImgIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.AddSpuImgIDs(ids...)
	return suo
}

// AddSpuImg adds the "spu_img" edges to the SpuImg entity.
func (suo *SpuUpdateOne) AddSpuImg(s ...*SpuImg) *SpuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSpuImgIDs(ids...)
}

// AddSpuDetailImgIDs adds the "spu_detail_img" edge to the SpuDetailImg entity by IDs.
func (suo *SpuUpdateOne) AddSpuDetailImgIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.AddSpuDetailImgIDs(ids...)
	return suo
}

// AddSpuDetailImg adds the "spu_detail_img" edges to the SpuDetailImg entity.
func (suo *SpuUpdateOne) AddSpuDetailImg(s ...*SpuDetailImg) *SpuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSpuDetailImgIDs(ids...)
}

// AddSpecKeyIDs adds the "spec_key" edge to the SpecKey entity by IDs.
func (suo *SpuUpdateOne) AddSpecKeyIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.AddSpecKeyIDs(ids...)
	return suo
}

// AddSpecKey adds the "spec_key" edges to the SpecKey entity.
func (suo *SpuUpdateOne) AddSpecKey(s ...*SpecKey) *SpuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSpecKeyIDs(ids...)
}

// AddTagIDs adds the "tag" edge to the Tag entity by IDs.
func (suo *SpuUpdateOne) AddTagIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.AddTagIDs(ids...)
	return suo
}

// AddTag adds the "tag" edges to the Tag entity.
func (suo *SpuUpdateOne) AddTag(t ...*Tag) *SpuUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTagIDs(ids...)
}

// Mutation returns the SpuMutation object of the builder.
func (suo *SpuUpdateOne) Mutation() *SpuMutation {
	return suo.mutation
}

// ClearSaleExplain clears all "sale_explain" edges to the SaleExplain entity.
func (suo *SpuUpdateOne) ClearSaleExplain() *SpuUpdateOne {
	suo.mutation.ClearSaleExplain()
	return suo
}

// RemoveSaleExplainIDs removes the "sale_explain" edge to SaleExplain entities by IDs.
func (suo *SpuUpdateOne) RemoveSaleExplainIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.RemoveSaleExplainIDs(ids...)
	return suo
}

// RemoveSaleExplain removes "sale_explain" edges to SaleExplain entities.
func (suo *SpuUpdateOne) RemoveSaleExplain(s ...*SaleExplain) *SpuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSaleExplainIDs(ids...)
}

// ClearSpuImg clears all "spu_img" edges to the SpuImg entity.
func (suo *SpuUpdateOne) ClearSpuImg() *SpuUpdateOne {
	suo.mutation.ClearSpuImg()
	return suo
}

// RemoveSpuImgIDs removes the "spu_img" edge to SpuImg entities by IDs.
func (suo *SpuUpdateOne) RemoveSpuImgIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.RemoveSpuImgIDs(ids...)
	return suo
}

// RemoveSpuImg removes "spu_img" edges to SpuImg entities.
func (suo *SpuUpdateOne) RemoveSpuImg(s ...*SpuImg) *SpuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSpuImgIDs(ids...)
}

// ClearSpuDetailImg clears all "spu_detail_img" edges to the SpuDetailImg entity.
func (suo *SpuUpdateOne) ClearSpuDetailImg() *SpuUpdateOne {
	suo.mutation.ClearSpuDetailImg()
	return suo
}

// RemoveSpuDetailImgIDs removes the "spu_detail_img" edge to SpuDetailImg entities by IDs.
func (suo *SpuUpdateOne) RemoveSpuDetailImgIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.RemoveSpuDetailImgIDs(ids...)
	return suo
}

// RemoveSpuDetailImg removes "spu_detail_img" edges to SpuDetailImg entities.
func (suo *SpuUpdateOne) RemoveSpuDetailImg(s ...*SpuDetailImg) *SpuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSpuDetailImgIDs(ids...)
}

// ClearSpecKey clears all "spec_key" edges to the SpecKey entity.
func (suo *SpuUpdateOne) ClearSpecKey() *SpuUpdateOne {
	suo.mutation.ClearSpecKey()
	return suo
}

// RemoveSpecKeyIDs removes the "spec_key" edge to SpecKey entities by IDs.
func (suo *SpuUpdateOne) RemoveSpecKeyIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.RemoveSpecKeyIDs(ids...)
	return suo
}

// RemoveSpecKey removes "spec_key" edges to SpecKey entities.
func (suo *SpuUpdateOne) RemoveSpecKey(s ...*SpecKey) *SpuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSpecKeyIDs(ids...)
}

// ClearTag clears all "tag" edges to the Tag entity.
func (suo *SpuUpdateOne) ClearTag() *SpuUpdateOne {
	suo.mutation.ClearTag()
	return suo
}

// RemoveTagIDs removes the "tag" edge to Tag entities by IDs.
func (suo *SpuUpdateOne) RemoveTagIDs(ids ...int64) *SpuUpdateOne {
	suo.mutation.RemoveTagIDs(ids...)
	return suo
}

// RemoveTag removes "tag" edges to Tag entities.
func (suo *SpuUpdateOne) RemoveTag(t ...*Tag) *SpuUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTagIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SpuUpdateOne) Select(field string, fields ...string) *SpuUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Spu entity.
func (suo *SpuUpdateOne) Save(ctx context.Context) (*Spu, error) {
	var (
		err  error
		node *Spu
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpuUpdateOne) SaveX(ctx context.Context) *Spu {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SpuUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpuUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SpuUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := spu.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

func (suo *SpuUpdateOne) sqlSave(ctx context.Context) (_node *Spu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spu.Table,
			Columns: spu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: spu.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Spu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spu.FieldID)
		for _, f := range fields {
			if !spu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != spu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spu.FieldUpdateTime,
		})
	}
	if value, ok := suo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spu.FieldDeleteTime,
		})
	}
	if suo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: spu.FieldDeleteTime,
		})
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldTitle,
		})
	}
	if value, ok := suo.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldSubtitle,
		})
	}
	if value, ok := suo.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldCategoryID,
		})
	}
	if value, ok := suo.mutation.AddedCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldCategoryID,
		})
	}
	if value, ok := suo.mutation.RootCategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldRootCategoryID,
		})
	}
	if value, ok := suo.mutation.AddedRootCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: spu.FieldRootCategoryID,
		})
	}
	if value, ok := suo.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldOnline,
		})
	}
	if value, ok := suo.mutation.AddedOnline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldOnline,
		})
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldPrice,
		})
	}
	if value, ok := suo.mutation.SketchSpecID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldSketchSpecID,
		})
	}
	if value, ok := suo.mutation.AddedSketchSpecID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldSketchSpecID,
		})
	}
	if value, ok := suo.mutation.DefaultSkuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldDefaultSkuID,
		})
	}
	if value, ok := suo.mutation.AddedDefaultSkuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spu.FieldDefaultSkuID,
		})
	}
	if value, ok := suo.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldImg,
		})
	}
	if value, ok := suo.mutation.DiscountPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldDiscountPrice,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldDescription,
		})
	}
	if value, ok := suo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldTags,
		})
	}
	if value, ok := suo.mutation.SpuThemeImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldSpuThemeImg,
		})
	}
	if value, ok := suo.mutation.ForThemeImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spu.FieldForThemeImg,
		})
	}
	if suo.mutation.SaleExplainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SaleExplainTable,
			Columns: []string{spu.SaleExplainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: saleexplain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSaleExplainIDs(); len(nodes) > 0 && !suo.mutation.SaleExplainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SaleExplainTable,
			Columns: []string{spu.SaleExplainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: saleexplain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SaleExplainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SaleExplainTable,
			Columns: []string{spu.SaleExplainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: saleexplain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SpuImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuImgTable,
			Columns: []string{spu.SpuImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spuimg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSpuImgIDs(); len(nodes) > 0 && !suo.mutation.SpuImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuImgTable,
			Columns: []string{spu.SpuImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spuimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SpuImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuImgTable,
			Columns: []string{spu.SpuImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spuimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SpuDetailImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuDetailImgTable,
			Columns: []string{spu.SpuDetailImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spudetailimg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSpuDetailImgIDs(); len(nodes) > 0 && !suo.mutation.SpuDetailImgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuDetailImgTable,
			Columns: []string{spu.SpuDetailImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spudetailimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SpuDetailImgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spu.SpuDetailImgTable,
			Columns: []string{spu.SpuDetailImgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spudetailimg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SpecKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.SpecKeyTable,
			Columns: spu.SpecKeyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: speckey.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSpecKeyIDs(); len(nodes) > 0 && !suo.mutation.SpecKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.SpecKeyTable,
			Columns: spu.SpecKeyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: speckey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SpecKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.SpecKeyTable,
			Columns: spu.SpecKeyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: speckey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.TagTable,
			Columns: spu.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTagIDs(); len(nodes) > 0 && !suo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.TagTable,
			Columns: spu.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   spu.TagTable,
			Columns: spu.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Spu{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
