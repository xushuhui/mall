// Code generated by entc, DO NOT EDIT.

package specvalue

import (
	"mall-go/app/spu/service/internal/data/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// SpecID applies equality check predicate on the "spec_id" field. It's identical to SpecIDEQ.
func SpecID(v int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecID), v))
	})
}

// Extend applies equality check predicate on the "extend" field. It's identical to ExtendEQ.
func Extend(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtend), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeleteTime)))
	})
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeleteTime)))
	})
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValue), v))
	})
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldValue), v...))
	})
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldValue), v...))
	})
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValue), v))
	})
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValue), v))
	})
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValue), v))
	})
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValue), v))
	})
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldValue), v))
	})
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldValue), v))
	})
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldValue), v))
	})
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldValue), v))
	})
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldValue), v))
	})
}

// SpecIDEQ applies the EQ predicate on the "spec_id" field.
func SpecIDEQ(v int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecID), v))
	})
}

// SpecIDNEQ applies the NEQ predicate on the "spec_id" field.
func SpecIDNEQ(v int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecID), v))
	})
}

// SpecIDIn applies the In predicate on the "spec_id" field.
func SpecIDIn(vs ...int64) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpecID), v...))
	})
}

// SpecIDNotIn applies the NotIn predicate on the "spec_id" field.
func SpecIDNotIn(vs ...int64) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpecID), v...))
	})
}

// SpecIDGT applies the GT predicate on the "spec_id" field.
func SpecIDGT(v int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecID), v))
	})
}

// SpecIDGTE applies the GTE predicate on the "spec_id" field.
func SpecIDGTE(v int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecID), v))
	})
}

// SpecIDLT applies the LT predicate on the "spec_id" field.
func SpecIDLT(v int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecID), v))
	})
}

// SpecIDLTE applies the LTE predicate on the "spec_id" field.
func SpecIDLTE(v int64) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecID), v))
	})
}

// ExtendEQ applies the EQ predicate on the "extend" field.
func ExtendEQ(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtend), v))
	})
}

// ExtendNEQ applies the NEQ predicate on the "extend" field.
func ExtendNEQ(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtend), v))
	})
}

// ExtendIn applies the In predicate on the "extend" field.
func ExtendIn(vs ...string) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExtend), v...))
	})
}

// ExtendNotIn applies the NotIn predicate on the "extend" field.
func ExtendNotIn(vs ...string) predicate.SpecValue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SpecValue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExtend), v...))
	})
}

// ExtendGT applies the GT predicate on the "extend" field.
func ExtendGT(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtend), v))
	})
}

// ExtendGTE applies the GTE predicate on the "extend" field.
func ExtendGTE(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtend), v))
	})
}

// ExtendLT applies the LT predicate on the "extend" field.
func ExtendLT(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtend), v))
	})
}

// ExtendLTE applies the LTE predicate on the "extend" field.
func ExtendLTE(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtend), v))
	})
}

// ExtendContains applies the Contains predicate on the "extend" field.
func ExtendContains(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtend), v))
	})
}

// ExtendHasPrefix applies the HasPrefix predicate on the "extend" field.
func ExtendHasPrefix(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtend), v))
	})
}

// ExtendHasSuffix applies the HasSuffix predicate on the "extend" field.
func ExtendHasSuffix(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtend), v))
	})
}

// ExtendEqualFold applies the EqualFold predicate on the "extend" field.
func ExtendEqualFold(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtend), v))
	})
}

// ExtendContainsFold applies the ContainsFold predicate on the "extend" field.
func ExtendContainsFold(v string) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtend), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SpecValue) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SpecValue) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SpecValue) predicate.SpecValue {
	return predicate.SpecValue(func(s *sql.Selector) {
		p(s.Not())
	})
}
