// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/app/spu/service/internal/data/model/predicate"
	"mall-go/app/spu/service/internal/data/model/skuspec"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SkuSpecUpdate is the builder for updating SkuSpec entities.
type SkuSpecUpdate struct {
	config
	hooks    []Hook
	mutation *SkuSpecMutation
}

// Where appends a list predicates to the SkuSpecUpdate builder.
func (ssu *SkuSpecUpdate) Where(ps ...predicate.SkuSpec) *SkuSpecUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetSpuID sets the "spu_id" field.
func (ssu *SkuSpecUpdate) SetSpuID(i int64) *SkuSpecUpdate {
	ssu.mutation.ResetSpuID()
	ssu.mutation.SetSpuID(i)
	return ssu
}

// AddSpuID adds i to the "spu_id" field.
func (ssu *SkuSpecUpdate) AddSpuID(i int64) *SkuSpecUpdate {
	ssu.mutation.AddSpuID(i)
	return ssu
}

// SetSkuID sets the "sku_id" field.
func (ssu *SkuSpecUpdate) SetSkuID(i int64) *SkuSpecUpdate {
	ssu.mutation.ResetSkuID()
	ssu.mutation.SetSkuID(i)
	return ssu
}

// AddSkuID adds i to the "sku_id" field.
func (ssu *SkuSpecUpdate) AddSkuID(i int64) *SkuSpecUpdate {
	ssu.mutation.AddSkuID(i)
	return ssu
}

// SetKeyID sets the "key_id" field.
func (ssu *SkuSpecUpdate) SetKeyID(i int64) *SkuSpecUpdate {
	ssu.mutation.ResetKeyID()
	ssu.mutation.SetKeyID(i)
	return ssu
}

// AddKeyID adds i to the "key_id" field.
func (ssu *SkuSpecUpdate) AddKeyID(i int64) *SkuSpecUpdate {
	ssu.mutation.AddKeyID(i)
	return ssu
}

// SetValueID sets the "value_id" field.
func (ssu *SkuSpecUpdate) SetValueID(i int64) *SkuSpecUpdate {
	ssu.mutation.ResetValueID()
	ssu.mutation.SetValueID(i)
	return ssu
}

// AddValueID adds i to the "value_id" field.
func (ssu *SkuSpecUpdate) AddValueID(i int64) *SkuSpecUpdate {
	ssu.mutation.AddValueID(i)
	return ssu
}

// Mutation returns the SkuSpecMutation object of the builder.
func (ssu *SkuSpecUpdate) Mutation() *SkuSpecMutation {
	return ssu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SkuSpecUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ssu.hooks) == 0 {
		affected, err = ssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuSpecMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ssu.mutation = mutation
			affected, err = ssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ssu.hooks) - 1; i >= 0; i-- {
			if ssu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = ssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SkuSpecUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SkuSpecUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SkuSpecUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssu *SkuSpecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skuspec.Table,
			Columns: skuspec.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: skuspec.FieldID,
			},
		},
	}
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.SpuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSpuID,
		})
	}
	if value, ok := ssu.mutation.AddedSpuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSpuID,
		})
	}
	if value, ok := ssu.mutation.SkuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSkuID,
		})
	}
	if value, ok := ssu.mutation.AddedSkuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSkuID,
		})
	}
	if value, ok := ssu.mutation.KeyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldKeyID,
		})
	}
	if value, ok := ssu.mutation.AddedKeyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldKeyID,
		})
	}
	if value, ok := ssu.mutation.ValueID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldValueID,
		})
	}
	if value, ok := ssu.mutation.AddedValueID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldValueID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skuspec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SkuSpecUpdateOne is the builder for updating a single SkuSpec entity.
type SkuSpecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SkuSpecMutation
}

// SetSpuID sets the "spu_id" field.
func (ssuo *SkuSpecUpdateOne) SetSpuID(i int64) *SkuSpecUpdateOne {
	ssuo.mutation.ResetSpuID()
	ssuo.mutation.SetSpuID(i)
	return ssuo
}

// AddSpuID adds i to the "spu_id" field.
func (ssuo *SkuSpecUpdateOne) AddSpuID(i int64) *SkuSpecUpdateOne {
	ssuo.mutation.AddSpuID(i)
	return ssuo
}

// SetSkuID sets the "sku_id" field.
func (ssuo *SkuSpecUpdateOne) SetSkuID(i int64) *SkuSpecUpdateOne {
	ssuo.mutation.ResetSkuID()
	ssuo.mutation.SetSkuID(i)
	return ssuo
}

// AddSkuID adds i to the "sku_id" field.
func (ssuo *SkuSpecUpdateOne) AddSkuID(i int64) *SkuSpecUpdateOne {
	ssuo.mutation.AddSkuID(i)
	return ssuo
}

// SetKeyID sets the "key_id" field.
func (ssuo *SkuSpecUpdateOne) SetKeyID(i int64) *SkuSpecUpdateOne {
	ssuo.mutation.ResetKeyID()
	ssuo.mutation.SetKeyID(i)
	return ssuo
}

// AddKeyID adds i to the "key_id" field.
func (ssuo *SkuSpecUpdateOne) AddKeyID(i int64) *SkuSpecUpdateOne {
	ssuo.mutation.AddKeyID(i)
	return ssuo
}

// SetValueID sets the "value_id" field.
func (ssuo *SkuSpecUpdateOne) SetValueID(i int64) *SkuSpecUpdateOne {
	ssuo.mutation.ResetValueID()
	ssuo.mutation.SetValueID(i)
	return ssuo
}

// AddValueID adds i to the "value_id" field.
func (ssuo *SkuSpecUpdateOne) AddValueID(i int64) *SkuSpecUpdateOne {
	ssuo.mutation.AddValueID(i)
	return ssuo
}

// Mutation returns the SkuSpecMutation object of the builder.
func (ssuo *SkuSpecUpdateOne) Mutation() *SkuSpecMutation {
	return ssuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SkuSpecUpdateOne) Select(field string, fields ...string) *SkuSpecUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SkuSpec entity.
func (ssuo *SkuSpecUpdateOne) Save(ctx context.Context) (*SkuSpec, error) {
	var (
		err  error
		node *SkuSpec
	)
	if len(ssuo.hooks) == 0 {
		node, err = ssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuSpecMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ssuo.mutation = mutation
			node, err = ssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ssuo.hooks) - 1; i >= 0; i-- {
			if ssuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = ssuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SkuSpecUpdateOne) SaveX(ctx context.Context) *SkuSpec {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SkuSpecUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SkuSpecUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssuo *SkuSpecUpdateOne) sqlSave(ctx context.Context) (_node *SkuSpec, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skuspec.Table,
			Columns: skuspec.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: skuspec.FieldID,
			},
		},
	}
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SkuSpec.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, skuspec.FieldID)
		for _, f := range fields {
			if !skuspec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != skuspec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.SpuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSpuID,
		})
	}
	if value, ok := ssuo.mutation.AddedSpuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSpuID,
		})
	}
	if value, ok := ssuo.mutation.SkuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSkuID,
		})
	}
	if value, ok := ssuo.mutation.AddedSkuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSkuID,
		})
	}
	if value, ok := ssuo.mutation.KeyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldKeyID,
		})
	}
	if value, ok := ssuo.mutation.AddedKeyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldKeyID,
		})
	}
	if value, ok := ssuo.mutation.ValueID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldValueID,
		})
	}
	if value, ok := ssuo.mutation.AddedValueID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldValueID,
		})
	}
	_node = &SkuSpec{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skuspec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
