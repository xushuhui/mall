// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/spu/service/internal/data/model/skuspec"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// SkuSpec is the model entity for the SkuSpec schema.
type SkuSpec struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// SpuID holds the value of the "spu_id" field.
	SpuID int64 `json:"spu_id,omitempty"`
	// SkuID holds the value of the "sku_id" field.
	SkuID int64 `json:"sku_id,omitempty"`
	// KeyID holds the value of the "key_id" field.
	KeyID int64 `json:"key_id,omitempty"`
	// ValueID holds the value of the "value_id" field.
	ValueID int64 `json:"value_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SkuSpec) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case skuspec.FieldID, skuspec.FieldSpuID, skuspec.FieldSkuID, skuspec.FieldKeyID, skuspec.FieldValueID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SkuSpec", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SkuSpec fields.
func (ss *SkuSpec) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case skuspec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = int64(value.Int64)
		case skuspec.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				ss.SpuID = value.Int64
			}
		case skuspec.FieldSkuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sku_id", values[i])
			} else if value.Valid {
				ss.SkuID = value.Int64
			}
		case skuspec.FieldKeyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field key_id", values[i])
			} else if value.Valid {
				ss.KeyID = value.Int64
			}
		case skuspec.FieldValueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value_id", values[i])
			} else if value.Valid {
				ss.ValueID = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SkuSpec.
// Note that you need to call SkuSpec.Unwrap() before calling this method if this SkuSpec
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SkuSpec) Update() *SkuSpecUpdateOne {
	return (&SkuSpecClient{config: ss.config}).UpdateOne(ss)
}

// Unwrap unwraps the SkuSpec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SkuSpec) Unwrap() *SkuSpec {
	tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("model: SkuSpec is not a transactional entity")
	}
	ss.config.driver = tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SkuSpec) String() string {
	var builder strings.Builder
	builder.WriteString("SkuSpec(")
	builder.WriteString(fmt.Sprintf("id=%v", ss.ID))
	builder.WriteString(", spu_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.SpuID))
	builder.WriteString(", sku_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.SkuID))
	builder.WriteString(", key_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.KeyID))
	builder.WriteString(", value_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.ValueID))
	builder.WriteByte(')')
	return builder.String()
}

// SkuSpecs is a parsable slice of SkuSpec.
type SkuSpecs []*SkuSpec

func (ss SkuSpecs) config(cfg config) {
	for _i := range ss {
		ss[_i].config = cfg
	}
}
