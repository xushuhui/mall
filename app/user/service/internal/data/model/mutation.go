// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/app/user/service/internal/data/model/predicate"
	"mall-go/app/user/service/internal/data/model/usercoupon"
	"mall-go/app/user/service/internal/data/model/useridentiy"
	"mall-go/app/user/service/internal/data/model/userinfo"
	"mall-go/app/user/service/internal/data/model/userpoint"
	"mall-go/app/user/service/internal/data/model/userpointdetail"
	"mall-go/app/user/service/internal/data/model/userwallet"
	"mall-go/app/user/service/internal/data/model/userwalletdetail"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUserCoupon       = "UserCoupon"
	TypeUserIdentiy      = "UserIdentiy"
	TypeUserInfo         = "UserInfo"
	TypeUserPoint        = "UserPoint"
	TypeUserPointDetail  = "UserPointDetail"
	TypeUserWallet       = "UserWallet"
	TypeUserWalletDetail = "UserWalletDetail"
)

// UserCouponMutation represents an operation that mutates the UserCoupon nodes in the graph.
type UserCouponMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	user_id       *int64
	adduser_id    *int64
	coupon_id     *int64
	addcoupon_id  *int64
	status        *int
	addstatus     *int
	order_id      *int
	addorder_id   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserCoupon, error)
	predicates    []predicate.UserCoupon
}

var _ ent.Mutation = (*UserCouponMutation)(nil)

// usercouponOption allows management of the mutation configuration using functional options.
type usercouponOption func(*UserCouponMutation)

// newUserCouponMutation creates new mutation for the UserCoupon entity.
func newUserCouponMutation(c config, op Op, opts ...usercouponOption) *UserCouponMutation {
	m := &UserCouponMutation{
		config:        c,
		op:            op,
		typ:           TypeUserCoupon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserCouponID sets the ID field of the mutation.
func withUserCouponID(id int64) usercouponOption {
	return func(m *UserCouponMutation) {
		var (
			err   error
			once  sync.Once
			value *UserCoupon
		)
		m.oldValue = func(ctx context.Context) (*UserCoupon, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserCoupon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserCoupon sets the old UserCoupon of the mutation.
func withUserCoupon(node *UserCoupon) usercouponOption {
	return func(m *UserCouponMutation) {
		m.oldValue = func(context.Context) (*UserCoupon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserCouponMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserCouponMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserCouponMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *UserCouponMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserCouponMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserCoupon entity.
// If the UserCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCouponMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserCouponMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserCouponMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserCouponMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserCoupon entity.
// If the UserCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCouponMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserCouponMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserCouponMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserCouponMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the UserCoupon entity.
// If the UserCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCouponMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserCouponMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[usercoupon.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserCouponMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[usercoupon.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserCouponMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, usercoupon.FieldDeleteTime)
}

// SetUserID sets the "user_id" field.
func (m *UserCouponMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserCouponMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserCoupon entity.
// If the UserCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCouponMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserCouponMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserCouponMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserCouponMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetCouponID sets the "coupon_id" field.
func (m *UserCouponMutation) SetCouponID(i int64) {
	m.coupon_id = &i
	m.addcoupon_id = nil
}

// CouponID returns the value of the "coupon_id" field in the mutation.
func (m *UserCouponMutation) CouponID() (r int64, exists bool) {
	v := m.coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponID returns the old "coupon_id" field's value of the UserCoupon entity.
// If the UserCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCouponMutation) OldCouponID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponID: %w", err)
	}
	return oldValue.CouponID, nil
}

// AddCouponID adds i to the "coupon_id" field.
func (m *UserCouponMutation) AddCouponID(i int64) {
	if m.addcoupon_id != nil {
		*m.addcoupon_id += i
	} else {
		m.addcoupon_id = &i
	}
}

// AddedCouponID returns the value that was added to the "coupon_id" field in this mutation.
func (m *UserCouponMutation) AddedCouponID() (r int64, exists bool) {
	v := m.addcoupon_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCouponID clears the value of the "coupon_id" field.
func (m *UserCouponMutation) ClearCouponID() {
	m.coupon_id = nil
	m.addcoupon_id = nil
	m.clearedFields[usercoupon.FieldCouponID] = struct{}{}
}

// CouponIDCleared returns if the "coupon_id" field was cleared in this mutation.
func (m *UserCouponMutation) CouponIDCleared() bool {
	_, ok := m.clearedFields[usercoupon.FieldCouponID]
	return ok
}

// ResetCouponID resets all changes to the "coupon_id" field.
func (m *UserCouponMutation) ResetCouponID() {
	m.coupon_id = nil
	m.addcoupon_id = nil
	delete(m.clearedFields, usercoupon.FieldCouponID)
}

// SetStatus sets the "status" field.
func (m *UserCouponMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *UserCouponMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the UserCoupon entity.
// If the UserCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCouponMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *UserCouponMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *UserCouponMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *UserCouponMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetOrderID sets the "order_id" field.
func (m *UserCouponMutation) SetOrderID(i int) {
	m.order_id = &i
	m.addorder_id = nil
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *UserCouponMutation) OrderID() (r int, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the UserCoupon entity.
// If the UserCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCouponMutation) OldOrderID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// AddOrderID adds i to the "order_id" field.
func (m *UserCouponMutation) AddOrderID(i int) {
	if m.addorder_id != nil {
		*m.addorder_id += i
	} else {
		m.addorder_id = &i
	}
}

// AddedOrderID returns the value that was added to the "order_id" field in this mutation.
func (m *UserCouponMutation) AddedOrderID() (r int, exists bool) {
	v := m.addorder_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *UserCouponMutation) ResetOrderID() {
	m.order_id = nil
	m.addorder_id = nil
}

// Where appends a list predicates to the UserCouponMutation builder.
func (m *UserCouponMutation) Where(ps ...predicate.UserCoupon) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserCouponMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserCoupon).
func (m *UserCouponMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserCouponMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, usercoupon.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, usercoupon.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, usercoupon.FieldDeleteTime)
	}
	if m.user_id != nil {
		fields = append(fields, usercoupon.FieldUserID)
	}
	if m.coupon_id != nil {
		fields = append(fields, usercoupon.FieldCouponID)
	}
	if m.status != nil {
		fields = append(fields, usercoupon.FieldStatus)
	}
	if m.order_id != nil {
		fields = append(fields, usercoupon.FieldOrderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserCouponMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usercoupon.FieldCreateTime:
		return m.CreateTime()
	case usercoupon.FieldUpdateTime:
		return m.UpdateTime()
	case usercoupon.FieldDeleteTime:
		return m.DeleteTime()
	case usercoupon.FieldUserID:
		return m.UserID()
	case usercoupon.FieldCouponID:
		return m.CouponID()
	case usercoupon.FieldStatus:
		return m.Status()
	case usercoupon.FieldOrderID:
		return m.OrderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserCouponMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usercoupon.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case usercoupon.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case usercoupon.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case usercoupon.FieldUserID:
		return m.OldUserID(ctx)
	case usercoupon.FieldCouponID:
		return m.OldCouponID(ctx)
	case usercoupon.FieldStatus:
		return m.OldStatus(ctx)
	case usercoupon.FieldOrderID:
		return m.OldOrderID(ctx)
	}
	return nil, fmt.Errorf("unknown UserCoupon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCouponMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usercoupon.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case usercoupon.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case usercoupon.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case usercoupon.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usercoupon.FieldCouponID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponID(v)
		return nil
	case usercoupon.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case usercoupon.FieldOrderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	}
	return fmt.Errorf("unknown UserCoupon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserCouponMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, usercoupon.FieldUserID)
	}
	if m.addcoupon_id != nil {
		fields = append(fields, usercoupon.FieldCouponID)
	}
	if m.addstatus != nil {
		fields = append(fields, usercoupon.FieldStatus)
	}
	if m.addorder_id != nil {
		fields = append(fields, usercoupon.FieldOrderID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserCouponMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usercoupon.FieldUserID:
		return m.AddedUserID()
	case usercoupon.FieldCouponID:
		return m.AddedCouponID()
	case usercoupon.FieldStatus:
		return m.AddedStatus()
	case usercoupon.FieldOrderID:
		return m.AddedOrderID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCouponMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usercoupon.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case usercoupon.FieldCouponID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCouponID(v)
		return nil
	case usercoupon.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case usercoupon.FieldOrderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderID(v)
		return nil
	}
	return fmt.Errorf("unknown UserCoupon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserCouponMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usercoupon.FieldDeleteTime) {
		fields = append(fields, usercoupon.FieldDeleteTime)
	}
	if m.FieldCleared(usercoupon.FieldCouponID) {
		fields = append(fields, usercoupon.FieldCouponID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserCouponMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserCouponMutation) ClearField(name string) error {
	switch name {
	case usercoupon.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case usercoupon.FieldCouponID:
		m.ClearCouponID()
		return nil
	}
	return fmt.Errorf("unknown UserCoupon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserCouponMutation) ResetField(name string) error {
	switch name {
	case usercoupon.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case usercoupon.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case usercoupon.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case usercoupon.FieldUserID:
		m.ResetUserID()
		return nil
	case usercoupon.FieldCouponID:
		m.ResetCouponID()
		return nil
	case usercoupon.FieldStatus:
		m.ResetStatus()
		return nil
	case usercoupon.FieldOrderID:
		m.ResetOrderID()
		return nil
	}
	return fmt.Errorf("unknown UserCoupon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserCouponMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserCouponMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserCouponMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserCouponMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserCouponMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserCouponMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserCouponMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserCoupon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserCouponMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserCoupon edge %s", name)
}

// UserIdentiyMutation represents an operation that mutates the UserIdentiy nodes in the graph.
type UserIdentiyMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	user_id       *int
	adduser_id    *int
	identity_type *string
	identifier    *string
	credential    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserIdentiy, error)
	predicates    []predicate.UserIdentiy
}

var _ ent.Mutation = (*UserIdentiyMutation)(nil)

// useridentiyOption allows management of the mutation configuration using functional options.
type useridentiyOption func(*UserIdentiyMutation)

// newUserIdentiyMutation creates new mutation for the UserIdentiy entity.
func newUserIdentiyMutation(c config, op Op, opts ...useridentiyOption) *UserIdentiyMutation {
	m := &UserIdentiyMutation{
		config:        c,
		op:            op,
		typ:           TypeUserIdentiy,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserIdentiyID sets the ID field of the mutation.
func withUserIdentiyID(id int64) useridentiyOption {
	return func(m *UserIdentiyMutation) {
		var (
			err   error
			once  sync.Once
			value *UserIdentiy
		)
		m.oldValue = func(ctx context.Context) (*UserIdentiy, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserIdentiy.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserIdentiy sets the old UserIdentiy of the mutation.
func withUserIdentiy(node *UserIdentiy) useridentiyOption {
	return func(m *UserIdentiyMutation) {
		m.oldValue = func(context.Context) (*UserIdentiy, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserIdentiyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserIdentiyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserIdentiyMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *UserIdentiyMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserIdentiyMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserIdentiy entity.
// If the UserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIdentiyMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserIdentiyMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserIdentiyMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserIdentiyMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserIdentiy entity.
// If the UserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIdentiyMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserIdentiyMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserIdentiyMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserIdentiyMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the UserIdentiy entity.
// If the UserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIdentiyMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserIdentiyMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[useridentiy.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserIdentiyMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[useridentiy.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserIdentiyMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, useridentiy.FieldDeleteTime)
}

// SetUserID sets the "user_id" field.
func (m *UserIdentiyMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserIdentiyMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserIdentiy entity.
// If the UserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIdentiyMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserIdentiyMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserIdentiyMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserIdentiyMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetIdentityType sets the "identity_type" field.
func (m *UserIdentiyMutation) SetIdentityType(s string) {
	m.identity_type = &s
}

// IdentityType returns the value of the "identity_type" field in the mutation.
func (m *UserIdentiyMutation) IdentityType() (r string, exists bool) {
	v := m.identity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentityType returns the old "identity_type" field's value of the UserIdentiy entity.
// If the UserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIdentiyMutation) OldIdentityType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdentityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdentityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentityType: %w", err)
	}
	return oldValue.IdentityType, nil
}

// ResetIdentityType resets all changes to the "identity_type" field.
func (m *UserIdentiyMutation) ResetIdentityType() {
	m.identity_type = nil
}

// SetIdentifier sets the "identifier" field.
func (m *UserIdentiyMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *UserIdentiyMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the UserIdentiy entity.
// If the UserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIdentiyMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *UserIdentiyMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetCredential sets the "credential" field.
func (m *UserIdentiyMutation) SetCredential(s string) {
	m.credential = &s
}

// Credential returns the value of the "credential" field in the mutation.
func (m *UserIdentiyMutation) Credential() (r string, exists bool) {
	v := m.credential
	if v == nil {
		return
	}
	return *v, true
}

// OldCredential returns the old "credential" field's value of the UserIdentiy entity.
// If the UserIdentiy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIdentiyMutation) OldCredential(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCredential is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCredential requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredential: %w", err)
	}
	return oldValue.Credential, nil
}

// ResetCredential resets all changes to the "credential" field.
func (m *UserIdentiyMutation) ResetCredential() {
	m.credential = nil
}

// Where appends a list predicates to the UserIdentiyMutation builder.
func (m *UserIdentiyMutation) Where(ps ...predicate.UserIdentiy) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserIdentiyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserIdentiy).
func (m *UserIdentiyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserIdentiyMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, useridentiy.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, useridentiy.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, useridentiy.FieldDeleteTime)
	}
	if m.user_id != nil {
		fields = append(fields, useridentiy.FieldUserID)
	}
	if m.identity_type != nil {
		fields = append(fields, useridentiy.FieldIdentityType)
	}
	if m.identifier != nil {
		fields = append(fields, useridentiy.FieldIdentifier)
	}
	if m.credential != nil {
		fields = append(fields, useridentiy.FieldCredential)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserIdentiyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useridentiy.FieldCreateTime:
		return m.CreateTime()
	case useridentiy.FieldUpdateTime:
		return m.UpdateTime()
	case useridentiy.FieldDeleteTime:
		return m.DeleteTime()
	case useridentiy.FieldUserID:
		return m.UserID()
	case useridentiy.FieldIdentityType:
		return m.IdentityType()
	case useridentiy.FieldIdentifier:
		return m.Identifier()
	case useridentiy.FieldCredential:
		return m.Credential()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserIdentiyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useridentiy.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case useridentiy.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case useridentiy.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case useridentiy.FieldUserID:
		return m.OldUserID(ctx)
	case useridentiy.FieldIdentityType:
		return m.OldIdentityType(ctx)
	case useridentiy.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case useridentiy.FieldCredential:
		return m.OldCredential(ctx)
	}
	return nil, fmt.Errorf("unknown UserIdentiy field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserIdentiyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useridentiy.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case useridentiy.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case useridentiy.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case useridentiy.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case useridentiy.FieldIdentityType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentityType(v)
		return nil
	case useridentiy.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case useridentiy.FieldCredential:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredential(v)
		return nil
	}
	return fmt.Errorf("unknown UserIdentiy field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserIdentiyMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, useridentiy.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserIdentiyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case useridentiy.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserIdentiyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case useridentiy.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown UserIdentiy numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserIdentiyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(useridentiy.FieldDeleteTime) {
		fields = append(fields, useridentiy.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserIdentiyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserIdentiyMutation) ClearField(name string) error {
	switch name {
	case useridentiy.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown UserIdentiy nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserIdentiyMutation) ResetField(name string) error {
	switch name {
	case useridentiy.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case useridentiy.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case useridentiy.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case useridentiy.FieldUserID:
		m.ResetUserID()
		return nil
	case useridentiy.FieldIdentityType:
		m.ResetIdentityType()
		return nil
	case useridentiy.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case useridentiy.FieldCredential:
		m.ResetCredential()
		return nil
	}
	return fmt.Errorf("unknown UserIdentiy field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserIdentiyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserIdentiyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserIdentiyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserIdentiyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserIdentiyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserIdentiyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserIdentiyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserIdentiy unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserIdentiyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserIdentiy edge %s", name)
}

// UserInfoMutation represents an operation that mutates the UserInfo nodes in the graph.
type UserInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	nickname      *string
	phone         *string
	avatar        *string
	wx_profile    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserInfo, error)
	predicates    []predicate.UserInfo
}

var _ ent.Mutation = (*UserInfoMutation)(nil)

// userinfoOption allows management of the mutation configuration using functional options.
type userinfoOption func(*UserInfoMutation)

// newUserInfoMutation creates new mutation for the UserInfo entity.
func newUserInfoMutation(c config, op Op, opts ...userinfoOption) *UserInfoMutation {
	m := &UserInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeUserInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserInfoID sets the ID field of the mutation.
func withUserInfoID(id int64) userinfoOption {
	return func(m *UserInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *UserInfo
		)
		m.oldValue = func(ctx context.Context) (*UserInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserInfo sets the old UserInfo of the mutation.
func withUserInfo(node *UserInfo) userinfoOption {
	return func(m *UserInfoMutation) {
		m.oldValue = func(context.Context) (*UserInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserInfo entities.
func (m *UserInfoMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserInfoMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *UserInfoMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserInfoMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserInfo entity.
// If the UserInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInfoMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserInfoMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserInfoMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserInfoMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserInfo entity.
// If the UserInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInfoMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserInfoMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserInfoMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserInfoMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the UserInfo entity.
// If the UserInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInfoMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserInfoMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[userinfo.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserInfoMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[userinfo.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserInfoMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, userinfo.FieldDeleteTime)
}

// SetNickname sets the "nickname" field.
func (m *UserInfoMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserInfoMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the UserInfo entity.
// If the UserInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInfoMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserInfoMutation) ResetNickname() {
	m.nickname = nil
}

// SetPhone sets the "phone" field.
func (m *UserInfoMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserInfoMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the UserInfo entity.
// If the UserInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInfoMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserInfoMutation) ResetPhone() {
	m.phone = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserInfoMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserInfoMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the UserInfo entity.
// If the UserInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInfoMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserInfoMutation) ResetAvatar() {
	m.avatar = nil
}

// SetWxProfile sets the "wx_profile" field.
func (m *UserInfoMutation) SetWxProfile(s string) {
	m.wx_profile = &s
}

// WxProfile returns the value of the "wx_profile" field in the mutation.
func (m *UserInfoMutation) WxProfile() (r string, exists bool) {
	v := m.wx_profile
	if v == nil {
		return
	}
	return *v, true
}

// OldWxProfile returns the old "wx_profile" field's value of the UserInfo entity.
// If the UserInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInfoMutation) OldWxProfile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWxProfile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWxProfile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWxProfile: %w", err)
	}
	return oldValue.WxProfile, nil
}

// ResetWxProfile resets all changes to the "wx_profile" field.
func (m *UserInfoMutation) ResetWxProfile() {
	m.wx_profile = nil
}

// Where appends a list predicates to the UserInfoMutation builder.
func (m *UserInfoMutation) Where(ps ...predicate.UserInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserInfo).
func (m *UserInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserInfoMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, userinfo.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, userinfo.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, userinfo.FieldDeleteTime)
	}
	if m.nickname != nil {
		fields = append(fields, userinfo.FieldNickname)
	}
	if m.phone != nil {
		fields = append(fields, userinfo.FieldPhone)
	}
	if m.avatar != nil {
		fields = append(fields, userinfo.FieldAvatar)
	}
	if m.wx_profile != nil {
		fields = append(fields, userinfo.FieldWxProfile)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userinfo.FieldCreateTime:
		return m.CreateTime()
	case userinfo.FieldUpdateTime:
		return m.UpdateTime()
	case userinfo.FieldDeleteTime:
		return m.DeleteTime()
	case userinfo.FieldNickname:
		return m.Nickname()
	case userinfo.FieldPhone:
		return m.Phone()
	case userinfo.FieldAvatar:
		return m.Avatar()
	case userinfo.FieldWxProfile:
		return m.WxProfile()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userinfo.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case userinfo.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case userinfo.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case userinfo.FieldNickname:
		return m.OldNickname(ctx)
	case userinfo.FieldPhone:
		return m.OldPhone(ctx)
	case userinfo.FieldAvatar:
		return m.OldAvatar(ctx)
	case userinfo.FieldWxProfile:
		return m.OldWxProfile(ctx)
	}
	return nil, fmt.Errorf("unknown UserInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userinfo.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case userinfo.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case userinfo.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case userinfo.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case userinfo.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case userinfo.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case userinfo.FieldWxProfile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWxProfile(v)
		return nil
	}
	return fmt.Errorf("unknown UserInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userinfo.FieldDeleteTime) {
		fields = append(fields, userinfo.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserInfoMutation) ClearField(name string) error {
	switch name {
	case userinfo.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown UserInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserInfoMutation) ResetField(name string) error {
	switch name {
	case userinfo.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case userinfo.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case userinfo.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case userinfo.FieldNickname:
		m.ResetNickname()
		return nil
	case userinfo.FieldPhone:
		m.ResetPhone()
		return nil
	case userinfo.FieldAvatar:
		m.ResetAvatar()
		return nil
	case userinfo.FieldWxProfile:
		m.ResetWxProfile()
		return nil
	}
	return fmt.Errorf("unknown UserInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserInfo edge %s", name)
}

// UserPointMutation represents an operation that mutates the UserPoint nodes in the graph.
type UserPointMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	value         *int
	addvalue      *int
	status        *int
	addstatus     *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserPoint, error)
	predicates    []predicate.UserPoint
}

var _ ent.Mutation = (*UserPointMutation)(nil)

// userpointOption allows management of the mutation configuration using functional options.
type userpointOption func(*UserPointMutation)

// newUserPointMutation creates new mutation for the UserPoint entity.
func newUserPointMutation(c config, op Op, opts ...userpointOption) *UserPointMutation {
	m := &UserPointMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPointID sets the ID field of the mutation.
func withUserPointID(id int64) userpointOption {
	return func(m *UserPointMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPoint
		)
		m.oldValue = func(ctx context.Context) (*UserPoint, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPoint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPoint sets the old UserPoint of the mutation.
func withUserPoint(node *UserPoint) userpointOption {
	return func(m *UserPointMutation) {
		m.oldValue = func(context.Context) (*UserPoint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserPoint entities.
func (m *UserPointMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserPointMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *UserPointMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserPointMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserPoint entity.
// If the UserPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserPointMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserPointMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserPointMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserPoint entity.
// If the UserPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserPointMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserPointMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserPointMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the UserPoint entity.
// If the UserPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserPointMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[userpoint.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserPointMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[userpoint.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserPointMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, userpoint.FieldDeleteTime)
}

// SetValue sets the "value" field.
func (m *UserPointMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *UserPointMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the UserPoint entity.
// If the UserPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *UserPointMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *UserPointMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *UserPointMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetStatus sets the "status" field.
func (m *UserPointMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *UserPointMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the UserPoint entity.
// If the UserPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *UserPointMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *UserPointMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *UserPointMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the UserPointMutation builder.
func (m *UserPointMutation) Where(ps ...predicate.UserPoint) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserPointMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserPoint).
func (m *UserPointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPointMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, userpoint.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, userpoint.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, userpoint.FieldDeleteTime)
	}
	if m.value != nil {
		fields = append(fields, userpoint.FieldValue)
	}
	if m.status != nil {
		fields = append(fields, userpoint.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userpoint.FieldCreateTime:
		return m.CreateTime()
	case userpoint.FieldUpdateTime:
		return m.UpdateTime()
	case userpoint.FieldDeleteTime:
		return m.DeleteTime()
	case userpoint.FieldValue:
		return m.Value()
	case userpoint.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userpoint.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case userpoint.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case userpoint.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case userpoint.FieldValue:
		return m.OldValue(ctx)
	case userpoint.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown UserPoint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userpoint.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case userpoint.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case userpoint.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case userpoint.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case userpoint.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown UserPoint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPointMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, userpoint.FieldValue)
	}
	if m.addstatus != nil {
		fields = append(fields, userpoint.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPointMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userpoint.FieldValue:
		return m.AddedValue()
	case userpoint.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPointMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userpoint.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	case userpoint.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown UserPoint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPointMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userpoint.FieldDeleteTime) {
		fields = append(fields, userpoint.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPointMutation) ClearField(name string) error {
	switch name {
	case userpoint.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown UserPoint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPointMutation) ResetField(name string) error {
	switch name {
	case userpoint.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case userpoint.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case userpoint.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case userpoint.FieldValue:
		m.ResetValue()
		return nil
	case userpoint.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown UserPoint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPointMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPointMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPointMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPointMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPointMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserPoint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPointMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserPoint edge %s", name)
}

// UserPointDetailMutation represents an operation that mutates the UserPointDetail nodes in the graph.
type UserPointDetailMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	user_id       *int64
	adduser_id    *int64
	value         *int
	addvalue      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserPointDetail, error)
	predicates    []predicate.UserPointDetail
}

var _ ent.Mutation = (*UserPointDetailMutation)(nil)

// userpointdetailOption allows management of the mutation configuration using functional options.
type userpointdetailOption func(*UserPointDetailMutation)

// newUserPointDetailMutation creates new mutation for the UserPointDetail entity.
func newUserPointDetailMutation(c config, op Op, opts ...userpointdetailOption) *UserPointDetailMutation {
	m := &UserPointDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPointDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPointDetailID sets the ID field of the mutation.
func withUserPointDetailID(id int64) userpointdetailOption {
	return func(m *UserPointDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPointDetail
		)
		m.oldValue = func(ctx context.Context) (*UserPointDetail, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPointDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPointDetail sets the old UserPointDetail of the mutation.
func withUserPointDetail(node *UserPointDetail) userpointdetailOption {
	return func(m *UserPointDetailMutation) {
		m.oldValue = func(context.Context) (*UserPointDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPointDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPointDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserPointDetailMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *UserPointDetailMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserPointDetailMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserPointDetail entity.
// If the UserPointDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointDetailMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserPointDetailMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserPointDetailMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserPointDetailMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserPointDetail entity.
// If the UserPointDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointDetailMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserPointDetailMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserPointDetailMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserPointDetailMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the UserPointDetail entity.
// If the UserPointDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointDetailMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserPointDetailMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[userpointdetail.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserPointDetailMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[userpointdetail.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserPointDetailMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, userpointdetail.FieldDeleteTime)
}

// SetUserID sets the "user_id" field.
func (m *UserPointDetailMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserPointDetailMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserPointDetail entity.
// If the UserPointDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointDetailMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserPointDetailMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserPointDetailMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserPointDetailMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetValue sets the "value" field.
func (m *UserPointDetailMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *UserPointDetailMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the UserPointDetail entity.
// If the UserPointDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPointDetailMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *UserPointDetailMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *UserPointDetailMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *UserPointDetailMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// Where appends a list predicates to the UserPointDetailMutation builder.
func (m *UserPointDetailMutation) Where(ps ...predicate.UserPointDetail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserPointDetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserPointDetail).
func (m *UserPointDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPointDetailMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, userpointdetail.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, userpointdetail.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, userpointdetail.FieldDeleteTime)
	}
	if m.user_id != nil {
		fields = append(fields, userpointdetail.FieldUserID)
	}
	if m.value != nil {
		fields = append(fields, userpointdetail.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPointDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userpointdetail.FieldCreateTime:
		return m.CreateTime()
	case userpointdetail.FieldUpdateTime:
		return m.UpdateTime()
	case userpointdetail.FieldDeleteTime:
		return m.DeleteTime()
	case userpointdetail.FieldUserID:
		return m.UserID()
	case userpointdetail.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPointDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userpointdetail.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case userpointdetail.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case userpointdetail.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case userpointdetail.FieldUserID:
		return m.OldUserID(ctx)
	case userpointdetail.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown UserPointDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPointDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userpointdetail.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case userpointdetail.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case userpointdetail.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case userpointdetail.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userpointdetail.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown UserPointDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPointDetailMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, userpointdetail.FieldUserID)
	}
	if m.addvalue != nil {
		fields = append(fields, userpointdetail.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPointDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userpointdetail.FieldUserID:
		return m.AddedUserID()
	case userpointdetail.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPointDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userpointdetail.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case userpointdetail.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown UserPointDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPointDetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userpointdetail.FieldDeleteTime) {
		fields = append(fields, userpointdetail.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPointDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPointDetailMutation) ClearField(name string) error {
	switch name {
	case userpointdetail.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown UserPointDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPointDetailMutation) ResetField(name string) error {
	switch name {
	case userpointdetail.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case userpointdetail.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case userpointdetail.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case userpointdetail.FieldUserID:
		m.ResetUserID()
		return nil
	case userpointdetail.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown UserPointDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPointDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPointDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPointDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPointDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPointDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPointDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPointDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserPointDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPointDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserPointDetail edge %s", name)
}

// UserWalletMutation represents an operation that mutates the UserWallet nodes in the graph.
type UserWalletMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	value         *int
	addvalue      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserWallet, error)
	predicates    []predicate.UserWallet
}

var _ ent.Mutation = (*UserWalletMutation)(nil)

// userwalletOption allows management of the mutation configuration using functional options.
type userwalletOption func(*UserWalletMutation)

// newUserWalletMutation creates new mutation for the UserWallet entity.
func newUserWalletMutation(c config, op Op, opts ...userwalletOption) *UserWalletMutation {
	m := &UserWalletMutation{
		config:        c,
		op:            op,
		typ:           TypeUserWallet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserWalletID sets the ID field of the mutation.
func withUserWalletID(id int64) userwalletOption {
	return func(m *UserWalletMutation) {
		var (
			err   error
			once  sync.Once
			value *UserWallet
		)
		m.oldValue = func(ctx context.Context) (*UserWallet, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserWallet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserWallet sets the old UserWallet of the mutation.
func withUserWallet(node *UserWallet) userwalletOption {
	return func(m *UserWalletMutation) {
		m.oldValue = func(context.Context) (*UserWallet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserWalletMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserWalletMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserWallet entities.
func (m *UserWalletMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserWalletMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *UserWalletMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserWalletMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserWalletMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserWalletMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserWalletMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserWalletMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserWalletMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserWalletMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserWalletMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[userwallet.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserWalletMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[userwallet.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserWalletMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, userwallet.FieldDeleteTime)
}

// SetValue sets the "value" field.
func (m *UserWalletMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *UserWalletMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *UserWalletMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *UserWalletMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *UserWalletMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// Where appends a list predicates to the UserWalletMutation builder.
func (m *UserWalletMutation) Where(ps ...predicate.UserWallet) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserWalletMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserWallet).
func (m *UserWalletMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserWalletMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, userwallet.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, userwallet.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, userwallet.FieldDeleteTime)
	}
	if m.value != nil {
		fields = append(fields, userwallet.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserWalletMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userwallet.FieldCreateTime:
		return m.CreateTime()
	case userwallet.FieldUpdateTime:
		return m.UpdateTime()
	case userwallet.FieldDeleteTime:
		return m.DeleteTime()
	case userwallet.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserWalletMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userwallet.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case userwallet.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case userwallet.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case userwallet.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown UserWallet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWalletMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userwallet.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case userwallet.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case userwallet.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case userwallet.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown UserWallet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserWalletMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, userwallet.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserWalletMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userwallet.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWalletMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userwallet.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown UserWallet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserWalletMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userwallet.FieldDeleteTime) {
		fields = append(fields, userwallet.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserWalletMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserWalletMutation) ClearField(name string) error {
	switch name {
	case userwallet.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown UserWallet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserWalletMutation) ResetField(name string) error {
	switch name {
	case userwallet.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case userwallet.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case userwallet.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case userwallet.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown UserWallet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserWalletMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserWalletMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserWalletMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserWalletMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserWalletMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserWalletMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserWalletMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserWallet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserWalletMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserWallet edge %s", name)
}

// UserWalletDetailMutation represents an operation that mutates the UserWalletDetail nodes in the graph.
type UserWalletDetailMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	description   *string
	_op           *int
	add_op        *int
	current       *int
	addcurrent    *int
	value         *int
	addvalue      *int
	_type         *int
	add_type      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserWalletDetail, error)
	predicates    []predicate.UserWalletDetail
}

var _ ent.Mutation = (*UserWalletDetailMutation)(nil)

// userwalletdetailOption allows management of the mutation configuration using functional options.
type userwalletdetailOption func(*UserWalletDetailMutation)

// newUserWalletDetailMutation creates new mutation for the UserWalletDetail entity.
func newUserWalletDetailMutation(c config, op Op, opts ...userwalletdetailOption) *UserWalletDetailMutation {
	m := &UserWalletDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeUserWalletDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserWalletDetailID sets the ID field of the mutation.
func withUserWalletDetailID(id int64) userwalletdetailOption {
	return func(m *UserWalletDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *UserWalletDetail
		)
		m.oldValue = func(ctx context.Context) (*UserWalletDetail, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserWalletDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserWalletDetail sets the old UserWalletDetail of the mutation.
func withUserWalletDetail(node *UserWalletDetail) userwalletdetailOption {
	return func(m *UserWalletDetailMutation) {
		m.oldValue = func(context.Context) (*UserWalletDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserWalletDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserWalletDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserWalletDetailMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *UserWalletDetailMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserWalletDetailMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserWalletDetail entity.
// If the UserWalletDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletDetailMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserWalletDetailMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserWalletDetailMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserWalletDetailMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserWalletDetail entity.
// If the UserWalletDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletDetailMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserWalletDetailMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserWalletDetailMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserWalletDetailMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the UserWalletDetail entity.
// If the UserWalletDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletDetailMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserWalletDetailMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[userwalletdetail.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserWalletDetailMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[userwalletdetail.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserWalletDetailMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, userwalletdetail.FieldDeleteTime)
}

// SetDescription sets the "description" field.
func (m *UserWalletDetailMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *UserWalletDetailMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the UserWalletDetail entity.
// If the UserWalletDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletDetailMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *UserWalletDetailMutation) ResetDescription() {
	m.description = nil
}

// SetOp sets the "op" field.
func (m *UserWalletDetailMutation) SetOp(i int) {
	m._op = &i
	m.add_op = nil
}

// GetOp returns the value of the "op" field in the mutation.
func (m *UserWalletDetailMutation) GetOp() (r int, exists bool) {
	v := m._op
	if v == nil {
		return
	}
	return *v, true
}

// OldOp returns the old "op" field's value of the UserWalletDetail entity.
// If the UserWalletDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletDetailMutation) OldOp(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOp: %w", err)
	}
	return oldValue.Op, nil
}

// AddOp adds i to the "op" field.
func (m *UserWalletDetailMutation) AddOp(i int) {
	if m.add_op != nil {
		*m.add_op += i
	} else {
		m.add_op = &i
	}
}

// AddedOp returns the value that was added to the "op" field in this mutation.
func (m *UserWalletDetailMutation) AddedOp() (r int, exists bool) {
	v := m.add_op
	if v == nil {
		return
	}
	return *v, true
}

// ResetOp resets all changes to the "op" field.
func (m *UserWalletDetailMutation) ResetOp() {
	m._op = nil
	m.add_op = nil
}

// SetCurrent sets the "current" field.
func (m *UserWalletDetailMutation) SetCurrent(i int) {
	m.current = &i
	m.addcurrent = nil
}

// Current returns the value of the "current" field in the mutation.
func (m *UserWalletDetailMutation) Current() (r int, exists bool) {
	v := m.current
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrent returns the old "current" field's value of the UserWalletDetail entity.
// If the UserWalletDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletDetailMutation) OldCurrent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrent: %w", err)
	}
	return oldValue.Current, nil
}

// AddCurrent adds i to the "current" field.
func (m *UserWalletDetailMutation) AddCurrent(i int) {
	if m.addcurrent != nil {
		*m.addcurrent += i
	} else {
		m.addcurrent = &i
	}
}

// AddedCurrent returns the value that was added to the "current" field in this mutation.
func (m *UserWalletDetailMutation) AddedCurrent() (r int, exists bool) {
	v := m.addcurrent
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrent resets all changes to the "current" field.
func (m *UserWalletDetailMutation) ResetCurrent() {
	m.current = nil
	m.addcurrent = nil
}

// SetValue sets the "value" field.
func (m *UserWalletDetailMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *UserWalletDetailMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the UserWalletDetail entity.
// If the UserWalletDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletDetailMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *UserWalletDetailMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *UserWalletDetailMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *UserWalletDetailMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetType sets the "type" field.
func (m *UserWalletDetailMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserWalletDetailMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the UserWalletDetail entity.
// If the UserWalletDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletDetailMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *UserWalletDetailMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *UserWalletDetailMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *UserWalletDetailMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// Where appends a list predicates to the UserWalletDetailMutation builder.
func (m *UserWalletDetailMutation) Where(ps ...predicate.UserWalletDetail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserWalletDetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserWalletDetail).
func (m *UserWalletDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserWalletDetailMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, userwalletdetail.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, userwalletdetail.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, userwalletdetail.FieldDeleteTime)
	}
	if m.description != nil {
		fields = append(fields, userwalletdetail.FieldDescription)
	}
	if m._op != nil {
		fields = append(fields, userwalletdetail.FieldOp)
	}
	if m.current != nil {
		fields = append(fields, userwalletdetail.FieldCurrent)
	}
	if m.value != nil {
		fields = append(fields, userwalletdetail.FieldValue)
	}
	if m._type != nil {
		fields = append(fields, userwalletdetail.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserWalletDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userwalletdetail.FieldCreateTime:
		return m.CreateTime()
	case userwalletdetail.FieldUpdateTime:
		return m.UpdateTime()
	case userwalletdetail.FieldDeleteTime:
		return m.DeleteTime()
	case userwalletdetail.FieldDescription:
		return m.Description()
	case userwalletdetail.FieldOp:
		return m.GetOp()
	case userwalletdetail.FieldCurrent:
		return m.Current()
	case userwalletdetail.FieldValue:
		return m.Value()
	case userwalletdetail.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserWalletDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userwalletdetail.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case userwalletdetail.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case userwalletdetail.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case userwalletdetail.FieldDescription:
		return m.OldDescription(ctx)
	case userwalletdetail.FieldOp:
		return m.OldOp(ctx)
	case userwalletdetail.FieldCurrent:
		return m.OldCurrent(ctx)
	case userwalletdetail.FieldValue:
		return m.OldValue(ctx)
	case userwalletdetail.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown UserWalletDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWalletDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userwalletdetail.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case userwalletdetail.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case userwalletdetail.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case userwalletdetail.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case userwalletdetail.FieldOp:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOp(v)
		return nil
	case userwalletdetail.FieldCurrent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrent(v)
		return nil
	case userwalletdetail.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case userwalletdetail.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown UserWalletDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserWalletDetailMutation) AddedFields() []string {
	var fields []string
	if m.add_op != nil {
		fields = append(fields, userwalletdetail.FieldOp)
	}
	if m.addcurrent != nil {
		fields = append(fields, userwalletdetail.FieldCurrent)
	}
	if m.addvalue != nil {
		fields = append(fields, userwalletdetail.FieldValue)
	}
	if m.add_type != nil {
		fields = append(fields, userwalletdetail.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserWalletDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userwalletdetail.FieldOp:
		return m.AddedOp()
	case userwalletdetail.FieldCurrent:
		return m.AddedCurrent()
	case userwalletdetail.FieldValue:
		return m.AddedValue()
	case userwalletdetail.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWalletDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userwalletdetail.FieldOp:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOp(v)
		return nil
	case userwalletdetail.FieldCurrent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrent(v)
		return nil
	case userwalletdetail.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	case userwalletdetail.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown UserWalletDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserWalletDetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userwalletdetail.FieldDeleteTime) {
		fields = append(fields, userwalletdetail.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserWalletDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserWalletDetailMutation) ClearField(name string) error {
	switch name {
	case userwalletdetail.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown UserWalletDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserWalletDetailMutation) ResetField(name string) error {
	switch name {
	case userwalletdetail.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case userwalletdetail.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case userwalletdetail.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case userwalletdetail.FieldDescription:
		m.ResetDescription()
		return nil
	case userwalletdetail.FieldOp:
		m.ResetOp()
		return nil
	case userwalletdetail.FieldCurrent:
		m.ResetCurrent()
		return nil
	case userwalletdetail.FieldValue:
		m.ResetValue()
		return nil
	case userwalletdetail.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown UserWalletDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserWalletDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserWalletDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserWalletDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserWalletDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserWalletDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserWalletDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserWalletDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserWalletDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserWalletDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserWalletDetail edge %s", name)
}
