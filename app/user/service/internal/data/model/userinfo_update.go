// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/app/user/service/internal/data/model/predicate"
	"mall-go/app/user/service/internal/data/model/userinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserInfoUpdate is the builder for updating UserInfo entities.
type UserInfoUpdate struct {
	config
	hooks    []Hook
	mutation *UserInfoMutation
}

// Where appends a list predicates to the UserInfoUpdate builder.
func (uiu *UserInfoUpdate) Where(ps ...predicate.UserInfo) *UserInfoUpdate {
	uiu.mutation.Where(ps...)
	return uiu
}

// SetUpdateTime sets the "update_time" field.
func (uiu *UserInfoUpdate) SetUpdateTime(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetUpdateTime(t)
	return uiu
}

// SetDeleteTime sets the "delete_time" field.
func (uiu *UserInfoUpdate) SetDeleteTime(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetDeleteTime(t)
	return uiu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableDeleteTime(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetDeleteTime(*t)
	}
	return uiu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (uiu *UserInfoUpdate) ClearDeleteTime() *UserInfoUpdate {
	uiu.mutation.ClearDeleteTime()
	return uiu
}

// SetNickname sets the "nickname" field.
func (uiu *UserInfoUpdate) SetNickname(s string) *UserInfoUpdate {
	uiu.mutation.SetNickname(s)
	return uiu
}

// SetPhone sets the "phone" field.
func (uiu *UserInfoUpdate) SetPhone(s string) *UserInfoUpdate {
	uiu.mutation.SetPhone(s)
	return uiu
}

// SetAvatar sets the "avatar" field.
func (uiu *UserInfoUpdate) SetAvatar(s string) *UserInfoUpdate {
	uiu.mutation.SetAvatar(s)
	return uiu
}

// SetWxProfile sets the "wx_profile" field.
func (uiu *UserInfoUpdate) SetWxProfile(s string) *UserInfoUpdate {
	uiu.mutation.SetWxProfile(s)
	return uiu
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiu *UserInfoUpdate) Mutation() *UserInfoMutation {
	return uiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiu *UserInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uiu.defaults()
	if len(uiu.hooks) == 0 {
		affected, err = uiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uiu.mutation = mutation
			affected, err = uiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uiu.hooks) - 1; i >= 0; i-- {
			if uiu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = uiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UserInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UserInfoUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UserInfoUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiu *UserInfoUpdate) defaults() {
	if _, ok := uiu.mutation.UpdateTime(); !ok {
		v := userinfo.UpdateDefaultUpdateTime()
		uiu.mutation.SetUpdateTime(v)
	}
}

func (uiu *UserInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userinfo.Table,
			Columns: userinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userinfo.FieldID,
			},
		},
	}
	if ps := uiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldUpdateTime,
		})
	}
	if value, ok := uiu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldDeleteTime,
		})
	}
	if uiu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userinfo.FieldDeleteTime,
		})
	}
	if value, ok := uiu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldNickname,
		})
	}
	if value, ok := uiu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldPhone,
		})
	}
	if value, ok := uiu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldAvatar,
		})
	}
	if value, ok := uiu.mutation.WxProfile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldWxProfile,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserInfoUpdateOne is the builder for updating a single UserInfo entity.
type UserInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserInfoMutation
}

// SetUpdateTime sets the "update_time" field.
func (uiuo *UserInfoUpdateOne) SetUpdateTime(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetUpdateTime(t)
	return uiuo
}

// SetDeleteTime sets the "delete_time" field.
func (uiuo *UserInfoUpdateOne) SetDeleteTime(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetDeleteTime(t)
	return uiuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableDeleteTime(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetDeleteTime(*t)
	}
	return uiuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (uiuo *UserInfoUpdateOne) ClearDeleteTime() *UserInfoUpdateOne {
	uiuo.mutation.ClearDeleteTime()
	return uiuo
}

// SetNickname sets the "nickname" field.
func (uiuo *UserInfoUpdateOne) SetNickname(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetNickname(s)
	return uiuo
}

// SetPhone sets the "phone" field.
func (uiuo *UserInfoUpdateOne) SetPhone(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetPhone(s)
	return uiuo
}

// SetAvatar sets the "avatar" field.
func (uiuo *UserInfoUpdateOne) SetAvatar(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetAvatar(s)
	return uiuo
}

// SetWxProfile sets the "wx_profile" field.
func (uiuo *UserInfoUpdateOne) SetWxProfile(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetWxProfile(s)
	return uiuo
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiuo *UserInfoUpdateOne) Mutation() *UserInfoMutation {
	return uiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiuo *UserInfoUpdateOne) Select(field string, fields ...string) *UserInfoUpdateOne {
	uiuo.fields = append([]string{field}, fields...)
	return uiuo
}

// Save executes the query and returns the updated UserInfo entity.
func (uiuo *UserInfoUpdateOne) Save(ctx context.Context) (*UserInfo, error) {
	var (
		err  error
		node *UserInfo
	)
	uiuo.defaults()
	if len(uiuo.hooks) == 0 {
		node, err = uiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uiuo.mutation = mutation
			node, err = uiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uiuo.hooks) - 1; i >= 0; i-- {
			if uiuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = uiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) SaveX(ctx context.Context) *UserInfo {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UserInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiuo *UserInfoUpdateOne) defaults() {
	if _, ok := uiuo.mutation.UpdateTime(); !ok {
		v := userinfo.UpdateDefaultUpdateTime()
		uiuo.mutation.SetUpdateTime(v)
	}
}

func (uiuo *UserInfoUpdateOne) sqlSave(ctx context.Context) (_node *UserInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userinfo.Table,
			Columns: userinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userinfo.FieldID,
			},
		},
	}
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinfo.FieldID)
		for _, f := range fields {
			if !userinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != userinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldUpdateTime,
		})
	}
	if value, ok := uiuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldDeleteTime,
		})
	}
	if uiuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userinfo.FieldDeleteTime,
		})
	}
	if value, ok := uiuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldNickname,
		})
	}
	if value, ok := uiuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldPhone,
		})
	}
	if value, ok := uiuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldAvatar,
		})
	}
	if value, ok := uiuo.mutation.WxProfile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldWxProfile,
		})
	}
	_node = &UserInfo{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
