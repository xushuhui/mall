// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"log"

	"mall-go/app/user/service/internal/data/model/migrate"

	"mall-go/app/user/service/internal/data/model/useridentiy"
	"mall-go/app/user/service/internal/data/model/userinfo"
	"mall-go/app/user/service/internal/data/model/userpoint"
	"mall-go/app/user/service/internal/data/model/userpointdetail"
	"mall-go/app/user/service/internal/data/model/userwallet"
	"mall-go/app/user/service/internal/data/model/userwalletdetail"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// UserIdentiy is the client for interacting with the UserIdentiy builders.
	UserIdentiy *UserIdentiyClient
	// UserInfo is the client for interacting with the UserInfo builders.
	UserInfo *UserInfoClient
	// UserPoint is the client for interacting with the UserPoint builders.
	UserPoint *UserPointClient
	// UserPointDetail is the client for interacting with the UserPointDetail builders.
	UserPointDetail *UserPointDetailClient
	// UserWallet is the client for interacting with the UserWallet builders.
	UserWallet *UserWalletClient
	// UserWalletDetail is the client for interacting with the UserWalletDetail builders.
	UserWalletDetail *UserWalletDetailClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.UserIdentiy = NewUserIdentiyClient(c.config)
	c.UserInfo = NewUserInfoClient(c.config)
	c.UserPoint = NewUserPointClient(c.config)
	c.UserPointDetail = NewUserPointDetailClient(c.config)
	c.UserWallet = NewUserWalletClient(c.config)
	c.UserWalletDetail = NewUserWalletDetailClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		UserIdentiy:      NewUserIdentiyClient(cfg),
		UserInfo:         NewUserInfoClient(cfg),
		UserPoint:        NewUserPointClient(cfg),
		UserPointDetail:  NewUserPointDetailClient(cfg),
		UserWallet:       NewUserWalletClient(cfg),
		UserWalletDetail: NewUserWalletDetailClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		UserIdentiy:      NewUserIdentiyClient(cfg),
		UserInfo:         NewUserInfoClient(cfg),
		UserPoint:        NewUserPointClient(cfg),
		UserPointDetail:  NewUserPointDetailClient(cfg),
		UserWallet:       NewUserWalletClient(cfg),
		UserWalletDetail: NewUserWalletDetailClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		UserIdentiy.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.UserIdentiy.Use(hooks...)
	c.UserInfo.Use(hooks...)
	c.UserPoint.Use(hooks...)
	c.UserPointDetail.Use(hooks...)
	c.UserWallet.Use(hooks...)
	c.UserWalletDetail.Use(hooks...)
}

// UserIdentiyClient is a client for the UserIdentiy schema.
type UserIdentiyClient struct {
	config
}

// NewUserIdentiyClient returns a client for the UserIdentiy from the given config.
func NewUserIdentiyClient(c config) *UserIdentiyClient {
	return &UserIdentiyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useridentiy.Hooks(f(g(h())))`.
func (c *UserIdentiyClient) Use(hooks ...Hook) {
	c.hooks.UserIdentiy = append(c.hooks.UserIdentiy, hooks...)
}

// Create returns a create builder for UserIdentiy.
func (c *UserIdentiyClient) Create() *UserIdentiyCreate {
	mutation := newUserIdentiyMutation(c.config, OpCreate)
	return &UserIdentiyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserIdentiy entities.
func (c *UserIdentiyClient) CreateBulk(builders ...*UserIdentiyCreate) *UserIdentiyCreateBulk {
	return &UserIdentiyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserIdentiy.
func (c *UserIdentiyClient) Update() *UserIdentiyUpdate {
	mutation := newUserIdentiyMutation(c.config, OpUpdate)
	return &UserIdentiyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserIdentiyClient) UpdateOne(ui *UserIdentiy) *UserIdentiyUpdateOne {
	mutation := newUserIdentiyMutation(c.config, OpUpdateOne, withUserIdentiy(ui))
	return &UserIdentiyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserIdentiyClient) UpdateOneID(id int64) *UserIdentiyUpdateOne {
	mutation := newUserIdentiyMutation(c.config, OpUpdateOne, withUserIdentiyID(id))
	return &UserIdentiyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserIdentiy.
func (c *UserIdentiyClient) Delete() *UserIdentiyDelete {
	mutation := newUserIdentiyMutation(c.config, OpDelete)
	return &UserIdentiyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserIdentiyClient) DeleteOne(ui *UserIdentiy) *UserIdentiyDeleteOne {
	return c.DeleteOneID(ui.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserIdentiyClient) DeleteOneID(id int64) *UserIdentiyDeleteOne {
	builder := c.Delete().Where(useridentiy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserIdentiyDeleteOne{builder}
}

// Query returns a query builder for UserIdentiy.
func (c *UserIdentiyClient) Query() *UserIdentiyQuery {
	return &UserIdentiyQuery{
		config: c.config,
	}
}

// Get returns a UserIdentiy entity by its id.
func (c *UserIdentiyClient) Get(ctx context.Context, id int64) (*UserIdentiy, error) {
	return c.Query().Where(useridentiy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserIdentiyClient) GetX(ctx context.Context, id int64) *UserIdentiy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserIdentiyClient) Hooks() []Hook {
	return c.hooks.UserIdentiy
}

// UserInfoClient is a client for the UserInfo schema.
type UserInfoClient struct {
	config
}

// NewUserInfoClient returns a client for the UserInfo from the given config.
func NewUserInfoClient(c config) *UserInfoClient {
	return &UserInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userinfo.Hooks(f(g(h())))`.
func (c *UserInfoClient) Use(hooks ...Hook) {
	c.hooks.UserInfo = append(c.hooks.UserInfo, hooks...)
}

// Create returns a create builder for UserInfo.
func (c *UserInfoClient) Create() *UserInfoCreate {
	mutation := newUserInfoMutation(c.config, OpCreate)
	return &UserInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserInfo entities.
func (c *UserInfoClient) CreateBulk(builders ...*UserInfoCreate) *UserInfoCreateBulk {
	return &UserInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserInfo.
func (c *UserInfoClient) Update() *UserInfoUpdate {
	mutation := newUserInfoMutation(c.config, OpUpdate)
	return &UserInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserInfoClient) UpdateOne(ui *UserInfo) *UserInfoUpdateOne {
	mutation := newUserInfoMutation(c.config, OpUpdateOne, withUserInfo(ui))
	return &UserInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserInfoClient) UpdateOneID(id int64) *UserInfoUpdateOne {
	mutation := newUserInfoMutation(c.config, OpUpdateOne, withUserInfoID(id))
	return &UserInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserInfo.
func (c *UserInfoClient) Delete() *UserInfoDelete {
	mutation := newUserInfoMutation(c.config, OpDelete)
	return &UserInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserInfoClient) DeleteOne(ui *UserInfo) *UserInfoDeleteOne {
	return c.DeleteOneID(ui.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserInfoClient) DeleteOneID(id int64) *UserInfoDeleteOne {
	builder := c.Delete().Where(userinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserInfoDeleteOne{builder}
}

// Query returns a query builder for UserInfo.
func (c *UserInfoClient) Query() *UserInfoQuery {
	return &UserInfoQuery{
		config: c.config,
	}
}

// Get returns a UserInfo entity by its id.
func (c *UserInfoClient) Get(ctx context.Context, id int64) (*UserInfo, error) {
	return c.Query().Where(userinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserInfoClient) GetX(ctx context.Context, id int64) *UserInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserInfoClient) Hooks() []Hook {
	return c.hooks.UserInfo
}

// UserPointClient is a client for the UserPoint schema.
type UserPointClient struct {
	config
}

// NewUserPointClient returns a client for the UserPoint from the given config.
func NewUserPointClient(c config) *UserPointClient {
	return &UserPointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpoint.Hooks(f(g(h())))`.
func (c *UserPointClient) Use(hooks ...Hook) {
	c.hooks.UserPoint = append(c.hooks.UserPoint, hooks...)
}

// Create returns a create builder for UserPoint.
func (c *UserPointClient) Create() *UserPointCreate {
	mutation := newUserPointMutation(c.config, OpCreate)
	return &UserPointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPoint entities.
func (c *UserPointClient) CreateBulk(builders ...*UserPointCreate) *UserPointCreateBulk {
	return &UserPointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPoint.
func (c *UserPointClient) Update() *UserPointUpdate {
	mutation := newUserPointMutation(c.config, OpUpdate)
	return &UserPointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPointClient) UpdateOne(up *UserPoint) *UserPointUpdateOne {
	mutation := newUserPointMutation(c.config, OpUpdateOne, withUserPoint(up))
	return &UserPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPointClient) UpdateOneID(id int64) *UserPointUpdateOne {
	mutation := newUserPointMutation(c.config, OpUpdateOne, withUserPointID(id))
	return &UserPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPoint.
func (c *UserPointClient) Delete() *UserPointDelete {
	mutation := newUserPointMutation(c.config, OpDelete)
	return &UserPointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserPointClient) DeleteOne(up *UserPoint) *UserPointDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserPointClient) DeleteOneID(id int64) *UserPointDeleteOne {
	builder := c.Delete().Where(userpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPointDeleteOne{builder}
}

// Query returns a query builder for UserPoint.
func (c *UserPointClient) Query() *UserPointQuery {
	return &UserPointQuery{
		config: c.config,
	}
}

// Get returns a UserPoint entity by its id.
func (c *UserPointClient) Get(ctx context.Context, id int64) (*UserPoint, error) {
	return c.Query().Where(userpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPointClient) GetX(ctx context.Context, id int64) *UserPoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserPointClient) Hooks() []Hook {
	return c.hooks.UserPoint
}

// UserPointDetailClient is a client for the UserPointDetail schema.
type UserPointDetailClient struct {
	config
}

// NewUserPointDetailClient returns a client for the UserPointDetail from the given config.
func NewUserPointDetailClient(c config) *UserPointDetailClient {
	return &UserPointDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpointdetail.Hooks(f(g(h())))`.
func (c *UserPointDetailClient) Use(hooks ...Hook) {
	c.hooks.UserPointDetail = append(c.hooks.UserPointDetail, hooks...)
}

// Create returns a create builder for UserPointDetail.
func (c *UserPointDetailClient) Create() *UserPointDetailCreate {
	mutation := newUserPointDetailMutation(c.config, OpCreate)
	return &UserPointDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPointDetail entities.
func (c *UserPointDetailClient) CreateBulk(builders ...*UserPointDetailCreate) *UserPointDetailCreateBulk {
	return &UserPointDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPointDetail.
func (c *UserPointDetailClient) Update() *UserPointDetailUpdate {
	mutation := newUserPointDetailMutation(c.config, OpUpdate)
	return &UserPointDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPointDetailClient) UpdateOne(upd *UserPointDetail) *UserPointDetailUpdateOne {
	mutation := newUserPointDetailMutation(c.config, OpUpdateOne, withUserPointDetail(upd))
	return &UserPointDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPointDetailClient) UpdateOneID(id int64) *UserPointDetailUpdateOne {
	mutation := newUserPointDetailMutation(c.config, OpUpdateOne, withUserPointDetailID(id))
	return &UserPointDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPointDetail.
func (c *UserPointDetailClient) Delete() *UserPointDetailDelete {
	mutation := newUserPointDetailMutation(c.config, OpDelete)
	return &UserPointDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserPointDetailClient) DeleteOne(upd *UserPointDetail) *UserPointDetailDeleteOne {
	return c.DeleteOneID(upd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserPointDetailClient) DeleteOneID(id int64) *UserPointDetailDeleteOne {
	builder := c.Delete().Where(userpointdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPointDetailDeleteOne{builder}
}

// Query returns a query builder for UserPointDetail.
func (c *UserPointDetailClient) Query() *UserPointDetailQuery {
	return &UserPointDetailQuery{
		config: c.config,
	}
}

// Get returns a UserPointDetail entity by its id.
func (c *UserPointDetailClient) Get(ctx context.Context, id int64) (*UserPointDetail, error) {
	return c.Query().Where(userpointdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPointDetailClient) GetX(ctx context.Context, id int64) *UserPointDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserPointDetailClient) Hooks() []Hook {
	return c.hooks.UserPointDetail
}

// UserWalletClient is a client for the UserWallet schema.
type UserWalletClient struct {
	config
}

// NewUserWalletClient returns a client for the UserWallet from the given config.
func NewUserWalletClient(c config) *UserWalletClient {
	return &UserWalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userwallet.Hooks(f(g(h())))`.
func (c *UserWalletClient) Use(hooks ...Hook) {
	c.hooks.UserWallet = append(c.hooks.UserWallet, hooks...)
}

// Create returns a create builder for UserWallet.
func (c *UserWalletClient) Create() *UserWalletCreate {
	mutation := newUserWalletMutation(c.config, OpCreate)
	return &UserWalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserWallet entities.
func (c *UserWalletClient) CreateBulk(builders ...*UserWalletCreate) *UserWalletCreateBulk {
	return &UserWalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserWallet.
func (c *UserWalletClient) Update() *UserWalletUpdate {
	mutation := newUserWalletMutation(c.config, OpUpdate)
	return &UserWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserWalletClient) UpdateOne(uw *UserWallet) *UserWalletUpdateOne {
	mutation := newUserWalletMutation(c.config, OpUpdateOne, withUserWallet(uw))
	return &UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserWalletClient) UpdateOneID(id int64) *UserWalletUpdateOne {
	mutation := newUserWalletMutation(c.config, OpUpdateOne, withUserWalletID(id))
	return &UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserWallet.
func (c *UserWalletClient) Delete() *UserWalletDelete {
	mutation := newUserWalletMutation(c.config, OpDelete)
	return &UserWalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserWalletClient) DeleteOne(uw *UserWallet) *UserWalletDeleteOne {
	return c.DeleteOneID(uw.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserWalletClient) DeleteOneID(id int64) *UserWalletDeleteOne {
	builder := c.Delete().Where(userwallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserWalletDeleteOne{builder}
}

// Query returns a query builder for UserWallet.
func (c *UserWalletClient) Query() *UserWalletQuery {
	return &UserWalletQuery{
		config: c.config,
	}
}

// Get returns a UserWallet entity by its id.
func (c *UserWalletClient) Get(ctx context.Context, id int64) (*UserWallet, error) {
	return c.Query().Where(userwallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserWalletClient) GetX(ctx context.Context, id int64) *UserWallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserWalletClient) Hooks() []Hook {
	return c.hooks.UserWallet
}

// UserWalletDetailClient is a client for the UserWalletDetail schema.
type UserWalletDetailClient struct {
	config
}

// NewUserWalletDetailClient returns a client for the UserWalletDetail from the given config.
func NewUserWalletDetailClient(c config) *UserWalletDetailClient {
	return &UserWalletDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userwalletdetail.Hooks(f(g(h())))`.
func (c *UserWalletDetailClient) Use(hooks ...Hook) {
	c.hooks.UserWalletDetail = append(c.hooks.UserWalletDetail, hooks...)
}

// Create returns a create builder for UserWalletDetail.
func (c *UserWalletDetailClient) Create() *UserWalletDetailCreate {
	mutation := newUserWalletDetailMutation(c.config, OpCreate)
	return &UserWalletDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserWalletDetail entities.
func (c *UserWalletDetailClient) CreateBulk(builders ...*UserWalletDetailCreate) *UserWalletDetailCreateBulk {
	return &UserWalletDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserWalletDetail.
func (c *UserWalletDetailClient) Update() *UserWalletDetailUpdate {
	mutation := newUserWalletDetailMutation(c.config, OpUpdate)
	return &UserWalletDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserWalletDetailClient) UpdateOne(uwd *UserWalletDetail) *UserWalletDetailUpdateOne {
	mutation := newUserWalletDetailMutation(c.config, OpUpdateOne, withUserWalletDetail(uwd))
	return &UserWalletDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserWalletDetailClient) UpdateOneID(id int64) *UserWalletDetailUpdateOne {
	mutation := newUserWalletDetailMutation(c.config, OpUpdateOne, withUserWalletDetailID(id))
	return &UserWalletDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserWalletDetail.
func (c *UserWalletDetailClient) Delete() *UserWalletDetailDelete {
	mutation := newUserWalletDetailMutation(c.config, OpDelete)
	return &UserWalletDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserWalletDetailClient) DeleteOne(uwd *UserWalletDetail) *UserWalletDetailDeleteOne {
	return c.DeleteOneID(uwd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserWalletDetailClient) DeleteOneID(id int64) *UserWalletDetailDeleteOne {
	builder := c.Delete().Where(userwalletdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserWalletDetailDeleteOne{builder}
}

// Query returns a query builder for UserWalletDetail.
func (c *UserWalletDetailClient) Query() *UserWalletDetailQuery {
	return &UserWalletDetailQuery{
		config: c.config,
	}
}

// Get returns a UserWalletDetail entity by its id.
func (c *UserWalletDetailClient) Get(ctx context.Context, id int64) (*UserWalletDetail, error) {
	return c.Query().Where(userwalletdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserWalletDetailClient) GetX(ctx context.Context, id int64) *UserWalletDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserWalletDetailClient) Hooks() []Hook {
	return c.hooks.UserWalletDetail
}
