// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/user/service/internal/data/model/predicate"
	"mall-go/app/user/service/internal/data/model/userpoint"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPointUpdate is the builder for updating UserPoint entities.
type UserPointUpdate struct {
	config
	hooks    []Hook
	mutation *UserPointMutation
}

// Where appends a list predicates to the UserPointUpdate builder.
func (upu *UserPointUpdate) Where(ps ...predicate.UserPoint) *UserPointUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUpdateTime sets the "update_time" field.
func (upu *UserPointUpdate) SetUpdateTime(t time.Time) *UserPointUpdate {
	upu.mutation.SetUpdateTime(t)
	return upu
}

// SetDeleteTime sets the "delete_time" field.
func (upu *UserPointUpdate) SetDeleteTime(t time.Time) *UserPointUpdate {
	upu.mutation.SetDeleteTime(t)
	return upu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (upu *UserPointUpdate) SetNillableDeleteTime(t *time.Time) *UserPointUpdate {
	if t != nil {
		upu.SetDeleteTime(*t)
	}
	return upu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (upu *UserPointUpdate) ClearDeleteTime() *UserPointUpdate {
	upu.mutation.ClearDeleteTime()
	return upu
}

// SetValue sets the "value" field.
func (upu *UserPointUpdate) SetValue(i int) *UserPointUpdate {
	upu.mutation.ResetValue()
	upu.mutation.SetValue(i)
	return upu
}

// AddValue adds i to the "value" field.
func (upu *UserPointUpdate) AddValue(i int) *UserPointUpdate {
	upu.mutation.AddValue(i)
	return upu
}

// SetStatus sets the "status" field.
func (upu *UserPointUpdate) SetStatus(i int) *UserPointUpdate {
	upu.mutation.ResetStatus()
	upu.mutation.SetStatus(i)
	return upu
}

// AddStatus adds i to the "status" field.
func (upu *UserPointUpdate) AddStatus(i int) *UserPointUpdate {
	upu.mutation.AddStatus(i)
	return upu
}

// Mutation returns the UserPointMutation object of the builder.
func (upu *UserPointUpdate) Mutation() *UserPointMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPointUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	upu.defaults()
	if len(upu.hooks) == 0 {
		affected, err = upu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			upu.mutation = mutation
			affected, err = upu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(upu.hooks) - 1; i >= 0; i-- {
			if upu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = upu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPointUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPointUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPointUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UserPointUpdate) defaults() {
	if _, ok := upu.mutation.UpdateTime(); !ok {
		v := userpoint.UpdateDefaultUpdateTime()
		upu.mutation.SetUpdateTime(v)
	}
}

func (upu *UserPointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpoint.Table,
			Columns: userpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userpoint.FieldID,
			},
		},
	}
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpoint.FieldUpdateTime,
		})
	}
	if value, ok := upu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpoint.FieldDeleteTime,
		})
	}
	if upu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userpoint.FieldDeleteTime,
		})
	}
	if value, ok := upu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpoint.FieldValue,
		})
	}
	if value, ok := upu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpoint.FieldValue,
		})
	}
	if value, ok := upu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpoint.FieldStatus,
		})
	}
	if value, ok := upu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpoint.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserPointUpdateOne is the builder for updating a single UserPoint entity.
type UserPointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPointMutation
}

// SetUpdateTime sets the "update_time" field.
func (upuo *UserPointUpdateOne) SetUpdateTime(t time.Time) *UserPointUpdateOne {
	upuo.mutation.SetUpdateTime(t)
	return upuo
}

// SetDeleteTime sets the "delete_time" field.
func (upuo *UserPointUpdateOne) SetDeleteTime(t time.Time) *UserPointUpdateOne {
	upuo.mutation.SetDeleteTime(t)
	return upuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (upuo *UserPointUpdateOne) SetNillableDeleteTime(t *time.Time) *UserPointUpdateOne {
	if t != nil {
		upuo.SetDeleteTime(*t)
	}
	return upuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (upuo *UserPointUpdateOne) ClearDeleteTime() *UserPointUpdateOne {
	upuo.mutation.ClearDeleteTime()
	return upuo
}

// SetValue sets the "value" field.
func (upuo *UserPointUpdateOne) SetValue(i int) *UserPointUpdateOne {
	upuo.mutation.ResetValue()
	upuo.mutation.SetValue(i)
	return upuo
}

// AddValue adds i to the "value" field.
func (upuo *UserPointUpdateOne) AddValue(i int) *UserPointUpdateOne {
	upuo.mutation.AddValue(i)
	return upuo
}

// SetStatus sets the "status" field.
func (upuo *UserPointUpdateOne) SetStatus(i int) *UserPointUpdateOne {
	upuo.mutation.ResetStatus()
	upuo.mutation.SetStatus(i)
	return upuo
}

// AddStatus adds i to the "status" field.
func (upuo *UserPointUpdateOne) AddStatus(i int) *UserPointUpdateOne {
	upuo.mutation.AddStatus(i)
	return upuo
}

// Mutation returns the UserPointMutation object of the builder.
func (upuo *UserPointUpdateOne) Mutation() *UserPointMutation {
	return upuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPointUpdateOne) Select(field string, fields ...string) *UserPointUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPoint entity.
func (upuo *UserPointUpdateOne) Save(ctx context.Context) (*UserPoint, error) {
	var (
		err  error
		node *UserPoint
	)
	upuo.defaults()
	if len(upuo.hooks) == 0 {
		node, err = upuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			upuo.mutation = mutation
			node, err = upuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upuo.hooks) - 1; i >= 0; i-- {
			if upuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = upuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPointUpdateOne) SaveX(ctx context.Context) *UserPoint {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPointUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPointUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UserPointUpdateOne) defaults() {
	if _, ok := upuo.mutation.UpdateTime(); !ok {
		v := userpoint.UpdateDefaultUpdateTime()
		upuo.mutation.SetUpdateTime(v)
	}
}

func (upuo *UserPointUpdateOne) sqlSave(ctx context.Context) (_node *UserPoint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpoint.Table,
			Columns: userpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userpoint.FieldID,
			},
		},
	}
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "UserPoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpoint.FieldID)
		for _, f := range fields {
			if !userpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != userpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpoint.FieldUpdateTime,
		})
	}
	if value, ok := upuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpoint.FieldDeleteTime,
		})
	}
	if upuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userpoint.FieldDeleteTime,
		})
	}
	if value, ok := upuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpoint.FieldValue,
		})
	}
	if value, ok := upuo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpoint.FieldValue,
		})
	}
	if value, ok := upuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpoint.FieldStatus,
		})
	}
	if value, ok := upuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userpoint.FieldStatus,
		})
	}
	_node = &UserPoint{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
