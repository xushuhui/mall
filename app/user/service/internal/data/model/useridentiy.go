// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/user/service/internal/data/model/useridentiy"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserIdentiy is the model entity for the UserIdentiy schema.
type UserIdentiy struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int64 `json:"user_id,omitempty"`
	// IdentityType holds the value of the "identity_type" field.
	// phone,weapp
	IdentityType string `json:"identity_type,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// Credential holds the value of the "credential" field.
	Credential string `json:"credential,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserIdentiy) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case useridentiy.FieldID, useridentiy.FieldUserID:
			values[i] = new(sql.NullInt64)
		case useridentiy.FieldIdentityType, useridentiy.FieldIdentifier, useridentiy.FieldCredential:
			values[i] = new(sql.NullString)
		case useridentiy.FieldCreateTime, useridentiy.FieldUpdateTime, useridentiy.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserIdentiy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserIdentiy fields.
func (ui *UserIdentiy) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useridentiy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ui.ID = int64(value.Int64)
		case useridentiy.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ui.CreateTime = value.Time
			}
		case useridentiy.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ui.UpdateTime = value.Time
			}
		case useridentiy.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				ui.DeleteTime = value.Time
			}
		case useridentiy.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ui.UserID = value.Int64
			}
		case useridentiy.FieldIdentityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identity_type", values[i])
			} else if value.Valid {
				ui.IdentityType = value.String
			}
		case useridentiy.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				ui.Identifier = value.String
			}
		case useridentiy.FieldCredential:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credential", values[i])
			} else if value.Valid {
				ui.Credential = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserIdentiy.
// Note that you need to call UserIdentiy.Unwrap() before calling this method if this UserIdentiy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ui *UserIdentiy) Update() *UserIdentiyUpdateOne {
	return (&UserIdentiyClient{config: ui.config}).UpdateOne(ui)
}

// Unwrap unwraps the UserIdentiy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ui *UserIdentiy) Unwrap() *UserIdentiy {
	tx, ok := ui.config.driver.(*txDriver)
	if !ok {
		panic("model: UserIdentiy is not a transactional entity")
	}
	ui.config.driver = tx.drv
	return ui
}

// String implements the fmt.Stringer.
func (ui *UserIdentiy) String() string {
	var builder strings.Builder
	builder.WriteString("UserIdentiy(")
	builder.WriteString(fmt.Sprintf("id=%v", ui.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ui.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ui.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(ui.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ui.UserID))
	builder.WriteString(", identity_type=")
	builder.WriteString(ui.IdentityType)
	builder.WriteString(", identifier=")
	builder.WriteString(ui.Identifier)
	builder.WriteString(", credential=")
	builder.WriteString(ui.Credential)
	builder.WriteByte(')')
	return builder.String()
}

// UserIdentiys is a parsable slice of UserIdentiy.
type UserIdentiys []*UserIdentiy

func (ui UserIdentiys) config(cfg config) {
	for _i := range ui {
		ui[_i].config = cfg
	}
}
