// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/user/service/internal/data/model/userwallet"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserWalletCreate is the builder for creating a UserWallet entity.
type UserWalletCreate struct {
	config
	mutation *UserWalletMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (uwc *UserWalletCreate) SetCreateTime(t time.Time) *UserWalletCreate {
	uwc.mutation.SetCreateTime(t)
	return uwc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uwc *UserWalletCreate) SetNillableCreateTime(t *time.Time) *UserWalletCreate {
	if t != nil {
		uwc.SetCreateTime(*t)
	}
	return uwc
}

// SetUpdateTime sets the "update_time" field.
func (uwc *UserWalletCreate) SetUpdateTime(t time.Time) *UserWalletCreate {
	uwc.mutation.SetUpdateTime(t)
	return uwc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uwc *UserWalletCreate) SetNillableUpdateTime(t *time.Time) *UserWalletCreate {
	if t != nil {
		uwc.SetUpdateTime(*t)
	}
	return uwc
}

// SetDeleteTime sets the "delete_time" field.
func (uwc *UserWalletCreate) SetDeleteTime(t time.Time) *UserWalletCreate {
	uwc.mutation.SetDeleteTime(t)
	return uwc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uwc *UserWalletCreate) SetNillableDeleteTime(t *time.Time) *UserWalletCreate {
	if t != nil {
		uwc.SetDeleteTime(*t)
	}
	return uwc
}

// SetValue sets the "value" field.
func (uwc *UserWalletCreate) SetValue(i int) *UserWalletCreate {
	uwc.mutation.SetValue(i)
	return uwc
}

// SetID sets the "id" field.
func (uwc *UserWalletCreate) SetID(i int64) *UserWalletCreate {
	uwc.mutation.SetID(i)
	return uwc
}

// Mutation returns the UserWalletMutation object of the builder.
func (uwc *UserWalletCreate) Mutation() *UserWalletMutation {
	return uwc.mutation
}

// Save creates the UserWallet in the database.
func (uwc *UserWalletCreate) Save(ctx context.Context) (*UserWallet, error) {
	var (
		err  error
		node *UserWallet
	)
	uwc.defaults()
	if len(uwc.hooks) == 0 {
		if err = uwc.check(); err != nil {
			return nil, err
		}
		node, err = uwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uwc.check(); err != nil {
				return nil, err
			}
			uwc.mutation = mutation
			if node, err = uwc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uwc.hooks) - 1; i >= 0; i-- {
			if uwc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = uwc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uwc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uwc *UserWalletCreate) SaveX(ctx context.Context) *UserWallet {
	v, err := uwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwc *UserWalletCreate) Exec(ctx context.Context) error {
	_, err := uwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwc *UserWalletCreate) ExecX(ctx context.Context) {
	if err := uwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwc *UserWalletCreate) defaults() {
	if _, ok := uwc.mutation.CreateTime(); !ok {
		v := userwallet.DefaultCreateTime()
		uwc.mutation.SetCreateTime(v)
	}
	if _, ok := uwc.mutation.UpdateTime(); !ok {
		v := userwallet.DefaultUpdateTime()
		uwc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwc *UserWalletCreate) check() error {
	if _, ok := uwc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "create_time"`)}
	}
	if _, ok := uwc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "update_time"`)}
	}
	if _, ok := uwc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`model: missing required field "value"`)}
	}
	return nil
}

func (uwc *UserWalletCreate) sqlSave(ctx context.Context) (*UserWallet, error) {
	_node, _spec := uwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (uwc *UserWalletCreate) createSpec() (*UserWallet, *sqlgraph.CreateSpec) {
	var (
		_node = &UserWallet{config: uwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userwallet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userwallet.FieldID,
			},
		}
	)
	if id, ok := uwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uwc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := uwc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := uwc.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := uwc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldValue,
		})
		_node.Value = value
	}
	return _node, _spec
}

// UserWalletCreateBulk is the builder for creating many UserWallet entities in bulk.
type UserWalletCreateBulk struct {
	config
	builders []*UserWalletCreate
}

// Save creates the UserWallet entities in the database.
func (uwcb *UserWalletCreateBulk) Save(ctx context.Context) ([]*UserWallet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uwcb.builders))
	nodes := make([]*UserWallet, len(uwcb.builders))
	mutators := make([]Mutator, len(uwcb.builders))
	for i := range uwcb.builders {
		func(i int, root context.Context) {
			builder := uwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserWalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uwcb *UserWalletCreateBulk) SaveX(ctx context.Context) []*UserWallet {
	v, err := uwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwcb *UserWalletCreateBulk) Exec(ctx context.Context) error {
	_, err := uwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwcb *UserWalletCreateBulk) ExecX(ctx context.Context) {
	if err := uwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
