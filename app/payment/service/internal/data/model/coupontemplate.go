// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"mall-go/app/payment/service/internal/data/model/coupontemplate"

	"entgo.io/ent/dialect/sql"
)

// CouponTemplate is the model entity for the CouponTemplate schema.
type CouponTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// FullMoney holds the value of the "full_money" field.
	FullMoney float64 `json:"full_money,omitempty"`
	// Minus holds the value of the "minus" field.
	Minus float64 `json:"minus,omitempty"`
	// Discount holds the value of the "discount" field.
	// 国内多是打折，国外多是百分比 off
	Discount float64 `json:"discount,omitempty"`
	// Type holds the value of the "type" field.
	// 1. 满减券 2.折扣券 3.无门槛券 4.满金额折扣券
	Type int `json:"type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coupontemplate.FieldFullMoney, coupontemplate.FieldMinus, coupontemplate.FieldDiscount:
			values[i] = new(sql.NullFloat64)
		case coupontemplate.FieldID, coupontemplate.FieldType:
			values[i] = new(sql.NullInt64)
		case coupontemplate.FieldTitle, coupontemplate.FieldDescription:
			values[i] = new(sql.NullString)
		case coupontemplate.FieldCreateTime, coupontemplate.FieldUpdateTime, coupontemplate.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CouponTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponTemplate fields.
func (ct *CouponTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coupontemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = int64(value.Int64)
		case coupontemplate.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ct.CreateTime = value.Time
			}
		case coupontemplate.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ct.UpdateTime = value.Time
			}
		case coupontemplate.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				ct.DeleteTime = value.Time
			}
		case coupontemplate.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ct.Title = value.String
			}
		case coupontemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ct.Description = value.String
			}
		case coupontemplate.FieldFullMoney:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field full_money", values[i])
			} else if value.Valid {
				ct.FullMoney = value.Float64
			}
		case coupontemplate.FieldMinus:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field minus", values[i])
			} else if value.Valid {
				ct.Minus = value.Float64
			}
		case coupontemplate.FieldDiscount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount", values[i])
			} else if value.Valid {
				ct.Discount = value.Float64
			}
		case coupontemplate.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ct.Type = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CouponTemplate.
// Note that you need to call CouponTemplate.Unwrap() before calling this method if this CouponTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CouponTemplate) Update() *CouponTemplateUpdateOne {
	return (&CouponTemplateClient{config: ct.config}).UpdateOne(ct)
}

// Unwrap unwraps the CouponTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CouponTemplate) Unwrap() *CouponTemplate {
	tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("model: CouponTemplate is not a transactional entity")
	}
	ct.config.driver = tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CouponTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("CouponTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", ct.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ct.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ct.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(ct.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(ct.Title)
	builder.WriteString(", description=")
	builder.WriteString(ct.Description)
	builder.WriteString(", full_money=")
	builder.WriteString(fmt.Sprintf("%v", ct.FullMoney))
	builder.WriteString(", minus=")
	builder.WriteString(fmt.Sprintf("%v", ct.Minus))
	builder.WriteString(", discount=")
	builder.WriteString(fmt.Sprintf("%v", ct.Discount))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", ct.Type))
	builder.WriteByte(')')
	return builder.String()
}

// CouponTemplates is a parsable slice of CouponTemplate.
type CouponTemplates []*CouponTemplate

func (ct CouponTemplates) config(cfg config) {
	for _i := range ct {
		ct[_i].config = cfg
	}
}
