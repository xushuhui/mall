// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/app/sku/service/internal/data/model/predicate"
	"mall-go/app/sku/service/internal/data/model/specvalue"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpecValueUpdate is the builder for updating SpecValue entities.
type SpecValueUpdate struct {
	config
	hooks    []Hook
	mutation *SpecValueMutation
}

// Where appends a list predicates to the SpecValueUpdate builder.
func (svu *SpecValueUpdate) Where(ps ...predicate.SpecValue) *SpecValueUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetUpdateTime sets the "update_time" field.
func (svu *SpecValueUpdate) SetUpdateTime(t time.Time) *SpecValueUpdate {
	svu.mutation.SetUpdateTime(t)
	return svu
}

// SetDeleteTime sets the "delete_time" field.
func (svu *SpecValueUpdate) SetDeleteTime(t time.Time) *SpecValueUpdate {
	svu.mutation.SetDeleteTime(t)
	return svu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (svu *SpecValueUpdate) SetNillableDeleteTime(t *time.Time) *SpecValueUpdate {
	if t != nil {
		svu.SetDeleteTime(*t)
	}
	return svu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (svu *SpecValueUpdate) ClearDeleteTime() *SpecValueUpdate {
	svu.mutation.ClearDeleteTime()
	return svu
}

// SetValue sets the "value" field.
func (svu *SpecValueUpdate) SetValue(s string) *SpecValueUpdate {
	svu.mutation.SetValue(s)
	return svu
}

// SetSpecID sets the "spec_id" field.
func (svu *SpecValueUpdate) SetSpecID(i int64) *SpecValueUpdate {
	svu.mutation.ResetSpecID()
	svu.mutation.SetSpecID(i)
	return svu
}

// AddSpecID adds i to the "spec_id" field.
func (svu *SpecValueUpdate) AddSpecID(i int64) *SpecValueUpdate {
	svu.mutation.AddSpecID(i)
	return svu
}

// SetExtend sets the "extend" field.
func (svu *SpecValueUpdate) SetExtend(s string) *SpecValueUpdate {
	svu.mutation.SetExtend(s)
	return svu
}

// Mutation returns the SpecValueMutation object of the builder.
func (svu *SpecValueUpdate) Mutation() *SpecValueMutation {
	return svu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SpecValueUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	svu.defaults()
	if len(svu.hooks) == 0 {
		affected, err = svu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			svu.mutation = mutation
			affected, err = svu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(svu.hooks) - 1; i >= 0; i-- {
			if svu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = svu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, svu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SpecValueUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SpecValueUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SpecValueUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svu *SpecValueUpdate) defaults() {
	if _, ok := svu.mutation.UpdateTime(); !ok {
		v := specvalue.UpdateDefaultUpdateTime()
		svu.mutation.SetUpdateTime(v)
	}
}

func (svu *SpecValueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   specvalue.Table,
			Columns: specvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: specvalue.FieldID,
			},
		},
	}
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: specvalue.FieldUpdateTime,
		})
	}
	if value, ok := svu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: specvalue.FieldDeleteTime,
		})
	}
	if svu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: specvalue.FieldDeleteTime,
		})
	}
	if value, ok := svu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specvalue.FieldValue,
		})
	}
	if value, ok := svu.mutation.SpecID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: specvalue.FieldSpecID,
		})
	}
	if value, ok := svu.mutation.AddedSpecID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: specvalue.FieldSpecID,
		})
	}
	if value, ok := svu.mutation.Extend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specvalue.FieldExtend,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SpecValueUpdateOne is the builder for updating a single SpecValue entity.
type SpecValueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpecValueMutation
}

// SetUpdateTime sets the "update_time" field.
func (svuo *SpecValueUpdateOne) SetUpdateTime(t time.Time) *SpecValueUpdateOne {
	svuo.mutation.SetUpdateTime(t)
	return svuo
}

// SetDeleteTime sets the "delete_time" field.
func (svuo *SpecValueUpdateOne) SetDeleteTime(t time.Time) *SpecValueUpdateOne {
	svuo.mutation.SetDeleteTime(t)
	return svuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (svuo *SpecValueUpdateOne) SetNillableDeleteTime(t *time.Time) *SpecValueUpdateOne {
	if t != nil {
		svuo.SetDeleteTime(*t)
	}
	return svuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (svuo *SpecValueUpdateOne) ClearDeleteTime() *SpecValueUpdateOne {
	svuo.mutation.ClearDeleteTime()
	return svuo
}

// SetValue sets the "value" field.
func (svuo *SpecValueUpdateOne) SetValue(s string) *SpecValueUpdateOne {
	svuo.mutation.SetValue(s)
	return svuo
}

// SetSpecID sets the "spec_id" field.
func (svuo *SpecValueUpdateOne) SetSpecID(i int64) *SpecValueUpdateOne {
	svuo.mutation.ResetSpecID()
	svuo.mutation.SetSpecID(i)
	return svuo
}

// AddSpecID adds i to the "spec_id" field.
func (svuo *SpecValueUpdateOne) AddSpecID(i int64) *SpecValueUpdateOne {
	svuo.mutation.AddSpecID(i)
	return svuo
}

// SetExtend sets the "extend" field.
func (svuo *SpecValueUpdateOne) SetExtend(s string) *SpecValueUpdateOne {
	svuo.mutation.SetExtend(s)
	return svuo
}

// Mutation returns the SpecValueMutation object of the builder.
func (svuo *SpecValueUpdateOne) Mutation() *SpecValueMutation {
	return svuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SpecValueUpdateOne) Select(field string, fields ...string) *SpecValueUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SpecValue entity.
func (svuo *SpecValueUpdateOne) Save(ctx context.Context) (*SpecValue, error) {
	var (
		err  error
		node *SpecValue
	)
	svuo.defaults()
	if len(svuo.hooks) == 0 {
		node, err = svuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			svuo.mutation = mutation
			node, err = svuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(svuo.hooks) - 1; i >= 0; i-- {
			if svuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = svuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, svuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SpecValueUpdateOne) SaveX(ctx context.Context) *SpecValue {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SpecValueUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SpecValueUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svuo *SpecValueUpdateOne) defaults() {
	if _, ok := svuo.mutation.UpdateTime(); !ok {
		v := specvalue.UpdateDefaultUpdateTime()
		svuo.mutation.SetUpdateTime(v)
	}
}

func (svuo *SpecValueUpdateOne) sqlSave(ctx context.Context) (_node *SpecValue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   specvalue.Table,
			Columns: specvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: specvalue.FieldID,
			},
		},
	}
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SpecValue.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, specvalue.FieldID)
		for _, f := range fields {
			if !specvalue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != specvalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: specvalue.FieldUpdateTime,
		})
	}
	if value, ok := svuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: specvalue.FieldDeleteTime,
		})
	}
	if svuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: specvalue.FieldDeleteTime,
		})
	}
	if value, ok := svuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specvalue.FieldValue,
		})
	}
	if value, ok := svuo.mutation.SpecID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: specvalue.FieldSpecID,
		})
	}
	if value, ok := svuo.mutation.AddedSpecID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: specvalue.FieldSpecID,
		})
	}
	if value, ok := svuo.mutation.Extend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specvalue.FieldExtend,
		})
	}
	_node = &SpecValue{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
