// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/sku/service/internal/data/model/specvalue"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SpecValue is the model entity for the SpecValue schema.
type SpecValue struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// SpecID holds the value of the "spec_id" field.
	SpecID int64 `json:"spec_id,omitempty"`
	// Extend holds the value of the "extend" field.
	Extend string `json:"extend,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpecValue) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case specvalue.FieldID, specvalue.FieldSpecID:
			values[i] = new(sql.NullInt64)
		case specvalue.FieldValue, specvalue.FieldExtend:
			values[i] = new(sql.NullString)
		case specvalue.FieldCreateTime, specvalue.FieldUpdateTime, specvalue.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SpecValue", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpecValue fields.
func (sv *SpecValue) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case specvalue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sv.ID = int64(value.Int64)
		case specvalue.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sv.CreateTime = value.Time
			}
		case specvalue.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sv.UpdateTime = value.Time
			}
		case specvalue.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				sv.DeleteTime = value.Time
			}
		case specvalue.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				sv.Value = value.String
			}
		case specvalue.FieldSpecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spec_id", values[i])
			} else if value.Valid {
				sv.SpecID = value.Int64
			}
		case specvalue.FieldExtend:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extend", values[i])
			} else if value.Valid {
				sv.Extend = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SpecValue.
// Note that you need to call SpecValue.Unwrap() before calling this method if this SpecValue
// was returned from a transaction, and the transaction was committed or rolled back.
func (sv *SpecValue) Update() *SpecValueUpdateOne {
	return (&SpecValueClient{config: sv.config}).UpdateOne(sv)
}

// Unwrap unwraps the SpecValue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sv *SpecValue) Unwrap() *SpecValue {
	tx, ok := sv.config.driver.(*txDriver)
	if !ok {
		panic("model: SpecValue is not a transactional entity")
	}
	sv.config.driver = tx.drv
	return sv
}

// String implements the fmt.Stringer.
func (sv *SpecValue) String() string {
	var builder strings.Builder
	builder.WriteString("SpecValue(")
	builder.WriteString(fmt.Sprintf("id=%v", sv.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sv.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sv.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(sv.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", value=")
	builder.WriteString(sv.Value)
	builder.WriteString(", spec_id=")
	builder.WriteString(fmt.Sprintf("%v", sv.SpecID))
	builder.WriteString(", extend=")
	builder.WriteString(sv.Extend)
	builder.WriteByte(')')
	return builder.String()
}

// SpecValues is a parsable slice of SpecValue.
type SpecValues []*SpecValue

func (sv SpecValues) config(cfg config) {
	for _i := range sv {
		sv[_i].config = cfg
	}
}
