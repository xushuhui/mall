// Code generated by entc, DO NOT EDIT.

package spu

import (
	"mall-go/app/sku/service/internal/data/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitle), v))
	})
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryID), v))
	})
}

// RootCategoryID applies equality check predicate on the "root_category_id" field. It's identical to RootCategoryIDEQ.
func RootCategoryID(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRootCategoryID), v))
	})
}

// Online applies equality check predicate on the "online" field. It's identical to OnlineEQ.
func Online(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnline), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// SketchSpecID applies equality check predicate on the "sketch_spec_id" field. It's identical to SketchSpecIDEQ.
func SketchSpecID(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSketchSpecID), v))
	})
}

// DefaultSkuID applies equality check predicate on the "default_sku_id" field. It's identical to DefaultSkuIDEQ.
func DefaultSkuID(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultSkuID), v))
	})
}

// Img applies equality check predicate on the "img" field. It's identical to ImgEQ.
func Img(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImg), v))
	})
}

// DiscountPrice applies equality check predicate on the "discount_price" field. It's identical to DiscountPriceEQ.
func DiscountPrice(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountPrice), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// SpuThemeImg applies equality check predicate on the "spu_theme_img" field. It's identical to SpuThemeImgEQ.
func SpuThemeImg(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpuThemeImg), v))
	})
}

// ForThemeImg applies equality check predicate on the "for_theme_img" field. It's identical to ForThemeImgEQ.
func ForThemeImg(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForThemeImg), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeleteTime)))
	})
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeleteTime)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitle), v))
	})
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubtitle), v))
	})
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubtitle), v...))
	})
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubtitle), v...))
	})
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubtitle), v))
	})
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubtitle), v))
	})
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubtitle), v))
	})
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubtitle), v))
	})
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubtitle), v))
	})
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubtitle), v))
	})
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubtitle), v))
	})
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubtitle), v))
	})
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubtitle), v))
	})
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryID), v))
	})
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryID), v))
	})
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int64) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategoryID), v...))
	})
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int64) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategoryID), v...))
	})
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryID), v))
	})
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryID), v))
	})
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryID), v))
	})
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryID), v))
	})
}

// RootCategoryIDEQ applies the EQ predicate on the "root_category_id" field.
func RootCategoryIDEQ(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRootCategoryID), v))
	})
}

// RootCategoryIDNEQ applies the NEQ predicate on the "root_category_id" field.
func RootCategoryIDNEQ(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRootCategoryID), v))
	})
}

// RootCategoryIDIn applies the In predicate on the "root_category_id" field.
func RootCategoryIDIn(vs ...int64) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRootCategoryID), v...))
	})
}

// RootCategoryIDNotIn applies the NotIn predicate on the "root_category_id" field.
func RootCategoryIDNotIn(vs ...int64) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRootCategoryID), v...))
	})
}

// RootCategoryIDGT applies the GT predicate on the "root_category_id" field.
func RootCategoryIDGT(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRootCategoryID), v))
	})
}

// RootCategoryIDGTE applies the GTE predicate on the "root_category_id" field.
func RootCategoryIDGTE(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRootCategoryID), v))
	})
}

// RootCategoryIDLT applies the LT predicate on the "root_category_id" field.
func RootCategoryIDLT(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRootCategoryID), v))
	})
}

// RootCategoryIDLTE applies the LTE predicate on the "root_category_id" field.
func RootCategoryIDLTE(v int64) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRootCategoryID), v))
	})
}

// OnlineEQ applies the EQ predicate on the "online" field.
func OnlineEQ(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnline), v))
	})
}

// OnlineNEQ applies the NEQ predicate on the "online" field.
func OnlineNEQ(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnline), v))
	})
}

// OnlineIn applies the In predicate on the "online" field.
func OnlineIn(vs ...int) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOnline), v...))
	})
}

// OnlineNotIn applies the NotIn predicate on the "online" field.
func OnlineNotIn(vs ...int) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOnline), v...))
	})
}

// OnlineGT applies the GT predicate on the "online" field.
func OnlineGT(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOnline), v))
	})
}

// OnlineGTE applies the GTE predicate on the "online" field.
func OnlineGTE(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOnline), v))
	})
}

// OnlineLT applies the LT predicate on the "online" field.
func OnlineLT(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOnline), v))
	})
}

// OnlineLTE applies the LTE predicate on the "online" field.
func OnlineLTE(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOnline), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceContains applies the Contains predicate on the "price" field.
func PriceContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrice), v))
	})
}

// PriceHasPrefix applies the HasPrefix predicate on the "price" field.
func PriceHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrice), v))
	})
}

// PriceHasSuffix applies the HasSuffix predicate on the "price" field.
func PriceHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrice), v))
	})
}

// PriceEqualFold applies the EqualFold predicate on the "price" field.
func PriceEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrice), v))
	})
}

// PriceContainsFold applies the ContainsFold predicate on the "price" field.
func PriceContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrice), v))
	})
}

// SketchSpecIDEQ applies the EQ predicate on the "sketch_spec_id" field.
func SketchSpecIDEQ(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSketchSpecID), v))
	})
}

// SketchSpecIDNEQ applies the NEQ predicate on the "sketch_spec_id" field.
func SketchSpecIDNEQ(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSketchSpecID), v))
	})
}

// SketchSpecIDIn applies the In predicate on the "sketch_spec_id" field.
func SketchSpecIDIn(vs ...int) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSketchSpecID), v...))
	})
}

// SketchSpecIDNotIn applies the NotIn predicate on the "sketch_spec_id" field.
func SketchSpecIDNotIn(vs ...int) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSketchSpecID), v...))
	})
}

// SketchSpecIDGT applies the GT predicate on the "sketch_spec_id" field.
func SketchSpecIDGT(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSketchSpecID), v))
	})
}

// SketchSpecIDGTE applies the GTE predicate on the "sketch_spec_id" field.
func SketchSpecIDGTE(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSketchSpecID), v))
	})
}

// SketchSpecIDLT applies the LT predicate on the "sketch_spec_id" field.
func SketchSpecIDLT(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSketchSpecID), v))
	})
}

// SketchSpecIDLTE applies the LTE predicate on the "sketch_spec_id" field.
func SketchSpecIDLTE(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSketchSpecID), v))
	})
}

// DefaultSkuIDEQ applies the EQ predicate on the "default_sku_id" field.
func DefaultSkuIDEQ(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultSkuID), v))
	})
}

// DefaultSkuIDNEQ applies the NEQ predicate on the "default_sku_id" field.
func DefaultSkuIDNEQ(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultSkuID), v))
	})
}

// DefaultSkuIDIn applies the In predicate on the "default_sku_id" field.
func DefaultSkuIDIn(vs ...int) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultSkuID), v...))
	})
}

// DefaultSkuIDNotIn applies the NotIn predicate on the "default_sku_id" field.
func DefaultSkuIDNotIn(vs ...int) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultSkuID), v...))
	})
}

// DefaultSkuIDGT applies the GT predicate on the "default_sku_id" field.
func DefaultSkuIDGT(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultSkuID), v))
	})
}

// DefaultSkuIDGTE applies the GTE predicate on the "default_sku_id" field.
func DefaultSkuIDGTE(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultSkuID), v))
	})
}

// DefaultSkuIDLT applies the LT predicate on the "default_sku_id" field.
func DefaultSkuIDLT(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultSkuID), v))
	})
}

// DefaultSkuIDLTE applies the LTE predicate on the "default_sku_id" field.
func DefaultSkuIDLTE(v int) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultSkuID), v))
	})
}

// ImgEQ applies the EQ predicate on the "img" field.
func ImgEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImg), v))
	})
}

// ImgNEQ applies the NEQ predicate on the "img" field.
func ImgNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImg), v))
	})
}

// ImgIn applies the In predicate on the "img" field.
func ImgIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImg), v...))
	})
}

// ImgNotIn applies the NotIn predicate on the "img" field.
func ImgNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImg), v...))
	})
}

// ImgGT applies the GT predicate on the "img" field.
func ImgGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImg), v))
	})
}

// ImgGTE applies the GTE predicate on the "img" field.
func ImgGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImg), v))
	})
}

// ImgLT applies the LT predicate on the "img" field.
func ImgLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImg), v))
	})
}

// ImgLTE applies the LTE predicate on the "img" field.
func ImgLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImg), v))
	})
}

// ImgContains applies the Contains predicate on the "img" field.
func ImgContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImg), v))
	})
}

// ImgHasPrefix applies the HasPrefix predicate on the "img" field.
func ImgHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImg), v))
	})
}

// ImgHasSuffix applies the HasSuffix predicate on the "img" field.
func ImgHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImg), v))
	})
}

// ImgEqualFold applies the EqualFold predicate on the "img" field.
func ImgEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImg), v))
	})
}

// ImgContainsFold applies the ContainsFold predicate on the "img" field.
func ImgContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImg), v))
	})
}

// DiscountPriceEQ applies the EQ predicate on the "discount_price" field.
func DiscountPriceEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceNEQ applies the NEQ predicate on the "discount_price" field.
func DiscountPriceNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceIn applies the In predicate on the "discount_price" field.
func DiscountPriceIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscountPrice), v...))
	})
}

// DiscountPriceNotIn applies the NotIn predicate on the "discount_price" field.
func DiscountPriceNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscountPrice), v...))
	})
}

// DiscountPriceGT applies the GT predicate on the "discount_price" field.
func DiscountPriceGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceGTE applies the GTE predicate on the "discount_price" field.
func DiscountPriceGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceLT applies the LT predicate on the "discount_price" field.
func DiscountPriceLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceLTE applies the LTE predicate on the "discount_price" field.
func DiscountPriceLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceContains applies the Contains predicate on the "discount_price" field.
func DiscountPriceContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceHasPrefix applies the HasPrefix predicate on the "discount_price" field.
func DiscountPriceHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceHasSuffix applies the HasSuffix predicate on the "discount_price" field.
func DiscountPriceHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceEqualFold applies the EqualFold predicate on the "discount_price" field.
func DiscountPriceEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceContainsFold applies the ContainsFold predicate on the "discount_price" field.
func DiscountPriceContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscountPrice), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTags), v))
	})
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTags), v...))
	})
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTags), v...))
	})
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTags), v))
	})
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTags), v))
	})
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTags), v))
	})
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTags), v))
	})
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTags), v))
	})
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTags), v))
	})
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTags), v))
	})
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTags), v))
	})
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTags), v))
	})
}

// SpuThemeImgEQ applies the EQ predicate on the "spu_theme_img" field.
func SpuThemeImgEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgNEQ applies the NEQ predicate on the "spu_theme_img" field.
func SpuThemeImgNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgIn applies the In predicate on the "spu_theme_img" field.
func SpuThemeImgIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpuThemeImg), v...))
	})
}

// SpuThemeImgNotIn applies the NotIn predicate on the "spu_theme_img" field.
func SpuThemeImgNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpuThemeImg), v...))
	})
}

// SpuThemeImgGT applies the GT predicate on the "spu_theme_img" field.
func SpuThemeImgGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgGTE applies the GTE predicate on the "spu_theme_img" field.
func SpuThemeImgGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgLT applies the LT predicate on the "spu_theme_img" field.
func SpuThemeImgLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgLTE applies the LTE predicate on the "spu_theme_img" field.
func SpuThemeImgLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgContains applies the Contains predicate on the "spu_theme_img" field.
func SpuThemeImgContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgHasPrefix applies the HasPrefix predicate on the "spu_theme_img" field.
func SpuThemeImgHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgHasSuffix applies the HasSuffix predicate on the "spu_theme_img" field.
func SpuThemeImgHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgEqualFold applies the EqualFold predicate on the "spu_theme_img" field.
func SpuThemeImgEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpuThemeImg), v))
	})
}

// SpuThemeImgContainsFold applies the ContainsFold predicate on the "spu_theme_img" field.
func SpuThemeImgContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpuThemeImg), v))
	})
}

// ForThemeImgEQ applies the EQ predicate on the "for_theme_img" field.
func ForThemeImgEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgNEQ applies the NEQ predicate on the "for_theme_img" field.
func ForThemeImgNEQ(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgIn applies the In predicate on the "for_theme_img" field.
func ForThemeImgIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldForThemeImg), v...))
	})
}

// ForThemeImgNotIn applies the NotIn predicate on the "for_theme_img" field.
func ForThemeImgNotIn(vs ...string) predicate.Spu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Spu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldForThemeImg), v...))
	})
}

// ForThemeImgGT applies the GT predicate on the "for_theme_img" field.
func ForThemeImgGT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgGTE applies the GTE predicate on the "for_theme_img" field.
func ForThemeImgGTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgLT applies the LT predicate on the "for_theme_img" field.
func ForThemeImgLT(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgLTE applies the LTE predicate on the "for_theme_img" field.
func ForThemeImgLTE(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgContains applies the Contains predicate on the "for_theme_img" field.
func ForThemeImgContains(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgHasPrefix applies the HasPrefix predicate on the "for_theme_img" field.
func ForThemeImgHasPrefix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgHasSuffix applies the HasSuffix predicate on the "for_theme_img" field.
func ForThemeImgHasSuffix(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgEqualFold applies the EqualFold predicate on the "for_theme_img" field.
func ForThemeImgEqualFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldForThemeImg), v))
	})
}

// ForThemeImgContainsFold applies the ContainsFold predicate on the "for_theme_img" field.
func ForThemeImgContainsFold(v string) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldForThemeImg), v))
	})
}

// HasSaleExplain applies the HasEdge predicate on the "sale_explain" edge.
func HasSaleExplain() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SaleExplainTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SaleExplainTable, SaleExplainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSaleExplainWith applies the HasEdge predicate on the "sale_explain" edge with a given conditions (other predicates).
func HasSaleExplainWith(preds ...predicate.SaleExplain) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SaleExplainInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SaleExplainTable, SaleExplainColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSpuImg applies the HasEdge predicate on the "spu_img" edge.
func HasSpuImg() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SpuImgTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SpuImgTable, SpuImgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpuImgWith applies the HasEdge predicate on the "spu_img" edge with a given conditions (other predicates).
func HasSpuImgWith(preds ...predicate.SpuImg) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SpuImgInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SpuImgTable, SpuImgColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSpuDetailImg applies the HasEdge predicate on the "spu_detail_img" edge.
func HasSpuDetailImg() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SpuDetailImgTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SpuDetailImgTable, SpuDetailImgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpuDetailImgWith applies the HasEdge predicate on the "spu_detail_img" edge with a given conditions (other predicates).
func HasSpuDetailImgWith(preds ...predicate.SpuDetailImg) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SpuDetailImgInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SpuDetailImgTable, SpuDetailImgColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSpecKey applies the HasEdge predicate on the "spec_key" edge.
func HasSpecKey() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SpecKeyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SpecKeyTable, SpecKeyPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpecKeyWith applies the HasEdge predicate on the "spec_key" edge with a given conditions (other predicates).
func HasSpecKeyWith(preds ...predicate.SpecKey) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SpecKeyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SpecKeyTable, SpecKeyPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagTable, TagPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.Tag) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagTable, TagPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Spu) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Spu) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Spu) predicate.Spu {
	return predicate.Spu(func(s *sql.Selector) {
		p(s.Not())
	})
}
