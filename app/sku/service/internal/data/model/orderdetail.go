// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/sku/service/internal/data/model/orderdetail"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OrderDetail is the model entity for the OrderDetail schema.
type OrderDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// UserID holds the value of the "user_id" field.
	// user表外键
	UserID int64 `json:"user_id,omitempty"`
	// PayWay holds the value of the "pay_way" field.
	// 支付方式：1微信支付，2支付宝支付，3余额支付
	PayWay int `json:"pay_way,omitempty"`
	// ClientType holds the value of the "client_type" field.
	// 客户端类型：1安卓，2IOS，3PC
	ClientType int `json:"client_type,omitempty"`
	// ShipNo holds the value of the "ship_no" field.
	// 物流单号
	ShipNo string `json:"ship_no,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderDetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderdetail.FieldID, orderdetail.FieldUserID, orderdetail.FieldPayWay, orderdetail.FieldClientType:
			values[i] = new(sql.NullInt64)
		case orderdetail.FieldShipNo:
			values[i] = new(sql.NullString)
		case orderdetail.FieldCreateTime, orderdetail.FieldUpdateTime, orderdetail.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderDetail fields.
func (od *OrderDetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			od.ID = int64(value.Int64)
		case orderdetail.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				od.CreateTime = value.Time
			}
		case orderdetail.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				od.UpdateTime = value.Time
			}
		case orderdetail.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				od.DeleteTime = value.Time
			}
		case orderdetail.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				od.UserID = value.Int64
			}
		case orderdetail.FieldPayWay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_way", values[i])
			} else if value.Valid {
				od.PayWay = int(value.Int64)
			}
		case orderdetail.FieldClientType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field client_type", values[i])
			} else if value.Valid {
				od.ClientType = int(value.Int64)
			}
		case orderdetail.FieldShipNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_no", values[i])
			} else if value.Valid {
				od.ShipNo = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderDetail.
// Note that you need to call OrderDetail.Unwrap() before calling this method if this OrderDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (od *OrderDetail) Update() *OrderDetailUpdateOne {
	return (&OrderDetailClient{config: od.config}).UpdateOne(od)
}

// Unwrap unwraps the OrderDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (od *OrderDetail) Unwrap() *OrderDetail {
	tx, ok := od.config.driver.(*txDriver)
	if !ok {
		panic("model: OrderDetail is not a transactional entity")
	}
	od.config.driver = tx.drv
	return od
}

// String implements the fmt.Stringer.
func (od *OrderDetail) String() string {
	var builder strings.Builder
	builder.WriteString("OrderDetail(")
	builder.WriteString(fmt.Sprintf("id=%v", od.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(od.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(od.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(od.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", od.UserID))
	builder.WriteString(", pay_way=")
	builder.WriteString(fmt.Sprintf("%v", od.PayWay))
	builder.WriteString(", client_type=")
	builder.WriteString(fmt.Sprintf("%v", od.ClientType))
	builder.WriteString(", ship_no=")
	builder.WriteString(od.ShipNo)
	builder.WriteByte(')')
	return builder.String()
}

// OrderDetails is a parsable slice of OrderDetail.
type OrderDetails []*OrderDetail

func (od OrderDetails) config(cfg config) {
	for _i := range od {
		od[_i].config = cfg
	}
}
