// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/sku/service/internal/data/model/order"
	"mall-go/app/sku/service/internal/data/model/ordersub"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OrderSub is the model entity for the OrderSub schema.
type OrderSub struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// OrderNo holds the value of the "order_no" field.
	OrderNo string `json:"order_no,omitempty"`
	// UserID holds the value of the "user_id" field.
	// user表外键
	UserID int64 `json:"user_id,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// FinalPrice holds the value of the "final_price" field.
	FinalPrice float64 `json:"final_price,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int64 `json:"order_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderSubQuery when eager-loading is set.
	Edges OrderSubEdges `json:"edges"`
}

// OrderSubEdges holds the relations/edges for other nodes in the graph.
type OrderSubEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderSubEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// The edge order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderSub) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordersub.FieldPrice, ordersub.FieldFinalPrice:
			values[i] = new(sql.NullFloat64)
		case ordersub.FieldID, ordersub.FieldUserID, ordersub.FieldCount, ordersub.FieldStatus, ordersub.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case ordersub.FieldOrderNo:
			values[i] = new(sql.NullString)
		case ordersub.FieldCreateTime, ordersub.FieldUpdateTime, ordersub.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderSub", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderSub fields.
func (os *OrderSub) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordersub.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = int64(value.Int64)
		case ordersub.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				os.CreateTime = value.Time
			}
		case ordersub.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				os.UpdateTime = value.Time
			}
		case ordersub.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				os.DeleteTime = value.Time
			}
		case ordersub.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				os.OrderNo = value.String
			}
		case ordersub.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				os.UserID = value.Int64
			}
		case ordersub.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				os.Price = value.Float64
			}
		case ordersub.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				os.Count = int(value.Int64)
			}
		case ordersub.FieldFinalPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field final_price", values[i])
			} else if value.Valid {
				os.FinalPrice = value.Float64
			}
		case ordersub.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				os.Status = int(value.Int64)
			}
		case ordersub.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				os.OrderID = value.Int64
			}
		}
	}
	return nil
}

// QueryOrder queries the "order" edge of the OrderSub entity.
func (os *OrderSub) QueryOrder() *OrderQuery {
	return (&OrderSubClient{config: os.config}).QueryOrder(os)
}

// Update returns a builder for updating this OrderSub.
// Note that you need to call OrderSub.Unwrap() before calling this method if this OrderSub
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrderSub) Update() *OrderSubUpdateOne {
	return (&OrderSubClient{config: os.config}).UpdateOne(os)
}

// Unwrap unwraps the OrderSub entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrderSub) Unwrap() *OrderSub {
	tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("model: OrderSub is not a transactional entity")
	}
	os.config.driver = tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrderSub) String() string {
	var builder strings.Builder
	builder.WriteString("OrderSub(")
	builder.WriteString(fmt.Sprintf("id=%v", os.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(os.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(os.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(os.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", order_no=")
	builder.WriteString(os.OrderNo)
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", os.UserID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", os.Price))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", os.Count))
	builder.WriteString(", final_price=")
	builder.WriteString(fmt.Sprintf("%v", os.FinalPrice))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", os.Status))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", os.OrderID))
	builder.WriteByte(')')
	return builder.String()
}

// OrderSubs is a parsable slice of OrderSub.
type OrderSubs []*OrderSub

func (os OrderSubs) config(cfg config) {
	for _i := range os {
		os[_i].config = cfg
	}
}
