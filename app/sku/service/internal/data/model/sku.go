// Code generated by entc, DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
	"mall-go/app/sku/service/internal/data/ent/schema"
	"mall-go/app/sku/service/internal/data/model/sku"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Sku is the model entity for the Sku schema.
type Sku struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// DiscountPrice holds the value of the "discount_price" field.
	DiscountPrice float64 `json:"discount_price,omitempty"`
	// Online holds the value of the "online" field.
	Online int `json:"online,omitempty"`
	// Img holds the value of the "img" field.
	Img string `json:"img,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// SpuID holds the value of the "spu_id" field.
	SpuID int64 `json:"spu_id,omitempty"`
	// Specs holds the value of the "specs" field.
	Specs []schema.Spec `json:"specs,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Stock holds the value of the "stock" field.
	Stock int `json:"stock,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int64 `json:"category_id,omitempty"`
	// RootCategoryID holds the value of the "root_category_id" field.
	RootCategoryID int64 `json:"root_category_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sku) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sku.FieldSpecs:
			values[i] = new([]byte)
		case sku.FieldPrice, sku.FieldDiscountPrice:
			values[i] = new(sql.NullFloat64)
		case sku.FieldID, sku.FieldOnline, sku.FieldSpuID, sku.FieldStock, sku.FieldCategoryID, sku.FieldRootCategoryID:
			values[i] = new(sql.NullInt64)
		case sku.FieldImg, sku.FieldTitle, sku.FieldCode:
			values[i] = new(sql.NullString)
		case sku.FieldCreateTime, sku.FieldUpdateTime, sku.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Sku", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sku fields.
func (s *Sku) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sku.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case sku.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case sku.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case sku.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				s.DeleteTime = value.Time
			}
		case sku.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				s.Price = value.Float64
			}
		case sku.FieldDiscountPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_price", values[i])
			} else if value.Valid {
				s.DiscountPrice = value.Float64
			}
		case sku.FieldOnline:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field online", values[i])
			} else if value.Valid {
				s.Online = int(value.Int64)
			}
		case sku.FieldImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img", values[i])
			} else if value.Valid {
				s.Img = value.String
			}
		case sku.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case sku.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				s.SpuID = value.Int64
			}
		case sku.FieldSpecs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field specs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Specs); err != nil {
					return fmt.Errorf("unmarshal field specs: %w", err)
				}
			}
		case sku.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				s.Code = value.String
			}
		case sku.FieldStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				s.Stock = int(value.Int64)
			}
		case sku.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				s.CategoryID = value.Int64
			}
		case sku.FieldRootCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field root_category_id", values[i])
			} else if value.Valid {
				s.RootCategoryID = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Sku.
// Note that you need to call Sku.Unwrap() before calling this method if this Sku
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sku) Update() *SkuUpdateOne {
	return (&SkuClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Sku entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sku) Unwrap() *Sku {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("model: Sku is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sku) String() string {
	var builder strings.Builder
	builder.WriteString("Sku(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(s.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", s.Price))
	builder.WriteString(", discount_price=")
	builder.WriteString(fmt.Sprintf("%v", s.DiscountPrice))
	builder.WriteString(", online=")
	builder.WriteString(fmt.Sprintf("%v", s.Online))
	builder.WriteString(", img=")
	builder.WriteString(s.Img)
	builder.WriteString(", title=")
	builder.WriteString(s.Title)
	builder.WriteString(", spu_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SpuID))
	builder.WriteString(", specs=")
	builder.WriteString(fmt.Sprintf("%v", s.Specs))
	builder.WriteString(", code=")
	builder.WriteString(s.Code)
	builder.WriteString(", stock=")
	builder.WriteString(fmt.Sprintf("%v", s.Stock))
	builder.WriteString(", category_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CategoryID))
	builder.WriteString(", root_category_id=")
	builder.WriteString(fmt.Sprintf("%v", s.RootCategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// Skus is a parsable slice of Sku.
type Skus []*Sku

func (s Skus) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
