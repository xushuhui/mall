// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"log"

	"mall-go/app/sku/service/internal/data/model/migrate"

	"mall-go/app/sku/service/internal/data/model/brand"
	"mall-go/app/sku/service/internal/data/model/saleexplain"
	"mall-go/app/sku/service/internal/data/model/sku"
	"mall-go/app/sku/service/internal/data/model/skuspec"
	"mall-go/app/sku/service/internal/data/model/speckey"
	"mall-go/app/sku/service/internal/data/model/specvalue"
	"mall-go/app/sku/service/internal/data/model/spu"
	"mall-go/app/sku/service/internal/data/model/spudetailimg"
	"mall-go/app/sku/service/internal/data/model/spuimg"
	"mall-go/app/sku/service/internal/data/model/tag"
	"mall-go/app/sku/service/internal/data/model/userfavor"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Brand is the client for interacting with the Brand builders.
	Brand *BrandClient
	// SaleExplain is the client for interacting with the SaleExplain builders.
	SaleExplain *SaleExplainClient
	// Sku is the client for interacting with the Sku builders.
	Sku *SkuClient
	// SkuSpec is the client for interacting with the SkuSpec builders.
	SkuSpec *SkuSpecClient
	// SpecKey is the client for interacting with the SpecKey builders.
	SpecKey *SpecKeyClient
	// SpecValue is the client for interacting with the SpecValue builders.
	SpecValue *SpecValueClient
	// Spu is the client for interacting with the Spu builders.
	Spu *SpuClient
	// SpuDetailImg is the client for interacting with the SpuDetailImg builders.
	SpuDetailImg *SpuDetailImgClient
	// SpuImg is the client for interacting with the SpuImg builders.
	SpuImg *SpuImgClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// UserFavor is the client for interacting with the UserFavor builders.
	UserFavor *UserFavorClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Brand = NewBrandClient(c.config)
	c.SaleExplain = NewSaleExplainClient(c.config)
	c.Sku = NewSkuClient(c.config)
	c.SkuSpec = NewSkuSpecClient(c.config)
	c.SpecKey = NewSpecKeyClient(c.config)
	c.SpecValue = NewSpecValueClient(c.config)
	c.Spu = NewSpuClient(c.config)
	c.SpuDetailImg = NewSpuDetailImgClient(c.config)
	c.SpuImg = NewSpuImgClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.UserFavor = NewUserFavorClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Brand:        NewBrandClient(cfg),
		SaleExplain:  NewSaleExplainClient(cfg),
		Sku:          NewSkuClient(cfg),
		SkuSpec:      NewSkuSpecClient(cfg),
		SpecKey:      NewSpecKeyClient(cfg),
		SpecValue:    NewSpecValueClient(cfg),
		Spu:          NewSpuClient(cfg),
		SpuDetailImg: NewSpuDetailImgClient(cfg),
		SpuImg:       NewSpuImgClient(cfg),
		Tag:          NewTagClient(cfg),
		UserFavor:    NewUserFavorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:       cfg,
		Brand:        NewBrandClient(cfg),
		SaleExplain:  NewSaleExplainClient(cfg),
		Sku:          NewSkuClient(cfg),
		SkuSpec:      NewSkuSpecClient(cfg),
		SpecKey:      NewSpecKeyClient(cfg),
		SpecValue:    NewSpecValueClient(cfg),
		Spu:          NewSpuClient(cfg),
		SpuDetailImg: NewSpuDetailImgClient(cfg),
		SpuImg:       NewSpuImgClient(cfg),
		Tag:          NewTagClient(cfg),
		UserFavor:    NewUserFavorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Brand.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Brand.Use(hooks...)
	c.SaleExplain.Use(hooks...)
	c.Sku.Use(hooks...)
	c.SkuSpec.Use(hooks...)
	c.SpecKey.Use(hooks...)
	c.SpecValue.Use(hooks...)
	c.Spu.Use(hooks...)
	c.SpuDetailImg.Use(hooks...)
	c.SpuImg.Use(hooks...)
	c.Tag.Use(hooks...)
	c.UserFavor.Use(hooks...)
}

// BrandClient is a client for the Brand schema.
type BrandClient struct {
	config
}

// NewBrandClient returns a client for the Brand from the given config.
func NewBrandClient(c config) *BrandClient {
	return &BrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `brand.Hooks(f(g(h())))`.
func (c *BrandClient) Use(hooks ...Hook) {
	c.hooks.Brand = append(c.hooks.Brand, hooks...)
}

// Create returns a create builder for Brand.
func (c *BrandClient) Create() *BrandCreate {
	mutation := newBrandMutation(c.config, OpCreate)
	return &BrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Brand entities.
func (c *BrandClient) CreateBulk(builders ...*BrandCreate) *BrandCreateBulk {
	return &BrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Brand.
func (c *BrandClient) Update() *BrandUpdate {
	mutation := newBrandMutation(c.config, OpUpdate)
	return &BrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BrandClient) UpdateOne(b *Brand) *BrandUpdateOne {
	mutation := newBrandMutation(c.config, OpUpdateOne, withBrand(b))
	return &BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BrandClient) UpdateOneID(id int64) *BrandUpdateOne {
	mutation := newBrandMutation(c.config, OpUpdateOne, withBrandID(id))
	return &BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Brand.
func (c *BrandClient) Delete() *BrandDelete {
	mutation := newBrandMutation(c.config, OpDelete)
	return &BrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BrandClient) DeleteOne(b *Brand) *BrandDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BrandClient) DeleteOneID(id int64) *BrandDeleteOne {
	builder := c.Delete().Where(brand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BrandDeleteOne{builder}
}

// Query returns a query builder for Brand.
func (c *BrandClient) Query() *BrandQuery {
	return &BrandQuery{
		config: c.config,
	}
}

// Get returns a Brand entity by its id.
func (c *BrandClient) Get(ctx context.Context, id int64) (*Brand, error) {
	return c.Query().Where(brand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BrandClient) GetX(ctx context.Context, id int64) *Brand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a Brand.
func (c *BrandClient) QuerySpu(b *Brand) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(brand.Table, brand.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, brand.SpuTable, brand.SpuColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BrandClient) Hooks() []Hook {
	return c.hooks.Brand
}

// SaleExplainClient is a client for the SaleExplain schema.
type SaleExplainClient struct {
	config
}

// NewSaleExplainClient returns a client for the SaleExplain from the given config.
func NewSaleExplainClient(c config) *SaleExplainClient {
	return &SaleExplainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `saleexplain.Hooks(f(g(h())))`.
func (c *SaleExplainClient) Use(hooks ...Hook) {
	c.hooks.SaleExplain = append(c.hooks.SaleExplain, hooks...)
}

// Create returns a create builder for SaleExplain.
func (c *SaleExplainClient) Create() *SaleExplainCreate {
	mutation := newSaleExplainMutation(c.config, OpCreate)
	return &SaleExplainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SaleExplain entities.
func (c *SaleExplainClient) CreateBulk(builders ...*SaleExplainCreate) *SaleExplainCreateBulk {
	return &SaleExplainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SaleExplain.
func (c *SaleExplainClient) Update() *SaleExplainUpdate {
	mutation := newSaleExplainMutation(c.config, OpUpdate)
	return &SaleExplainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SaleExplainClient) UpdateOne(se *SaleExplain) *SaleExplainUpdateOne {
	mutation := newSaleExplainMutation(c.config, OpUpdateOne, withSaleExplain(se))
	return &SaleExplainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SaleExplainClient) UpdateOneID(id int64) *SaleExplainUpdateOne {
	mutation := newSaleExplainMutation(c.config, OpUpdateOne, withSaleExplainID(id))
	return &SaleExplainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SaleExplain.
func (c *SaleExplainClient) Delete() *SaleExplainDelete {
	mutation := newSaleExplainMutation(c.config, OpDelete)
	return &SaleExplainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SaleExplainClient) DeleteOne(se *SaleExplain) *SaleExplainDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SaleExplainClient) DeleteOneID(id int64) *SaleExplainDeleteOne {
	builder := c.Delete().Where(saleexplain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SaleExplainDeleteOne{builder}
}

// Query returns a query builder for SaleExplain.
func (c *SaleExplainClient) Query() *SaleExplainQuery {
	return &SaleExplainQuery{
		config: c.config,
	}
}

// Get returns a SaleExplain entity by its id.
func (c *SaleExplainClient) Get(ctx context.Context, id int64) (*SaleExplain, error) {
	return c.Query().Where(saleexplain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SaleExplainClient) GetX(ctx context.Context, id int64) *SaleExplain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a SaleExplain.
func (c *SaleExplainClient) QuerySpu(se *SaleExplain) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(saleexplain.Table, saleexplain.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, saleexplain.SpuTable, saleexplain.SpuColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SaleExplainClient) Hooks() []Hook {
	return c.hooks.SaleExplain
}

// SkuClient is a client for the Sku schema.
type SkuClient struct {
	config
}

// NewSkuClient returns a client for the Sku from the given config.
func NewSkuClient(c config) *SkuClient {
	return &SkuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sku.Hooks(f(g(h())))`.
func (c *SkuClient) Use(hooks ...Hook) {
	c.hooks.Sku = append(c.hooks.Sku, hooks...)
}

// Create returns a create builder for Sku.
func (c *SkuClient) Create() *SkuCreate {
	mutation := newSkuMutation(c.config, OpCreate)
	return &SkuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sku entities.
func (c *SkuClient) CreateBulk(builders ...*SkuCreate) *SkuCreateBulk {
	return &SkuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sku.
func (c *SkuClient) Update() *SkuUpdate {
	mutation := newSkuMutation(c.config, OpUpdate)
	return &SkuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkuClient) UpdateOne(s *Sku) *SkuUpdateOne {
	mutation := newSkuMutation(c.config, OpUpdateOne, withSku(s))
	return &SkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkuClient) UpdateOneID(id int64) *SkuUpdateOne {
	mutation := newSkuMutation(c.config, OpUpdateOne, withSkuID(id))
	return &SkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sku.
func (c *SkuClient) Delete() *SkuDelete {
	mutation := newSkuMutation(c.config, OpDelete)
	return &SkuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkuClient) DeleteOne(s *Sku) *SkuDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkuClient) DeleteOneID(id int64) *SkuDeleteOne {
	builder := c.Delete().Where(sku.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkuDeleteOne{builder}
}

// Query returns a query builder for Sku.
func (c *SkuClient) Query() *SkuQuery {
	return &SkuQuery{
		config: c.config,
	}
}

// Get returns a Sku entity by its id.
func (c *SkuClient) Get(ctx context.Context, id int64) (*Sku, error) {
	return c.Query().Where(sku.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkuClient) GetX(ctx context.Context, id int64) *Sku {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SkuClient) Hooks() []Hook {
	return c.hooks.Sku
}

// SkuSpecClient is a client for the SkuSpec schema.
type SkuSpecClient struct {
	config
}

// NewSkuSpecClient returns a client for the SkuSpec from the given config.
func NewSkuSpecClient(c config) *SkuSpecClient {
	return &SkuSpecClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skuspec.Hooks(f(g(h())))`.
func (c *SkuSpecClient) Use(hooks ...Hook) {
	c.hooks.SkuSpec = append(c.hooks.SkuSpec, hooks...)
}

// Create returns a create builder for SkuSpec.
func (c *SkuSpecClient) Create() *SkuSpecCreate {
	mutation := newSkuSpecMutation(c.config, OpCreate)
	return &SkuSpecCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkuSpec entities.
func (c *SkuSpecClient) CreateBulk(builders ...*SkuSpecCreate) *SkuSpecCreateBulk {
	return &SkuSpecCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkuSpec.
func (c *SkuSpecClient) Update() *SkuSpecUpdate {
	mutation := newSkuSpecMutation(c.config, OpUpdate)
	return &SkuSpecUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkuSpecClient) UpdateOne(ss *SkuSpec) *SkuSpecUpdateOne {
	mutation := newSkuSpecMutation(c.config, OpUpdateOne, withSkuSpec(ss))
	return &SkuSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkuSpecClient) UpdateOneID(id int64) *SkuSpecUpdateOne {
	mutation := newSkuSpecMutation(c.config, OpUpdateOne, withSkuSpecID(id))
	return &SkuSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkuSpec.
func (c *SkuSpecClient) Delete() *SkuSpecDelete {
	mutation := newSkuSpecMutation(c.config, OpDelete)
	return &SkuSpecDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkuSpecClient) DeleteOne(ss *SkuSpec) *SkuSpecDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkuSpecClient) DeleteOneID(id int64) *SkuSpecDeleteOne {
	builder := c.Delete().Where(skuspec.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkuSpecDeleteOne{builder}
}

// Query returns a query builder for SkuSpec.
func (c *SkuSpecClient) Query() *SkuSpecQuery {
	return &SkuSpecQuery{
		config: c.config,
	}
}

// Get returns a SkuSpec entity by its id.
func (c *SkuSpecClient) Get(ctx context.Context, id int64) (*SkuSpec, error) {
	return c.Query().Where(skuspec.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkuSpecClient) GetX(ctx context.Context, id int64) *SkuSpec {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SkuSpecClient) Hooks() []Hook {
	return c.hooks.SkuSpec
}

// SpecKeyClient is a client for the SpecKey schema.
type SpecKeyClient struct {
	config
}

// NewSpecKeyClient returns a client for the SpecKey from the given config.
func NewSpecKeyClient(c config) *SpecKeyClient {
	return &SpecKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `speckey.Hooks(f(g(h())))`.
func (c *SpecKeyClient) Use(hooks ...Hook) {
	c.hooks.SpecKey = append(c.hooks.SpecKey, hooks...)
}

// Create returns a create builder for SpecKey.
func (c *SpecKeyClient) Create() *SpecKeyCreate {
	mutation := newSpecKeyMutation(c.config, OpCreate)
	return &SpecKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpecKey entities.
func (c *SpecKeyClient) CreateBulk(builders ...*SpecKeyCreate) *SpecKeyCreateBulk {
	return &SpecKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpecKey.
func (c *SpecKeyClient) Update() *SpecKeyUpdate {
	mutation := newSpecKeyMutation(c.config, OpUpdate)
	return &SpecKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpecKeyClient) UpdateOne(sk *SpecKey) *SpecKeyUpdateOne {
	mutation := newSpecKeyMutation(c.config, OpUpdateOne, withSpecKey(sk))
	return &SpecKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpecKeyClient) UpdateOneID(id int64) *SpecKeyUpdateOne {
	mutation := newSpecKeyMutation(c.config, OpUpdateOne, withSpecKeyID(id))
	return &SpecKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpecKey.
func (c *SpecKeyClient) Delete() *SpecKeyDelete {
	mutation := newSpecKeyMutation(c.config, OpDelete)
	return &SpecKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpecKeyClient) DeleteOne(sk *SpecKey) *SpecKeyDeleteOne {
	return c.DeleteOneID(sk.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpecKeyClient) DeleteOneID(id int64) *SpecKeyDeleteOne {
	builder := c.Delete().Where(speckey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpecKeyDeleteOne{builder}
}

// Query returns a query builder for SpecKey.
func (c *SpecKeyClient) Query() *SpecKeyQuery {
	return &SpecKeyQuery{
		config: c.config,
	}
}

// Get returns a SpecKey entity by its id.
func (c *SpecKeyClient) Get(ctx context.Context, id int64) (*SpecKey, error) {
	return c.Query().Where(speckey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpecKeyClient) GetX(ctx context.Context, id int64) *SpecKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a SpecKey.
func (c *SpecKeyClient) QuerySpu(sk *SpecKey) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(speckey.Table, speckey.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, speckey.SpuTable, speckey.SpuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpecKeyClient) Hooks() []Hook {
	return c.hooks.SpecKey
}

// SpecValueClient is a client for the SpecValue schema.
type SpecValueClient struct {
	config
}

// NewSpecValueClient returns a client for the SpecValue from the given config.
func NewSpecValueClient(c config) *SpecValueClient {
	return &SpecValueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `specvalue.Hooks(f(g(h())))`.
func (c *SpecValueClient) Use(hooks ...Hook) {
	c.hooks.SpecValue = append(c.hooks.SpecValue, hooks...)
}

// Create returns a create builder for SpecValue.
func (c *SpecValueClient) Create() *SpecValueCreate {
	mutation := newSpecValueMutation(c.config, OpCreate)
	return &SpecValueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpecValue entities.
func (c *SpecValueClient) CreateBulk(builders ...*SpecValueCreate) *SpecValueCreateBulk {
	return &SpecValueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpecValue.
func (c *SpecValueClient) Update() *SpecValueUpdate {
	mutation := newSpecValueMutation(c.config, OpUpdate)
	return &SpecValueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpecValueClient) UpdateOne(sv *SpecValue) *SpecValueUpdateOne {
	mutation := newSpecValueMutation(c.config, OpUpdateOne, withSpecValue(sv))
	return &SpecValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpecValueClient) UpdateOneID(id int64) *SpecValueUpdateOne {
	mutation := newSpecValueMutation(c.config, OpUpdateOne, withSpecValueID(id))
	return &SpecValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpecValue.
func (c *SpecValueClient) Delete() *SpecValueDelete {
	mutation := newSpecValueMutation(c.config, OpDelete)
	return &SpecValueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpecValueClient) DeleteOne(sv *SpecValue) *SpecValueDeleteOne {
	return c.DeleteOneID(sv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpecValueClient) DeleteOneID(id int64) *SpecValueDeleteOne {
	builder := c.Delete().Where(specvalue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpecValueDeleteOne{builder}
}

// Query returns a query builder for SpecValue.
func (c *SpecValueClient) Query() *SpecValueQuery {
	return &SpecValueQuery{
		config: c.config,
	}
}

// Get returns a SpecValue entity by its id.
func (c *SpecValueClient) Get(ctx context.Context, id int64) (*SpecValue, error) {
	return c.Query().Where(specvalue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpecValueClient) GetX(ctx context.Context, id int64) *SpecValue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SpecValueClient) Hooks() []Hook {
	return c.hooks.SpecValue
}

// SpuClient is a client for the Spu schema.
type SpuClient struct {
	config
}

// NewSpuClient returns a client for the Spu from the given config.
func NewSpuClient(c config) *SpuClient {
	return &SpuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spu.Hooks(f(g(h())))`.
func (c *SpuClient) Use(hooks ...Hook) {
	c.hooks.Spu = append(c.hooks.Spu, hooks...)
}

// Create returns a create builder for Spu.
func (c *SpuClient) Create() *SpuCreate {
	mutation := newSpuMutation(c.config, OpCreate)
	return &SpuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Spu entities.
func (c *SpuClient) CreateBulk(builders ...*SpuCreate) *SpuCreateBulk {
	return &SpuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Spu.
func (c *SpuClient) Update() *SpuUpdate {
	mutation := newSpuMutation(c.config, OpUpdate)
	return &SpuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpuClient) UpdateOne(s *Spu) *SpuUpdateOne {
	mutation := newSpuMutation(c.config, OpUpdateOne, withSpu(s))
	return &SpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpuClient) UpdateOneID(id int64) *SpuUpdateOne {
	mutation := newSpuMutation(c.config, OpUpdateOne, withSpuID(id))
	return &SpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Spu.
func (c *SpuClient) Delete() *SpuDelete {
	mutation := newSpuMutation(c.config, OpDelete)
	return &SpuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpuClient) DeleteOne(s *Spu) *SpuDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpuClient) DeleteOneID(id int64) *SpuDeleteOne {
	builder := c.Delete().Where(spu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpuDeleteOne{builder}
}

// Query returns a query builder for Spu.
func (c *SpuClient) Query() *SpuQuery {
	return &SpuQuery{
		config: c.config,
	}
}

// Get returns a Spu entity by its id.
func (c *SpuClient) Get(ctx context.Context, id int64) (*Spu, error) {
	return c.Query().Where(spu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpuClient) GetX(ctx context.Context, id int64) *Spu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySaleExplain queries the sale_explain edge of a Spu.
func (c *SpuClient) QuerySaleExplain(s *Spu) *SaleExplainQuery {
	query := &SaleExplainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(saleexplain.Table, saleexplain.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, spu.SaleExplainTable, spu.SaleExplainColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpuImg queries the spu_img edge of a Spu.
func (c *SpuClient) QuerySpuImg(s *Spu) *SpuImgQuery {
	query := &SpuImgQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(spuimg.Table, spuimg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, spu.SpuImgTable, spu.SpuImgColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpuDetailImg queries the spu_detail_img edge of a Spu.
func (c *SpuClient) QuerySpuDetailImg(s *Spu) *SpuDetailImgQuery {
	query := &SpuDetailImgQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(spudetailimg.Table, spudetailimg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, spu.SpuDetailImgTable, spu.SpuDetailImgColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpecKey queries the spec_key edge of a Spu.
func (c *SpuClient) QuerySpecKey(s *Spu) *SpecKeyQuery {
	query := &SpecKeyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(speckey.Table, speckey.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, spu.SpecKeyTable, spu.SpecKeyPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a Spu.
func (c *SpuClient) QueryTag(s *Spu) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spu.Table, spu.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, spu.TagTable, spu.TagPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpuClient) Hooks() []Hook {
	return c.hooks.Spu
}

// SpuDetailImgClient is a client for the SpuDetailImg schema.
type SpuDetailImgClient struct {
	config
}

// NewSpuDetailImgClient returns a client for the SpuDetailImg from the given config.
func NewSpuDetailImgClient(c config) *SpuDetailImgClient {
	return &SpuDetailImgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spudetailimg.Hooks(f(g(h())))`.
func (c *SpuDetailImgClient) Use(hooks ...Hook) {
	c.hooks.SpuDetailImg = append(c.hooks.SpuDetailImg, hooks...)
}

// Create returns a create builder for SpuDetailImg.
func (c *SpuDetailImgClient) Create() *SpuDetailImgCreate {
	mutation := newSpuDetailImgMutation(c.config, OpCreate)
	return &SpuDetailImgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpuDetailImg entities.
func (c *SpuDetailImgClient) CreateBulk(builders ...*SpuDetailImgCreate) *SpuDetailImgCreateBulk {
	return &SpuDetailImgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpuDetailImg.
func (c *SpuDetailImgClient) Update() *SpuDetailImgUpdate {
	mutation := newSpuDetailImgMutation(c.config, OpUpdate)
	return &SpuDetailImgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpuDetailImgClient) UpdateOne(sdi *SpuDetailImg) *SpuDetailImgUpdateOne {
	mutation := newSpuDetailImgMutation(c.config, OpUpdateOne, withSpuDetailImg(sdi))
	return &SpuDetailImgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpuDetailImgClient) UpdateOneID(id int64) *SpuDetailImgUpdateOne {
	mutation := newSpuDetailImgMutation(c.config, OpUpdateOne, withSpuDetailImgID(id))
	return &SpuDetailImgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpuDetailImg.
func (c *SpuDetailImgClient) Delete() *SpuDetailImgDelete {
	mutation := newSpuDetailImgMutation(c.config, OpDelete)
	return &SpuDetailImgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpuDetailImgClient) DeleteOne(sdi *SpuDetailImg) *SpuDetailImgDeleteOne {
	return c.DeleteOneID(sdi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpuDetailImgClient) DeleteOneID(id int64) *SpuDetailImgDeleteOne {
	builder := c.Delete().Where(spudetailimg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpuDetailImgDeleteOne{builder}
}

// Query returns a query builder for SpuDetailImg.
func (c *SpuDetailImgClient) Query() *SpuDetailImgQuery {
	return &SpuDetailImgQuery{
		config: c.config,
	}
}

// Get returns a SpuDetailImg entity by its id.
func (c *SpuDetailImgClient) Get(ctx context.Context, id int64) (*SpuDetailImg, error) {
	return c.Query().Where(spudetailimg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpuDetailImgClient) GetX(ctx context.Context, id int64) *SpuDetailImg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a SpuDetailImg.
func (c *SpuDetailImgClient) QuerySpu(sdi *SpuDetailImg) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sdi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spudetailimg.Table, spudetailimg.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, spudetailimg.SpuTable, spudetailimg.SpuColumn),
		)
		fromV = sqlgraph.Neighbors(sdi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpuDetailImgClient) Hooks() []Hook {
	return c.hooks.SpuDetailImg
}

// SpuImgClient is a client for the SpuImg schema.
type SpuImgClient struct {
	config
}

// NewSpuImgClient returns a client for the SpuImg from the given config.
func NewSpuImgClient(c config) *SpuImgClient {
	return &SpuImgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spuimg.Hooks(f(g(h())))`.
func (c *SpuImgClient) Use(hooks ...Hook) {
	c.hooks.SpuImg = append(c.hooks.SpuImg, hooks...)
}

// Create returns a create builder for SpuImg.
func (c *SpuImgClient) Create() *SpuImgCreate {
	mutation := newSpuImgMutation(c.config, OpCreate)
	return &SpuImgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpuImg entities.
func (c *SpuImgClient) CreateBulk(builders ...*SpuImgCreate) *SpuImgCreateBulk {
	return &SpuImgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpuImg.
func (c *SpuImgClient) Update() *SpuImgUpdate {
	mutation := newSpuImgMutation(c.config, OpUpdate)
	return &SpuImgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpuImgClient) UpdateOne(si *SpuImg) *SpuImgUpdateOne {
	mutation := newSpuImgMutation(c.config, OpUpdateOne, withSpuImg(si))
	return &SpuImgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpuImgClient) UpdateOneID(id int64) *SpuImgUpdateOne {
	mutation := newSpuImgMutation(c.config, OpUpdateOne, withSpuImgID(id))
	return &SpuImgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpuImg.
func (c *SpuImgClient) Delete() *SpuImgDelete {
	mutation := newSpuImgMutation(c.config, OpDelete)
	return &SpuImgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpuImgClient) DeleteOne(si *SpuImg) *SpuImgDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpuImgClient) DeleteOneID(id int64) *SpuImgDeleteOne {
	builder := c.Delete().Where(spuimg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpuImgDeleteOne{builder}
}

// Query returns a query builder for SpuImg.
func (c *SpuImgClient) Query() *SpuImgQuery {
	return &SpuImgQuery{
		config: c.config,
	}
}

// Get returns a SpuImg entity by its id.
func (c *SpuImgClient) Get(ctx context.Context, id int64) (*SpuImg, error) {
	return c.Query().Where(spuimg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpuImgClient) GetX(ctx context.Context, id int64) *SpuImg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a SpuImg.
func (c *SpuImgClient) QuerySpu(si *SpuImg) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spuimg.Table, spuimg.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, spuimg.SpuTable, spuimg.SpuColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpuImgClient) Hooks() []Hook {
	return c.hooks.SpuImg
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int64) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int64) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int64) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int64) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySpu queries the spu edge of a Tag.
func (c *TagClient) QuerySpu(t *Tag) *SpuQuery {
	query := &SpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(spu.Table, spu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.SpuTable, tag.SpuPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// UserFavorClient is a client for the UserFavor schema.
type UserFavorClient struct {
	config
}

// NewUserFavorClient returns a client for the UserFavor from the given config.
func NewUserFavorClient(c config) *UserFavorClient {
	return &UserFavorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfavor.Hooks(f(g(h())))`.
func (c *UserFavorClient) Use(hooks ...Hook) {
	c.hooks.UserFavor = append(c.hooks.UserFavor, hooks...)
}

// Create returns a create builder for UserFavor.
func (c *UserFavorClient) Create() *UserFavorCreate {
	mutation := newUserFavorMutation(c.config, OpCreate)
	return &UserFavorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFavor entities.
func (c *UserFavorClient) CreateBulk(builders ...*UserFavorCreate) *UserFavorCreateBulk {
	return &UserFavorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFavor.
func (c *UserFavorClient) Update() *UserFavorUpdate {
	mutation := newUserFavorMutation(c.config, OpUpdate)
	return &UserFavorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFavorClient) UpdateOne(uf *UserFavor) *UserFavorUpdateOne {
	mutation := newUserFavorMutation(c.config, OpUpdateOne, withUserFavor(uf))
	return &UserFavorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFavorClient) UpdateOneID(id int64) *UserFavorUpdateOne {
	mutation := newUserFavorMutation(c.config, OpUpdateOne, withUserFavorID(id))
	return &UserFavorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFavor.
func (c *UserFavorClient) Delete() *UserFavorDelete {
	mutation := newUserFavorMutation(c.config, OpDelete)
	return &UserFavorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserFavorClient) DeleteOne(uf *UserFavor) *UserFavorDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserFavorClient) DeleteOneID(id int64) *UserFavorDeleteOne {
	builder := c.Delete().Where(userfavor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFavorDeleteOne{builder}
}

// Query returns a query builder for UserFavor.
func (c *UserFavorClient) Query() *UserFavorQuery {
	return &UserFavorQuery{
		config: c.config,
	}
}

// Get returns a UserFavor entity by its id.
func (c *UserFavorClient) Get(ctx context.Context, id int64) (*UserFavor, error) {
	return c.Query().Where(userfavor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFavorClient) GetX(ctx context.Context, id int64) *UserFavor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserFavorClient) Hooks() []Hook {
	return c.hooks.UserFavor
}
