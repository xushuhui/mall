// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/sku/service/internal/data/model/spu"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Spu is the model entity for the Spu schema.
type Spu struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle string `json:"subtitle,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int64 `json:"category_id,omitempty"`
	// RootCategoryID holds the value of the "root_category_id" field.
	RootCategoryID int64 `json:"root_category_id,omitempty"`
	// Online holds the value of the "online" field.
	Online int `json:"online,omitempty"`
	// Price holds the value of the "price" field.
	// 文本型价格，有时候SPU需要展示的是一个范围，或者自定义平均价格
	Price string `json:"price,omitempty"`
	// SketchSpecID holds the value of the "sketch_spec_id" field.
	// 某种规格可以直接附加单品图片
	SketchSpecID int `json:"sketch_spec_id,omitempty"`
	// DefaultSkuID holds the value of the "default_sku_id" field.
	// 默认选中的sku
	DefaultSkuID int `json:"default_sku_id,omitempty"`
	// Img holds the value of the "img" field.
	Img string `json:"img,omitempty"`
	// DiscountPrice holds the value of the "discount_price" field.
	DiscountPrice string `json:"discount_price,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags string `json:"tags,omitempty"`
	// SpuThemeImg holds the value of the "spu_theme_img" field.
	SpuThemeImg string `json:"spu_theme_img,omitempty"`
	// ForThemeImg holds the value of the "for_theme_img" field.
	ForThemeImg string `json:"for_theme_img,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpuQuery when eager-loading is set.
	Edges     SpuEdges `json:"edges"`
	brand_spu *int64
}

// SpuEdges holds the relations/edges for other nodes in the graph.
type SpuEdges struct {
	// SaleExplain holds the value of the sale_explain edge.
	SaleExplain []*SaleExplain `json:"sale_explain,omitempty"`
	// SpuImg holds the value of the spu_img edge.
	SpuImg []*SpuImg `json:"spu_img,omitempty"`
	// SpuDetailImg holds the value of the spu_detail_img edge.
	SpuDetailImg []*SpuDetailImg `json:"spu_detail_img,omitempty"`
	// SpecKey holds the value of the spec_key edge.
	SpecKey []*SpecKey `json:"spec_key,omitempty"`
	// Tag holds the value of the tag edge.
	Tag []*Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// SaleExplainOrErr returns the SaleExplain value or an error if the edge
// was not loaded in eager-loading.
func (e SpuEdges) SaleExplainOrErr() ([]*SaleExplain, error) {
	if e.loadedTypes[0] {
		return e.SaleExplain, nil
	}
	return nil, &NotLoadedError{edge: "sale_explain"}
}

// SpuImgOrErr returns the SpuImg value or an error if the edge
// was not loaded in eager-loading.
func (e SpuEdges) SpuImgOrErr() ([]*SpuImg, error) {
	if e.loadedTypes[1] {
		return e.SpuImg, nil
	}
	return nil, &NotLoadedError{edge: "spu_img"}
}

// SpuDetailImgOrErr returns the SpuDetailImg value or an error if the edge
// was not loaded in eager-loading.
func (e SpuEdges) SpuDetailImgOrErr() ([]*SpuDetailImg, error) {
	if e.loadedTypes[2] {
		return e.SpuDetailImg, nil
	}
	return nil, &NotLoadedError{edge: "spu_detail_img"}
}

// SpecKeyOrErr returns the SpecKey value or an error if the edge
// was not loaded in eager-loading.
func (e SpuEdges) SpecKeyOrErr() ([]*SpecKey, error) {
	if e.loadedTypes[3] {
		return e.SpecKey, nil
	}
	return nil, &NotLoadedError{edge: "spec_key"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e SpuEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[4] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Spu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case spu.FieldID, spu.FieldCategoryID, spu.FieldRootCategoryID, spu.FieldOnline, spu.FieldSketchSpecID, spu.FieldDefaultSkuID:
			values[i] = new(sql.NullInt64)
		case spu.FieldTitle, spu.FieldSubtitle, spu.FieldPrice, spu.FieldImg, spu.FieldDiscountPrice, spu.FieldDescription, spu.FieldTags, spu.FieldSpuThemeImg, spu.FieldForThemeImg:
			values[i] = new(sql.NullString)
		case spu.FieldCreateTime, spu.FieldUpdateTime, spu.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		case spu.ForeignKeys[0]: // brand_spu
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Spu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Spu fields.
func (s *Spu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case spu.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case spu.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case spu.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				s.DeleteTime = value.Time
			}
		case spu.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case spu.FieldSubtitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value.Valid {
				s.Subtitle = value.String
			}
		case spu.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				s.CategoryID = value.Int64
			}
		case spu.FieldRootCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field root_category_id", values[i])
			} else if value.Valid {
				s.RootCategoryID = value.Int64
			}
		case spu.FieldOnline:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field online", values[i])
			} else if value.Valid {
				s.Online = int(value.Int64)
			}
		case spu.FieldPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				s.Price = value.String
			}
		case spu.FieldSketchSpecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sketch_spec_id", values[i])
			} else if value.Valid {
				s.SketchSpecID = int(value.Int64)
			}
		case spu.FieldDefaultSkuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_sku_id", values[i])
			} else if value.Valid {
				s.DefaultSkuID = int(value.Int64)
			}
		case spu.FieldImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img", values[i])
			} else if value.Valid {
				s.Img = value.String
			}
		case spu.FieldDiscountPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discount_price", values[i])
			} else if value.Valid {
				s.DiscountPrice = value.String
			}
		case spu.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case spu.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				s.Tags = value.String
			}
		case spu.FieldSpuThemeImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_theme_img", values[i])
			} else if value.Valid {
				s.SpuThemeImg = value.String
			}
		case spu.FieldForThemeImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field for_theme_img", values[i])
			} else if value.Valid {
				s.ForThemeImg = value.String
			}
		case spu.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field brand_spu", value)
			} else if value.Valid {
				s.brand_spu = new(int64)
				*s.brand_spu = int64(value.Int64)
			}
		}
	}
	return nil
}

// QuerySaleExplain queries the "sale_explain" edge of the Spu entity.
func (s *Spu) QuerySaleExplain() *SaleExplainQuery {
	return (&SpuClient{config: s.config}).QuerySaleExplain(s)
}

// QuerySpuImg queries the "spu_img" edge of the Spu entity.
func (s *Spu) QuerySpuImg() *SpuImgQuery {
	return (&SpuClient{config: s.config}).QuerySpuImg(s)
}

// QuerySpuDetailImg queries the "spu_detail_img" edge of the Spu entity.
func (s *Spu) QuerySpuDetailImg() *SpuDetailImgQuery {
	return (&SpuClient{config: s.config}).QuerySpuDetailImg(s)
}

// QuerySpecKey queries the "spec_key" edge of the Spu entity.
func (s *Spu) QuerySpecKey() *SpecKeyQuery {
	return (&SpuClient{config: s.config}).QuerySpecKey(s)
}

// QueryTag queries the "tag" edge of the Spu entity.
func (s *Spu) QueryTag() *TagQuery {
	return (&SpuClient{config: s.config}).QueryTag(s)
}

// Update returns a builder for updating this Spu.
// Note that you need to call Spu.Unwrap() before calling this method if this Spu
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Spu) Update() *SpuUpdateOne {
	return (&SpuClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Spu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Spu) Unwrap() *Spu {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("model: Spu is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Spu) String() string {
	var builder strings.Builder
	builder.WriteString("Spu(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(s.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(s.Title)
	builder.WriteString(", subtitle=")
	builder.WriteString(s.Subtitle)
	builder.WriteString(", category_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CategoryID))
	builder.WriteString(", root_category_id=")
	builder.WriteString(fmt.Sprintf("%v", s.RootCategoryID))
	builder.WriteString(", online=")
	builder.WriteString(fmt.Sprintf("%v", s.Online))
	builder.WriteString(", price=")
	builder.WriteString(s.Price)
	builder.WriteString(", sketch_spec_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SketchSpecID))
	builder.WriteString(", default_sku_id=")
	builder.WriteString(fmt.Sprintf("%v", s.DefaultSkuID))
	builder.WriteString(", img=")
	builder.WriteString(s.Img)
	builder.WriteString(", discount_price=")
	builder.WriteString(s.DiscountPrice)
	builder.WriteString(", description=")
	builder.WriteString(s.Description)
	builder.WriteString(", tags=")
	builder.WriteString(s.Tags)
	builder.WriteString(", spu_theme_img=")
	builder.WriteString(s.SpuThemeImg)
	builder.WriteString(", for_theme_img=")
	builder.WriteString(s.ForThemeImg)
	builder.WriteByte(')')
	return builder.String()
}

// Spus is a parsable slice of Spu.
type Spus []*Spu

func (s Spus) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
