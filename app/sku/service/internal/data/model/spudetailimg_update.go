// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/app/sku/service/internal/data/model/predicate"
	"mall-go/app/sku/service/internal/data/model/spu"
	"mall-go/app/sku/service/internal/data/model/spudetailimg"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpuDetailImgUpdate is the builder for updating SpuDetailImg entities.
type SpuDetailImgUpdate struct {
	config
	hooks    []Hook
	mutation *SpuDetailImgMutation
}

// Where appends a list predicates to the SpuDetailImgUpdate builder.
func (sdiu *SpuDetailImgUpdate) Where(ps ...predicate.SpuDetailImg) *SpuDetailImgUpdate {
	sdiu.mutation.Where(ps...)
	return sdiu
}

// SetUpdateTime sets the "update_time" field.
func (sdiu *SpuDetailImgUpdate) SetUpdateTime(t time.Time) *SpuDetailImgUpdate {
	sdiu.mutation.SetUpdateTime(t)
	return sdiu
}

// SetDeleteTime sets the "delete_time" field.
func (sdiu *SpuDetailImgUpdate) SetDeleteTime(t time.Time) *SpuDetailImgUpdate {
	sdiu.mutation.SetDeleteTime(t)
	return sdiu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sdiu *SpuDetailImgUpdate) SetNillableDeleteTime(t *time.Time) *SpuDetailImgUpdate {
	if t != nil {
		sdiu.SetDeleteTime(*t)
	}
	return sdiu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (sdiu *SpuDetailImgUpdate) ClearDeleteTime() *SpuDetailImgUpdate {
	sdiu.mutation.ClearDeleteTime()
	return sdiu
}

// SetImg sets the "img" field.
func (sdiu *SpuDetailImgUpdate) SetImg(s string) *SpuDetailImgUpdate {
	sdiu.mutation.SetImg(s)
	return sdiu
}

// SetSpuID sets the "spu_id" field.
func (sdiu *SpuDetailImgUpdate) SetSpuID(i int64) *SpuDetailImgUpdate {
	sdiu.mutation.SetSpuID(i)
	return sdiu
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (sdiu *SpuDetailImgUpdate) SetNillableSpuID(i *int64) *SpuDetailImgUpdate {
	if i != nil {
		sdiu.SetSpuID(*i)
	}
	return sdiu
}

// ClearSpuID clears the value of the "spu_id" field.
func (sdiu *SpuDetailImgUpdate) ClearSpuID() *SpuDetailImgUpdate {
	sdiu.mutation.ClearSpuID()
	return sdiu
}

// SetIndex sets the "index" field.
func (sdiu *SpuDetailImgUpdate) SetIndex(i int) *SpuDetailImgUpdate {
	sdiu.mutation.ResetIndex()
	sdiu.mutation.SetIndex(i)
	return sdiu
}

// AddIndex adds i to the "index" field.
func (sdiu *SpuDetailImgUpdate) AddIndex(i int) *SpuDetailImgUpdate {
	sdiu.mutation.AddIndex(i)
	return sdiu
}

// SetSpu sets the "spu" edge to the Spu entity.
func (sdiu *SpuDetailImgUpdate) SetSpu(s *Spu) *SpuDetailImgUpdate {
	return sdiu.SetSpuID(s.ID)
}

// Mutation returns the SpuDetailImgMutation object of the builder.
func (sdiu *SpuDetailImgUpdate) Mutation() *SpuDetailImgMutation {
	return sdiu.mutation
}

// ClearSpu clears the "spu" edge to the Spu entity.
func (sdiu *SpuDetailImgUpdate) ClearSpu() *SpuDetailImgUpdate {
	sdiu.mutation.ClearSpu()
	return sdiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdiu *SpuDetailImgUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sdiu.defaults()
	if len(sdiu.hooks) == 0 {
		affected, err = sdiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpuDetailImgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sdiu.mutation = mutation
			affected, err = sdiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sdiu.hooks) - 1; i >= 0; i-- {
			if sdiu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = sdiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdiu *SpuDetailImgUpdate) SaveX(ctx context.Context) int {
	affected, err := sdiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdiu *SpuDetailImgUpdate) Exec(ctx context.Context) error {
	_, err := sdiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdiu *SpuDetailImgUpdate) ExecX(ctx context.Context) {
	if err := sdiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdiu *SpuDetailImgUpdate) defaults() {
	if _, ok := sdiu.mutation.UpdateTime(); !ok {
		v := spudetailimg.UpdateDefaultUpdateTime()
		sdiu.mutation.SetUpdateTime(v)
	}
}

func (sdiu *SpuDetailImgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spudetailimg.Table,
			Columns: spudetailimg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: spudetailimg.FieldID,
			},
		},
	}
	if ps := sdiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spudetailimg.FieldUpdateTime,
		})
	}
	if value, ok := sdiu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spudetailimg.FieldDeleteTime,
		})
	}
	if sdiu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: spudetailimg.FieldDeleteTime,
		})
	}
	if value, ok := sdiu.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spudetailimg.FieldImg,
		})
	}
	if value, ok := sdiu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spudetailimg.FieldIndex,
		})
	}
	if value, ok := sdiu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spudetailimg.FieldIndex,
		})
	}
	if sdiu.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spudetailimg.SpuTable,
			Columns: []string{spudetailimg.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdiu.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spudetailimg.SpuTable,
			Columns: []string{spudetailimg.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spudetailimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SpuDetailImgUpdateOne is the builder for updating a single SpuDetailImg entity.
type SpuDetailImgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpuDetailImgMutation
}

// SetUpdateTime sets the "update_time" field.
func (sdiuo *SpuDetailImgUpdateOne) SetUpdateTime(t time.Time) *SpuDetailImgUpdateOne {
	sdiuo.mutation.SetUpdateTime(t)
	return sdiuo
}

// SetDeleteTime sets the "delete_time" field.
func (sdiuo *SpuDetailImgUpdateOne) SetDeleteTime(t time.Time) *SpuDetailImgUpdateOne {
	sdiuo.mutation.SetDeleteTime(t)
	return sdiuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sdiuo *SpuDetailImgUpdateOne) SetNillableDeleteTime(t *time.Time) *SpuDetailImgUpdateOne {
	if t != nil {
		sdiuo.SetDeleteTime(*t)
	}
	return sdiuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (sdiuo *SpuDetailImgUpdateOne) ClearDeleteTime() *SpuDetailImgUpdateOne {
	sdiuo.mutation.ClearDeleteTime()
	return sdiuo
}

// SetImg sets the "img" field.
func (sdiuo *SpuDetailImgUpdateOne) SetImg(s string) *SpuDetailImgUpdateOne {
	sdiuo.mutation.SetImg(s)
	return sdiuo
}

// SetSpuID sets the "spu_id" field.
func (sdiuo *SpuDetailImgUpdateOne) SetSpuID(i int64) *SpuDetailImgUpdateOne {
	sdiuo.mutation.SetSpuID(i)
	return sdiuo
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (sdiuo *SpuDetailImgUpdateOne) SetNillableSpuID(i *int64) *SpuDetailImgUpdateOne {
	if i != nil {
		sdiuo.SetSpuID(*i)
	}
	return sdiuo
}

// ClearSpuID clears the value of the "spu_id" field.
func (sdiuo *SpuDetailImgUpdateOne) ClearSpuID() *SpuDetailImgUpdateOne {
	sdiuo.mutation.ClearSpuID()
	return sdiuo
}

// SetIndex sets the "index" field.
func (sdiuo *SpuDetailImgUpdateOne) SetIndex(i int) *SpuDetailImgUpdateOne {
	sdiuo.mutation.ResetIndex()
	sdiuo.mutation.SetIndex(i)
	return sdiuo
}

// AddIndex adds i to the "index" field.
func (sdiuo *SpuDetailImgUpdateOne) AddIndex(i int) *SpuDetailImgUpdateOne {
	sdiuo.mutation.AddIndex(i)
	return sdiuo
}

// SetSpu sets the "spu" edge to the Spu entity.
func (sdiuo *SpuDetailImgUpdateOne) SetSpu(s *Spu) *SpuDetailImgUpdateOne {
	return sdiuo.SetSpuID(s.ID)
}

// Mutation returns the SpuDetailImgMutation object of the builder.
func (sdiuo *SpuDetailImgUpdateOne) Mutation() *SpuDetailImgMutation {
	return sdiuo.mutation
}

// ClearSpu clears the "spu" edge to the Spu entity.
func (sdiuo *SpuDetailImgUpdateOne) ClearSpu() *SpuDetailImgUpdateOne {
	sdiuo.mutation.ClearSpu()
	return sdiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sdiuo *SpuDetailImgUpdateOne) Select(field string, fields ...string) *SpuDetailImgUpdateOne {
	sdiuo.fields = append([]string{field}, fields...)
	return sdiuo
}

// Save executes the query and returns the updated SpuDetailImg entity.
func (sdiuo *SpuDetailImgUpdateOne) Save(ctx context.Context) (*SpuDetailImg, error) {
	var (
		err  error
		node *SpuDetailImg
	)
	sdiuo.defaults()
	if len(sdiuo.hooks) == 0 {
		node, err = sdiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpuDetailImgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sdiuo.mutation = mutation
			node, err = sdiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sdiuo.hooks) - 1; i >= 0; i-- {
			if sdiuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = sdiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdiuo *SpuDetailImgUpdateOne) SaveX(ctx context.Context) *SpuDetailImg {
	node, err := sdiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sdiuo *SpuDetailImgUpdateOne) Exec(ctx context.Context) error {
	_, err := sdiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdiuo *SpuDetailImgUpdateOne) ExecX(ctx context.Context) {
	if err := sdiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdiuo *SpuDetailImgUpdateOne) defaults() {
	if _, ok := sdiuo.mutation.UpdateTime(); !ok {
		v := spudetailimg.UpdateDefaultUpdateTime()
		sdiuo.mutation.SetUpdateTime(v)
	}
}

func (sdiuo *SpuDetailImgUpdateOne) sqlSave(ctx context.Context) (_node *SpuDetailImg, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spudetailimg.Table,
			Columns: spudetailimg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: spudetailimg.FieldID,
			},
		},
	}
	id, ok := sdiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SpuDetailImg.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sdiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spudetailimg.FieldID)
		for _, f := range fields {
			if !spudetailimg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != spudetailimg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sdiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spudetailimg.FieldUpdateTime,
		})
	}
	if value, ok := sdiuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: spudetailimg.FieldDeleteTime,
		})
	}
	if sdiuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: spudetailimg.FieldDeleteTime,
		})
	}
	if value, ok := sdiuo.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: spudetailimg.FieldImg,
		})
	}
	if value, ok := sdiuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spudetailimg.FieldIndex,
		})
	}
	if value, ok := sdiuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: spudetailimg.FieldIndex,
		})
	}
	if sdiuo.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spudetailimg.SpuTable,
			Columns: []string{spudetailimg.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdiuo.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spudetailimg.SpuTable,
			Columns: []string{spudetailimg.SpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SpuDetailImg{config: sdiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sdiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spudetailimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
