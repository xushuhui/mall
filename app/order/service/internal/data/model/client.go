// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"log"

	"mall-go/app/order/service/internal/data/model/migrate"

	"mall-go/app/order/service/internal/data/model/order"
	"mall-go/app/order/service/internal/data/model/orderdetail"
	"mall-go/app/order/service/internal/data/model/ordersnap"
	"mall-go/app/order/service/internal/data/model/ordersub"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderDetail is the client for interacting with the OrderDetail builders.
	OrderDetail *OrderDetailClient
	// OrderSnap is the client for interacting with the OrderSnap builders.
	OrderSnap *OrderSnapClient
	// OrderSub is the client for interacting with the OrderSub builders.
	OrderSub *OrderSubClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Order = NewOrderClient(c.config)
	c.OrderDetail = NewOrderDetailClient(c.config)
	c.OrderSnap = NewOrderSnapClient(c.config)
	c.OrderSub = NewOrderSubClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Order:       NewOrderClient(cfg),
		OrderDetail: NewOrderDetailClient(cfg),
		OrderSnap:   NewOrderSnapClient(cfg),
		OrderSub:    NewOrderSubClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Order:       NewOrderClient(cfg),
		OrderDetail: NewOrderDetailClient(cfg),
		OrderSnap:   NewOrderSnapClient(cfg),
		OrderSub:    NewOrderSubClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Order.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Order.Use(hooks...)
	c.OrderDetail.Use(hooks...)
	c.OrderSnap.Use(hooks...)
	c.OrderSub.Use(hooks...)
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a create builder for Order.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderClient) DeleteOneID(id int64) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int64) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int64) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderSnap queries the order_snap edge of a Order.
func (c *OrderClient) QueryOrderSnap(o *Order) *OrderSnapQuery {
	query := &OrderSnapQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ordersnap.Table, ordersnap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderSnapTable, order.OrderSnapColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderSub queries the order_sub edge of a Order.
func (c *OrderClient) QueryOrderSub(o *Order) *OrderSubQuery {
	query := &OrderSubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ordersub.Table, ordersub.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderSubTable, order.OrderSubColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// OrderDetailClient is a client for the OrderDetail schema.
type OrderDetailClient struct {
	config
}

// NewOrderDetailClient returns a client for the OrderDetail from the given config.
func NewOrderDetailClient(c config) *OrderDetailClient {
	return &OrderDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderdetail.Hooks(f(g(h())))`.
func (c *OrderDetailClient) Use(hooks ...Hook) {
	c.hooks.OrderDetail = append(c.hooks.OrderDetail, hooks...)
}

// Create returns a create builder for OrderDetail.
func (c *OrderDetailClient) Create() *OrderDetailCreate {
	mutation := newOrderDetailMutation(c.config, OpCreate)
	return &OrderDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderDetail entities.
func (c *OrderDetailClient) CreateBulk(builders ...*OrderDetailCreate) *OrderDetailCreateBulk {
	return &OrderDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderDetail.
func (c *OrderDetailClient) Update() *OrderDetailUpdate {
	mutation := newOrderDetailMutation(c.config, OpUpdate)
	return &OrderDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderDetailClient) UpdateOne(od *OrderDetail) *OrderDetailUpdateOne {
	mutation := newOrderDetailMutation(c.config, OpUpdateOne, withOrderDetail(od))
	return &OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderDetailClient) UpdateOneID(id int64) *OrderDetailUpdateOne {
	mutation := newOrderDetailMutation(c.config, OpUpdateOne, withOrderDetailID(id))
	return &OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderDetail.
func (c *OrderDetailClient) Delete() *OrderDetailDelete {
	mutation := newOrderDetailMutation(c.config, OpDelete)
	return &OrderDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderDetailClient) DeleteOne(od *OrderDetail) *OrderDetailDeleteOne {
	return c.DeleteOneID(od.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderDetailClient) DeleteOneID(id int64) *OrderDetailDeleteOne {
	builder := c.Delete().Where(orderdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDetailDeleteOne{builder}
}

// Query returns a query builder for OrderDetail.
func (c *OrderDetailClient) Query() *OrderDetailQuery {
	return &OrderDetailQuery{
		config: c.config,
	}
}

// Get returns a OrderDetail entity by its id.
func (c *OrderDetailClient) Get(ctx context.Context, id int64) (*OrderDetail, error) {
	return c.Query().Where(orderdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderDetailClient) GetX(ctx context.Context, id int64) *OrderDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderDetailClient) Hooks() []Hook {
	return c.hooks.OrderDetail
}

// OrderSnapClient is a client for the OrderSnap schema.
type OrderSnapClient struct {
	config
}

// NewOrderSnapClient returns a client for the OrderSnap from the given config.
func NewOrderSnapClient(c config) *OrderSnapClient {
	return &OrderSnapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordersnap.Hooks(f(g(h())))`.
func (c *OrderSnapClient) Use(hooks ...Hook) {
	c.hooks.OrderSnap = append(c.hooks.OrderSnap, hooks...)
}

// Create returns a create builder for OrderSnap.
func (c *OrderSnapClient) Create() *OrderSnapCreate {
	mutation := newOrderSnapMutation(c.config, OpCreate)
	return &OrderSnapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderSnap entities.
func (c *OrderSnapClient) CreateBulk(builders ...*OrderSnapCreate) *OrderSnapCreateBulk {
	return &OrderSnapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderSnap.
func (c *OrderSnapClient) Update() *OrderSnapUpdate {
	mutation := newOrderSnapMutation(c.config, OpUpdate)
	return &OrderSnapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderSnapClient) UpdateOne(os *OrderSnap) *OrderSnapUpdateOne {
	mutation := newOrderSnapMutation(c.config, OpUpdateOne, withOrderSnap(os))
	return &OrderSnapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderSnapClient) UpdateOneID(id int64) *OrderSnapUpdateOne {
	mutation := newOrderSnapMutation(c.config, OpUpdateOne, withOrderSnapID(id))
	return &OrderSnapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderSnap.
func (c *OrderSnapClient) Delete() *OrderSnapDelete {
	mutation := newOrderSnapMutation(c.config, OpDelete)
	return &OrderSnapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderSnapClient) DeleteOne(os *OrderSnap) *OrderSnapDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderSnapClient) DeleteOneID(id int64) *OrderSnapDeleteOne {
	builder := c.Delete().Where(ordersnap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderSnapDeleteOne{builder}
}

// Query returns a query builder for OrderSnap.
func (c *OrderSnapClient) Query() *OrderSnapQuery {
	return &OrderSnapQuery{
		config: c.config,
	}
}

// Get returns a OrderSnap entity by its id.
func (c *OrderSnapClient) Get(ctx context.Context, id int64) (*OrderSnap, error) {
	return c.Query().Where(ordersnap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderSnapClient) GetX(ctx context.Context, id int64) *OrderSnap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderSnap.
func (c *OrderSnapClient) QueryOrder(os *OrderSnap) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordersnap.Table, ordersnap.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordersnap.OrderTable, ordersnap.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderSnapClient) Hooks() []Hook {
	return c.hooks.OrderSnap
}

// OrderSubClient is a client for the OrderSub schema.
type OrderSubClient struct {
	config
}

// NewOrderSubClient returns a client for the OrderSub from the given config.
func NewOrderSubClient(c config) *OrderSubClient {
	return &OrderSubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordersub.Hooks(f(g(h())))`.
func (c *OrderSubClient) Use(hooks ...Hook) {
	c.hooks.OrderSub = append(c.hooks.OrderSub, hooks...)
}

// Create returns a create builder for OrderSub.
func (c *OrderSubClient) Create() *OrderSubCreate {
	mutation := newOrderSubMutation(c.config, OpCreate)
	return &OrderSubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderSub entities.
func (c *OrderSubClient) CreateBulk(builders ...*OrderSubCreate) *OrderSubCreateBulk {
	return &OrderSubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderSub.
func (c *OrderSubClient) Update() *OrderSubUpdate {
	mutation := newOrderSubMutation(c.config, OpUpdate)
	return &OrderSubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderSubClient) UpdateOne(os *OrderSub) *OrderSubUpdateOne {
	mutation := newOrderSubMutation(c.config, OpUpdateOne, withOrderSub(os))
	return &OrderSubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderSubClient) UpdateOneID(id int64) *OrderSubUpdateOne {
	mutation := newOrderSubMutation(c.config, OpUpdateOne, withOrderSubID(id))
	return &OrderSubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderSub.
func (c *OrderSubClient) Delete() *OrderSubDelete {
	mutation := newOrderSubMutation(c.config, OpDelete)
	return &OrderSubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderSubClient) DeleteOne(os *OrderSub) *OrderSubDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderSubClient) DeleteOneID(id int64) *OrderSubDeleteOne {
	builder := c.Delete().Where(ordersub.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderSubDeleteOne{builder}
}

// Query returns a query builder for OrderSub.
func (c *OrderSubClient) Query() *OrderSubQuery {
	return &OrderSubQuery{
		config: c.config,
	}
}

// Get returns a OrderSub entity by its id.
func (c *OrderSubClient) Get(ctx context.Context, id int64) (*OrderSub, error) {
	return c.Query().Where(ordersub.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderSubClient) GetX(ctx context.Context, id int64) *OrderSub {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderSub.
func (c *OrderSubClient) QueryOrder(os *OrderSub) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordersub.Table, ordersub.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordersub.OrderTable, ordersub.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderSubClient) Hooks() []Hook {
	return c.hooks.OrderSub
}
