// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/order/service/internal/data/model/order"
	"mall-go/app/order/service/internal/data/model/orderdetail"
	"mall-go/app/order/service/internal/data/model/ordersnap"
	"mall-go/app/order/service/internal/data/model/ordersub"
	"mall-go/app/order/service/internal/data/model/predicate"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrder       = "Order"
	TypeOrderDetail = "OrderDetail"
	TypeOrderSnap   = "OrderSnap"
	TypeOrderSub    = "OrderSub"
)

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int64
	create_time          *time.Time
	update_time          *time.Time
	delete_time          *time.Time
	order_no             *string
	transaction_id       *string
	user_id              *int64
	adduser_id           *int64
	total_price          *float64
	addtotal_price       *float64
	total_count          *int
	addtotal_count       *int
	final_total_price    *float64
	addfinal_total_price *float64
	status               *int
	addstatus            *int
	clearedFields        map[string]struct{}
	order_snap           map[int64]struct{}
	removedorder_snap    map[int64]struct{}
	clearedorder_snap    bool
	order_sub            map[int64]struct{}
	removedorder_sub     map[int64]struct{}
	clearedorder_sub     bool
	done                 bool
	oldValue             func(context.Context) (*Order, error)
	predicates           []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id int64) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *OrderMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *OrderMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *OrderMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *OrderMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[order.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *OrderMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[order.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *OrderMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, order.FieldDeleteTime)
}

// SetOrderNo sets the "order_no" field.
func (m *OrderMutation) SetOrderNo(s string) {
	m.order_no = &s
}

// OrderNo returns the value of the "order_no" field in the mutation.
func (m *OrderMutation) OrderNo() (r string, exists bool) {
	v := m.order_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderNo returns the old "order_no" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldOrderNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderNo: %w", err)
	}
	return oldValue.OrderNo, nil
}

// ResetOrderNo resets all changes to the "order_no" field.
func (m *OrderMutation) ResetOrderNo() {
	m.order_no = nil
}

// SetTransactionID sets the "transaction_id" field.
func (m *OrderMutation) SetTransactionID(s string) {
	m.transaction_id = &s
}

// TransactionID returns the value of the "transaction_id" field in the mutation.
func (m *OrderMutation) TransactionID() (r string, exists bool) {
	v := m.transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionID returns the old "transaction_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionID: %w", err)
	}
	return oldValue.TransactionID, nil
}

// ResetTransactionID resets all changes to the "transaction_id" field.
func (m *OrderMutation) ResetTransactionID() {
	m.transaction_id = nil
}

// SetUserID sets the "user_id" field.
func (m *OrderMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *OrderMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *OrderMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *OrderMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[order.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *OrderMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[order.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, order.FieldUserID)
}

// SetTotalPrice sets the "total_price" field.
func (m *OrderMutation) SetTotalPrice(f float64) {
	m.total_price = &f
	m.addtotal_price = nil
}

// TotalPrice returns the value of the "total_price" field in the mutation.
func (m *OrderMutation) TotalPrice() (r float64, exists bool) {
	v := m.total_price
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalPrice returns the old "total_price" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTotalPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalPrice: %w", err)
	}
	return oldValue.TotalPrice, nil
}

// AddTotalPrice adds f to the "total_price" field.
func (m *OrderMutation) AddTotalPrice(f float64) {
	if m.addtotal_price != nil {
		*m.addtotal_price += f
	} else {
		m.addtotal_price = &f
	}
}

// AddedTotalPrice returns the value that was added to the "total_price" field in this mutation.
func (m *OrderMutation) AddedTotalPrice() (r float64, exists bool) {
	v := m.addtotal_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalPrice resets all changes to the "total_price" field.
func (m *OrderMutation) ResetTotalPrice() {
	m.total_price = nil
	m.addtotal_price = nil
}

// SetTotalCount sets the "total_count" field.
func (m *OrderMutation) SetTotalCount(i int) {
	m.total_count = &i
	m.addtotal_count = nil
}

// TotalCount returns the value of the "total_count" field in the mutation.
func (m *OrderMutation) TotalCount() (r int, exists bool) {
	v := m.total_count
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalCount returns the old "total_count" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTotalCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalCount: %w", err)
	}
	return oldValue.TotalCount, nil
}

// AddTotalCount adds i to the "total_count" field.
func (m *OrderMutation) AddTotalCount(i int) {
	if m.addtotal_count != nil {
		*m.addtotal_count += i
	} else {
		m.addtotal_count = &i
	}
}

// AddedTotalCount returns the value that was added to the "total_count" field in this mutation.
func (m *OrderMutation) AddedTotalCount() (r int, exists bool) {
	v := m.addtotal_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalCount resets all changes to the "total_count" field.
func (m *OrderMutation) ResetTotalCount() {
	m.total_count = nil
	m.addtotal_count = nil
}

// SetFinalTotalPrice sets the "final_total_price" field.
func (m *OrderMutation) SetFinalTotalPrice(f float64) {
	m.final_total_price = &f
	m.addfinal_total_price = nil
}

// FinalTotalPrice returns the value of the "final_total_price" field in the mutation.
func (m *OrderMutation) FinalTotalPrice() (r float64, exists bool) {
	v := m.final_total_price
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalTotalPrice returns the old "final_total_price" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldFinalTotalPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalTotalPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalTotalPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalTotalPrice: %w", err)
	}
	return oldValue.FinalTotalPrice, nil
}

// AddFinalTotalPrice adds f to the "final_total_price" field.
func (m *OrderMutation) AddFinalTotalPrice(f float64) {
	if m.addfinal_total_price != nil {
		*m.addfinal_total_price += f
	} else {
		m.addfinal_total_price = &f
	}
}

// AddedFinalTotalPrice returns the value that was added to the "final_total_price" field in this mutation.
func (m *OrderMutation) AddedFinalTotalPrice() (r float64, exists bool) {
	v := m.addfinal_total_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetFinalTotalPrice resets all changes to the "final_total_price" field.
func (m *OrderMutation) ResetFinalTotalPrice() {
	m.final_total_price = nil
	m.addfinal_total_price = nil
}

// SetStatus sets the "status" field.
func (m *OrderMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *OrderMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *OrderMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// AddOrderSnapIDs adds the "order_snap" edge to the OrderSnap entity by ids.
func (m *OrderMutation) AddOrderSnapIDs(ids ...int64) {
	if m.order_snap == nil {
		m.order_snap = make(map[int64]struct{})
	}
	for i := range ids {
		m.order_snap[ids[i]] = struct{}{}
	}
}

// ClearOrderSnap clears the "order_snap" edge to the OrderSnap entity.
func (m *OrderMutation) ClearOrderSnap() {
	m.clearedorder_snap = true
}

// OrderSnapCleared reports if the "order_snap" edge to the OrderSnap entity was cleared.
func (m *OrderMutation) OrderSnapCleared() bool {
	return m.clearedorder_snap
}

// RemoveOrderSnapIDs removes the "order_snap" edge to the OrderSnap entity by IDs.
func (m *OrderMutation) RemoveOrderSnapIDs(ids ...int64) {
	if m.removedorder_snap == nil {
		m.removedorder_snap = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.order_snap, ids[i])
		m.removedorder_snap[ids[i]] = struct{}{}
	}
}

// RemovedOrderSnap returns the removed IDs of the "order_snap" edge to the OrderSnap entity.
func (m *OrderMutation) RemovedOrderSnapIDs() (ids []int64) {
	for id := range m.removedorder_snap {
		ids = append(ids, id)
	}
	return
}

// OrderSnapIDs returns the "order_snap" edge IDs in the mutation.
func (m *OrderMutation) OrderSnapIDs() (ids []int64) {
	for id := range m.order_snap {
		ids = append(ids, id)
	}
	return
}

// ResetOrderSnap resets all changes to the "order_snap" edge.
func (m *OrderMutation) ResetOrderSnap() {
	m.order_snap = nil
	m.clearedorder_snap = false
	m.removedorder_snap = nil
}

// AddOrderSubIDs adds the "order_sub" edge to the OrderSub entity by ids.
func (m *OrderMutation) AddOrderSubIDs(ids ...int64) {
	if m.order_sub == nil {
		m.order_sub = make(map[int64]struct{})
	}
	for i := range ids {
		m.order_sub[ids[i]] = struct{}{}
	}
}

// ClearOrderSub clears the "order_sub" edge to the OrderSub entity.
func (m *OrderMutation) ClearOrderSub() {
	m.clearedorder_sub = true
}

// OrderSubCleared reports if the "order_sub" edge to the OrderSub entity was cleared.
func (m *OrderMutation) OrderSubCleared() bool {
	return m.clearedorder_sub
}

// RemoveOrderSubIDs removes the "order_sub" edge to the OrderSub entity by IDs.
func (m *OrderMutation) RemoveOrderSubIDs(ids ...int64) {
	if m.removedorder_sub == nil {
		m.removedorder_sub = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.order_sub, ids[i])
		m.removedorder_sub[ids[i]] = struct{}{}
	}
}

// RemovedOrderSub returns the removed IDs of the "order_sub" edge to the OrderSub entity.
func (m *OrderMutation) RemovedOrderSubIDs() (ids []int64) {
	for id := range m.removedorder_sub {
		ids = append(ids, id)
	}
	return
}

// OrderSubIDs returns the "order_sub" edge IDs in the mutation.
func (m *OrderMutation) OrderSubIDs() (ids []int64) {
	for id := range m.order_sub {
		ids = append(ids, id)
	}
	return
}

// ResetOrderSub resets all changes to the "order_sub" edge.
func (m *OrderMutation) ResetOrderSub() {
	m.order_sub = nil
	m.clearedorder_sub = false
	m.removedorder_sub = nil
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.create_time != nil {
		fields = append(fields, order.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, order.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, order.FieldDeleteTime)
	}
	if m.order_no != nil {
		fields = append(fields, order.FieldOrderNo)
	}
	if m.transaction_id != nil {
		fields = append(fields, order.FieldTransactionID)
	}
	if m.user_id != nil {
		fields = append(fields, order.FieldUserID)
	}
	if m.total_price != nil {
		fields = append(fields, order.FieldTotalPrice)
	}
	if m.total_count != nil {
		fields = append(fields, order.FieldTotalCount)
	}
	if m.final_total_price != nil {
		fields = append(fields, order.FieldFinalTotalPrice)
	}
	if m.status != nil {
		fields = append(fields, order.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreateTime:
		return m.CreateTime()
	case order.FieldUpdateTime:
		return m.UpdateTime()
	case order.FieldDeleteTime:
		return m.DeleteTime()
	case order.FieldOrderNo:
		return m.OrderNo()
	case order.FieldTransactionID:
		return m.TransactionID()
	case order.FieldUserID:
		return m.UserID()
	case order.FieldTotalPrice:
		return m.TotalPrice()
	case order.FieldTotalCount:
		return m.TotalCount()
	case order.FieldFinalTotalPrice:
		return m.FinalTotalPrice()
	case order.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case order.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case order.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case order.FieldOrderNo:
		return m.OldOrderNo(ctx)
	case order.FieldTransactionID:
		return m.OldTransactionID(ctx)
	case order.FieldUserID:
		return m.OldUserID(ctx)
	case order.FieldTotalPrice:
		return m.OldTotalPrice(ctx)
	case order.FieldTotalCount:
		return m.OldTotalCount(ctx)
	case order.FieldFinalTotalPrice:
		return m.OldFinalTotalPrice(ctx)
	case order.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case order.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case order.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case order.FieldOrderNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderNo(v)
		return nil
	case order.FieldTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionID(v)
		return nil
	case order.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case order.FieldTotalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalPrice(v)
		return nil
	case order.FieldTotalCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalCount(v)
		return nil
	case order.FieldFinalTotalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalTotalPrice(v)
		return nil
	case order.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, order.FieldUserID)
	}
	if m.addtotal_price != nil {
		fields = append(fields, order.FieldTotalPrice)
	}
	if m.addtotal_count != nil {
		fields = append(fields, order.FieldTotalCount)
	}
	if m.addfinal_total_price != nil {
		fields = append(fields, order.FieldFinalTotalPrice)
	}
	if m.addstatus != nil {
		fields = append(fields, order.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldUserID:
		return m.AddedUserID()
	case order.FieldTotalPrice:
		return m.AddedTotalPrice()
	case order.FieldTotalCount:
		return m.AddedTotalCount()
	case order.FieldFinalTotalPrice:
		return m.AddedFinalTotalPrice()
	case order.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case order.FieldTotalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalPrice(v)
		return nil
	case order.FieldTotalCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalCount(v)
		return nil
	case order.FieldFinalTotalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinalTotalPrice(v)
		return nil
	case order.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldDeleteTime) {
		fields = append(fields, order.FieldDeleteTime)
	}
	if m.FieldCleared(order.FieldUserID) {
		fields = append(fields, order.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case order.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case order.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case order.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case order.FieldOrderNo:
		m.ResetOrderNo()
		return nil
	case order.FieldTransactionID:
		m.ResetTransactionID()
		return nil
	case order.FieldUserID:
		m.ResetUserID()
		return nil
	case order.FieldTotalPrice:
		m.ResetTotalPrice()
		return nil
	case order.FieldTotalCount:
		m.ResetTotalCount()
		return nil
	case order.FieldFinalTotalPrice:
		m.ResetFinalTotalPrice()
		return nil
	case order.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.order_snap != nil {
		edges = append(edges, order.EdgeOrderSnap)
	}
	if m.order_sub != nil {
		edges = append(edges, order.EdgeOrderSub)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeOrderSnap:
		ids := make([]ent.Value, 0, len(m.order_snap))
		for id := range m.order_snap {
			ids = append(ids, id)
		}
		return ids
	case order.EdgeOrderSub:
		ids := make([]ent.Value, 0, len(m.order_sub))
		for id := range m.order_sub {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedorder_snap != nil {
		edges = append(edges, order.EdgeOrderSnap)
	}
	if m.removedorder_sub != nil {
		edges = append(edges, order.EdgeOrderSub)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeOrderSnap:
		ids := make([]ent.Value, 0, len(m.removedorder_snap))
		for id := range m.removedorder_snap {
			ids = append(ids, id)
		}
		return ids
	case order.EdgeOrderSub:
		ids := make([]ent.Value, 0, len(m.removedorder_sub))
		for id := range m.removedorder_sub {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorder_snap {
		edges = append(edges, order.EdgeOrderSnap)
	}
	if m.clearedorder_sub {
		edges = append(edges, order.EdgeOrderSub)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	switch name {
	case order.EdgeOrderSnap:
		return m.clearedorder_snap
	case order.EdgeOrderSub:
		return m.clearedorder_sub
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	switch name {
	case order.EdgeOrderSnap:
		m.ResetOrderSnap()
		return nil
	case order.EdgeOrderSub:
		m.ResetOrderSub()
		return nil
	}
	return fmt.Errorf("unknown Order edge %s", name)
}

// OrderDetailMutation represents an operation that mutates the OrderDetail nodes in the graph.
type OrderDetailMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	create_time    *time.Time
	update_time    *time.Time
	delete_time    *time.Time
	user_id        *int64
	adduser_id     *int64
	pay_way        *int
	addpay_way     *int
	client_type    *int
	addclient_type *int
	ship_no        *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*OrderDetail, error)
	predicates     []predicate.OrderDetail
}

var _ ent.Mutation = (*OrderDetailMutation)(nil)

// orderdetailOption allows management of the mutation configuration using functional options.
type orderdetailOption func(*OrderDetailMutation)

// newOrderDetailMutation creates new mutation for the OrderDetail entity.
func newOrderDetailMutation(c config, op Op, opts ...orderdetailOption) *OrderDetailMutation {
	m := &OrderDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderDetailID sets the ID field of the mutation.
func withOrderDetailID(id int64) orderdetailOption {
	return func(m *OrderDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderDetail
		)
		m.oldValue = func(ctx context.Context) (*OrderDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderDetail sets the old OrderDetail of the mutation.
func withOrderDetail(node *OrderDetail) orderdetailOption {
	return func(m *OrderDetailMutation) {
		m.oldValue = func(context.Context) (*OrderDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderDetailMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderDetailMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *OrderDetailMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderDetailMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderDetail entity.
// If the OrderDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderDetailMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderDetailMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderDetailMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderDetailMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderDetail entity.
// If the OrderDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderDetailMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderDetailMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *OrderDetailMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *OrderDetailMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the OrderDetail entity.
// If the OrderDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderDetailMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *OrderDetailMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[orderdetail.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *OrderDetailMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[orderdetail.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *OrderDetailMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, orderdetail.FieldDeleteTime)
}

// SetUserID sets the "user_id" field.
func (m *OrderDetailMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderDetailMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the OrderDetail entity.
// If the OrderDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderDetailMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *OrderDetailMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *OrderDetailMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderDetailMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetPayWay sets the "pay_way" field.
func (m *OrderDetailMutation) SetPayWay(i int) {
	m.pay_way = &i
	m.addpay_way = nil
}

// PayWay returns the value of the "pay_way" field in the mutation.
func (m *OrderDetailMutation) PayWay() (r int, exists bool) {
	v := m.pay_way
	if v == nil {
		return
	}
	return *v, true
}

// OldPayWay returns the old "pay_way" field's value of the OrderDetail entity.
// If the OrderDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderDetailMutation) OldPayWay(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayWay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayWay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayWay: %w", err)
	}
	return oldValue.PayWay, nil
}

// AddPayWay adds i to the "pay_way" field.
func (m *OrderDetailMutation) AddPayWay(i int) {
	if m.addpay_way != nil {
		*m.addpay_way += i
	} else {
		m.addpay_way = &i
	}
}

// AddedPayWay returns the value that was added to the "pay_way" field in this mutation.
func (m *OrderDetailMutation) AddedPayWay() (r int, exists bool) {
	v := m.addpay_way
	if v == nil {
		return
	}
	return *v, true
}

// ResetPayWay resets all changes to the "pay_way" field.
func (m *OrderDetailMutation) ResetPayWay() {
	m.pay_way = nil
	m.addpay_way = nil
}

// SetClientType sets the "client_type" field.
func (m *OrderDetailMutation) SetClientType(i int) {
	m.client_type = &i
	m.addclient_type = nil
}

// ClientType returns the value of the "client_type" field in the mutation.
func (m *OrderDetailMutation) ClientType() (r int, exists bool) {
	v := m.client_type
	if v == nil {
		return
	}
	return *v, true
}

// OldClientType returns the old "client_type" field's value of the OrderDetail entity.
// If the OrderDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderDetailMutation) OldClientType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientType: %w", err)
	}
	return oldValue.ClientType, nil
}

// AddClientType adds i to the "client_type" field.
func (m *OrderDetailMutation) AddClientType(i int) {
	if m.addclient_type != nil {
		*m.addclient_type += i
	} else {
		m.addclient_type = &i
	}
}

// AddedClientType returns the value that was added to the "client_type" field in this mutation.
func (m *OrderDetailMutation) AddedClientType() (r int, exists bool) {
	v := m.addclient_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetClientType resets all changes to the "client_type" field.
func (m *OrderDetailMutation) ResetClientType() {
	m.client_type = nil
	m.addclient_type = nil
}

// SetShipNo sets the "ship_no" field.
func (m *OrderDetailMutation) SetShipNo(s string) {
	m.ship_no = &s
}

// ShipNo returns the value of the "ship_no" field in the mutation.
func (m *OrderDetailMutation) ShipNo() (r string, exists bool) {
	v := m.ship_no
	if v == nil {
		return
	}
	return *v, true
}

// OldShipNo returns the old "ship_no" field's value of the OrderDetail entity.
// If the OrderDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderDetailMutation) OldShipNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipNo: %w", err)
	}
	return oldValue.ShipNo, nil
}

// ResetShipNo resets all changes to the "ship_no" field.
func (m *OrderDetailMutation) ResetShipNo() {
	m.ship_no = nil
}

// Where appends a list predicates to the OrderDetailMutation builder.
func (m *OrderDetailMutation) Where(ps ...predicate.OrderDetail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderDetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderDetail).
func (m *OrderDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderDetailMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, orderdetail.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, orderdetail.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, orderdetail.FieldDeleteTime)
	}
	if m.user_id != nil {
		fields = append(fields, orderdetail.FieldUserID)
	}
	if m.pay_way != nil {
		fields = append(fields, orderdetail.FieldPayWay)
	}
	if m.client_type != nil {
		fields = append(fields, orderdetail.FieldClientType)
	}
	if m.ship_no != nil {
		fields = append(fields, orderdetail.FieldShipNo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderdetail.FieldCreateTime:
		return m.CreateTime()
	case orderdetail.FieldUpdateTime:
		return m.UpdateTime()
	case orderdetail.FieldDeleteTime:
		return m.DeleteTime()
	case orderdetail.FieldUserID:
		return m.UserID()
	case orderdetail.FieldPayWay:
		return m.PayWay()
	case orderdetail.FieldClientType:
		return m.ClientType()
	case orderdetail.FieldShipNo:
		return m.ShipNo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderdetail.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case orderdetail.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case orderdetail.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case orderdetail.FieldUserID:
		return m.OldUserID(ctx)
	case orderdetail.FieldPayWay:
		return m.OldPayWay(ctx)
	case orderdetail.FieldClientType:
		return m.OldClientType(ctx)
	case orderdetail.FieldShipNo:
		return m.OldShipNo(ctx)
	}
	return nil, fmt.Errorf("unknown OrderDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderdetail.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case orderdetail.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case orderdetail.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case orderdetail.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case orderdetail.FieldPayWay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayWay(v)
		return nil
	case orderdetail.FieldClientType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientType(v)
		return nil
	case orderdetail.FieldShipNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipNo(v)
		return nil
	}
	return fmt.Errorf("unknown OrderDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderDetailMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, orderdetail.FieldUserID)
	}
	if m.addpay_way != nil {
		fields = append(fields, orderdetail.FieldPayWay)
	}
	if m.addclient_type != nil {
		fields = append(fields, orderdetail.FieldClientType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderdetail.FieldUserID:
		return m.AddedUserID()
	case orderdetail.FieldPayWay:
		return m.AddedPayWay()
	case orderdetail.FieldClientType:
		return m.AddedClientType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderdetail.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case orderdetail.FieldPayWay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPayWay(v)
		return nil
	case orderdetail.FieldClientType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClientType(v)
		return nil
	}
	return fmt.Errorf("unknown OrderDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderDetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderdetail.FieldDeleteTime) {
		fields = append(fields, orderdetail.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderDetailMutation) ClearField(name string) error {
	switch name {
	case orderdetail.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown OrderDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderDetailMutation) ResetField(name string) error {
	switch name {
	case orderdetail.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case orderdetail.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case orderdetail.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case orderdetail.FieldUserID:
		m.ResetUserID()
		return nil
	case orderdetail.FieldPayWay:
		m.ResetPayWay()
		return nil
	case orderdetail.FieldClientType:
		m.ResetClientType()
		return nil
	case orderdetail.FieldShipNo:
		m.ResetShipNo()
		return nil
	}
	return fmt.Errorf("unknown OrderDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderDetail edge %s", name)
}

// OrderSnapMutation represents an operation that mutates the OrderSnap nodes in the graph.
type OrderSnapMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	snap_img      *string
	snap_title    *string
	snap_items    *string
	snap_address  *string
	clearedFields map[string]struct{}
	_order        *int64
	cleared_order bool
	done          bool
	oldValue      func(context.Context) (*OrderSnap, error)
	predicates    []predicate.OrderSnap
}

var _ ent.Mutation = (*OrderSnapMutation)(nil)

// ordersnapOption allows management of the mutation configuration using functional options.
type ordersnapOption func(*OrderSnapMutation)

// newOrderSnapMutation creates new mutation for the OrderSnap entity.
func newOrderSnapMutation(c config, op Op, opts ...ordersnapOption) *OrderSnapMutation {
	m := &OrderSnapMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderSnap,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderSnapID sets the ID field of the mutation.
func withOrderSnapID(id int64) ordersnapOption {
	return func(m *OrderSnapMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderSnap
		)
		m.oldValue = func(ctx context.Context) (*OrderSnap, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderSnap.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderSnap sets the old OrderSnap of the mutation.
func withOrderSnap(node *OrderSnap) ordersnapOption {
	return func(m *OrderSnapMutation) {
		m.oldValue = func(context.Context) (*OrderSnap, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderSnapMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderSnapMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderSnapMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderSnapMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderSnap.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSnapImg sets the "snap_img" field.
func (m *OrderSnapMutation) SetSnapImg(s string) {
	m.snap_img = &s
}

// SnapImg returns the value of the "snap_img" field in the mutation.
func (m *OrderSnapMutation) SnapImg() (r string, exists bool) {
	v := m.snap_img
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapImg returns the old "snap_img" field's value of the OrderSnap entity.
// If the OrderSnap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSnapMutation) OldSnapImg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapImg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapImg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapImg: %w", err)
	}
	return oldValue.SnapImg, nil
}

// ResetSnapImg resets all changes to the "snap_img" field.
func (m *OrderSnapMutation) ResetSnapImg() {
	m.snap_img = nil
}

// SetSnapTitle sets the "snap_title" field.
func (m *OrderSnapMutation) SetSnapTitle(s string) {
	m.snap_title = &s
}

// SnapTitle returns the value of the "snap_title" field in the mutation.
func (m *OrderSnapMutation) SnapTitle() (r string, exists bool) {
	v := m.snap_title
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapTitle returns the old "snap_title" field's value of the OrderSnap entity.
// If the OrderSnap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSnapMutation) OldSnapTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapTitle: %w", err)
	}
	return oldValue.SnapTitle, nil
}

// ResetSnapTitle resets all changes to the "snap_title" field.
func (m *OrderSnapMutation) ResetSnapTitle() {
	m.snap_title = nil
}

// SetSnapItems sets the "snap_items" field.
func (m *OrderSnapMutation) SetSnapItems(s string) {
	m.snap_items = &s
}

// SnapItems returns the value of the "snap_items" field in the mutation.
func (m *OrderSnapMutation) SnapItems() (r string, exists bool) {
	v := m.snap_items
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapItems returns the old "snap_items" field's value of the OrderSnap entity.
// If the OrderSnap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSnapMutation) OldSnapItems(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapItems is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapItems requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapItems: %w", err)
	}
	return oldValue.SnapItems, nil
}

// ResetSnapItems resets all changes to the "snap_items" field.
func (m *OrderSnapMutation) ResetSnapItems() {
	m.snap_items = nil
}

// SetSnapAddress sets the "snap_address" field.
func (m *OrderSnapMutation) SetSnapAddress(s string) {
	m.snap_address = &s
}

// SnapAddress returns the value of the "snap_address" field in the mutation.
func (m *OrderSnapMutation) SnapAddress() (r string, exists bool) {
	v := m.snap_address
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapAddress returns the old "snap_address" field's value of the OrderSnap entity.
// If the OrderSnap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSnapMutation) OldSnapAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapAddress: %w", err)
	}
	return oldValue.SnapAddress, nil
}

// ResetSnapAddress resets all changes to the "snap_address" field.
func (m *OrderSnapMutation) ResetSnapAddress() {
	m.snap_address = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderSnapMutation) SetOrderID(i int64) {
	m._order = &i
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderSnapMutation) OrderID() (r int64, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderSnap entity.
// If the OrderSnap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSnapMutation) OldOrderID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OrderSnapMutation) ClearOrderID() {
	m._order = nil
	m.clearedFields[ordersnap.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OrderSnapMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[ordersnap.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderSnapMutation) ResetOrderID() {
	m._order = nil
	delete(m.clearedFields, ordersnap.FieldOrderID)
}

// ClearOrder clears the "order" edge to the Order entity.
func (m *OrderSnapMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the Order entity was cleared.
func (m *OrderSnapMutation) OrderCleared() bool {
	return m.OrderIDCleared() || m.cleared_order
}

// OrderIDs returns the "order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderID instead. It exists only for internal usage by the builders.
func (m *OrderSnapMutation) OrderIDs() (ids []int64) {
	if id := m._order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *OrderSnapMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
}

// Where appends a list predicates to the OrderSnapMutation builder.
func (m *OrderSnapMutation) Where(ps ...predicate.OrderSnap) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderSnapMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderSnap).
func (m *OrderSnapMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderSnapMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.snap_img != nil {
		fields = append(fields, ordersnap.FieldSnapImg)
	}
	if m.snap_title != nil {
		fields = append(fields, ordersnap.FieldSnapTitle)
	}
	if m.snap_items != nil {
		fields = append(fields, ordersnap.FieldSnapItems)
	}
	if m.snap_address != nil {
		fields = append(fields, ordersnap.FieldSnapAddress)
	}
	if m._order != nil {
		fields = append(fields, ordersnap.FieldOrderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderSnapMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ordersnap.FieldSnapImg:
		return m.SnapImg()
	case ordersnap.FieldSnapTitle:
		return m.SnapTitle()
	case ordersnap.FieldSnapItems:
		return m.SnapItems()
	case ordersnap.FieldSnapAddress:
		return m.SnapAddress()
	case ordersnap.FieldOrderID:
		return m.OrderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderSnapMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ordersnap.FieldSnapImg:
		return m.OldSnapImg(ctx)
	case ordersnap.FieldSnapTitle:
		return m.OldSnapTitle(ctx)
	case ordersnap.FieldSnapItems:
		return m.OldSnapItems(ctx)
	case ordersnap.FieldSnapAddress:
		return m.OldSnapAddress(ctx)
	case ordersnap.FieldOrderID:
		return m.OldOrderID(ctx)
	}
	return nil, fmt.Errorf("unknown OrderSnap field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderSnapMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ordersnap.FieldSnapImg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapImg(v)
		return nil
	case ordersnap.FieldSnapTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapTitle(v)
		return nil
	case ordersnap.FieldSnapItems:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapItems(v)
		return nil
	case ordersnap.FieldSnapAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapAddress(v)
		return nil
	case ordersnap.FieldOrderID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderSnap field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderSnapMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderSnapMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderSnapMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OrderSnap numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderSnapMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ordersnap.FieldOrderID) {
		fields = append(fields, ordersnap.FieldOrderID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderSnapMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderSnapMutation) ClearField(name string) error {
	switch name {
	case ordersnap.FieldOrderID:
		m.ClearOrderID()
		return nil
	}
	return fmt.Errorf("unknown OrderSnap nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderSnapMutation) ResetField(name string) error {
	switch name {
	case ordersnap.FieldSnapImg:
		m.ResetSnapImg()
		return nil
	case ordersnap.FieldSnapTitle:
		m.ResetSnapTitle()
		return nil
	case ordersnap.FieldSnapItems:
		m.ResetSnapItems()
		return nil
	case ordersnap.FieldSnapAddress:
		m.ResetSnapAddress()
		return nil
	case ordersnap.FieldOrderID:
		m.ResetOrderID()
		return nil
	}
	return fmt.Errorf("unknown OrderSnap field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderSnapMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._order != nil {
		edges = append(edges, ordersnap.EdgeOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderSnapMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ordersnap.EdgeOrder:
		if id := m._order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderSnapMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderSnapMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderSnapMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_order {
		edges = append(edges, ordersnap.EdgeOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderSnapMutation) EdgeCleared(name string) bool {
	switch name {
	case ordersnap.EdgeOrder:
		return m.cleared_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderSnapMutation) ClearEdge(name string) error {
	switch name {
	case ordersnap.EdgeOrder:
		m.ClearOrder()
		return nil
	}
	return fmt.Errorf("unknown OrderSnap unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderSnapMutation) ResetEdge(name string) error {
	switch name {
	case ordersnap.EdgeOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown OrderSnap edge %s", name)
}

// OrderSubMutation represents an operation that mutates the OrderSub nodes in the graph.
type OrderSubMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	create_time    *time.Time
	update_time    *time.Time
	delete_time    *time.Time
	order_no       *string
	user_id        *int64
	adduser_id     *int64
	price          *float64
	addprice       *float64
	count          *int
	addcount       *int
	final_price    *float64
	addfinal_price *float64
	status         *int
	addstatus      *int
	clearedFields  map[string]struct{}
	_order         *int64
	cleared_order  bool
	done           bool
	oldValue       func(context.Context) (*OrderSub, error)
	predicates     []predicate.OrderSub
}

var _ ent.Mutation = (*OrderSubMutation)(nil)

// ordersubOption allows management of the mutation configuration using functional options.
type ordersubOption func(*OrderSubMutation)

// newOrderSubMutation creates new mutation for the OrderSub entity.
func newOrderSubMutation(c config, op Op, opts ...ordersubOption) *OrderSubMutation {
	m := &OrderSubMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderSub,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderSubID sets the ID field of the mutation.
func withOrderSubID(id int64) ordersubOption {
	return func(m *OrderSubMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderSub
		)
		m.oldValue = func(ctx context.Context) (*OrderSub, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderSub.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderSub sets the old OrderSub of the mutation.
func withOrderSub(node *OrderSub) ordersubOption {
	return func(m *OrderSubMutation) {
		m.oldValue = func(context.Context) (*OrderSub, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderSubMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderSubMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderSubMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderSubMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderSub.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *OrderSubMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderSubMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderSubMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderSubMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderSubMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderSubMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *OrderSubMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *OrderSubMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *OrderSubMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[ordersub.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *OrderSubMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[ordersub.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *OrderSubMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, ordersub.FieldDeleteTime)
}

// SetOrderNo sets the "order_no" field.
func (m *OrderSubMutation) SetOrderNo(s string) {
	m.order_no = &s
}

// OrderNo returns the value of the "order_no" field in the mutation.
func (m *OrderSubMutation) OrderNo() (r string, exists bool) {
	v := m.order_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderNo returns the old "order_no" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldOrderNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderNo: %w", err)
	}
	return oldValue.OrderNo, nil
}

// ResetOrderNo resets all changes to the "order_no" field.
func (m *OrderSubMutation) ResetOrderNo() {
	m.order_no = nil
}

// SetUserID sets the "user_id" field.
func (m *OrderSubMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderSubMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *OrderSubMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *OrderSubMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *OrderSubMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[ordersub.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *OrderSubMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[ordersub.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderSubMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, ordersub.FieldUserID)
}

// SetPrice sets the "price" field.
func (m *OrderSubMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *OrderSubMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *OrderSubMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *OrderSubMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *OrderSubMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetCount sets the "count" field.
func (m *OrderSubMutation) SetCount(i int) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *OrderSubMutation) Count() (r int, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *OrderSubMutation) AddCount(i int) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *OrderSubMutation) AddedCount() (r int, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *OrderSubMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// SetFinalPrice sets the "final_price" field.
func (m *OrderSubMutation) SetFinalPrice(f float64) {
	m.final_price = &f
	m.addfinal_price = nil
}

// FinalPrice returns the value of the "final_price" field in the mutation.
func (m *OrderSubMutation) FinalPrice() (r float64, exists bool) {
	v := m.final_price
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalPrice returns the old "final_price" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldFinalPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalPrice: %w", err)
	}
	return oldValue.FinalPrice, nil
}

// AddFinalPrice adds f to the "final_price" field.
func (m *OrderSubMutation) AddFinalPrice(f float64) {
	if m.addfinal_price != nil {
		*m.addfinal_price += f
	} else {
		m.addfinal_price = &f
	}
}

// AddedFinalPrice returns the value that was added to the "final_price" field in this mutation.
func (m *OrderSubMutation) AddedFinalPrice() (r float64, exists bool) {
	v := m.addfinal_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetFinalPrice resets all changes to the "final_price" field.
func (m *OrderSubMutation) ResetFinalPrice() {
	m.final_price = nil
	m.addfinal_price = nil
}

// SetStatus sets the "status" field.
func (m *OrderSubMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderSubMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *OrderSubMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *OrderSubMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderSubMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetOrderID sets the "order_id" field.
func (m *OrderSubMutation) SetOrderID(i int64) {
	m._order = &i
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderSubMutation) OrderID() (r int64, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderSub entity.
// If the OrderSub object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderSubMutation) OldOrderID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *OrderSubMutation) ClearOrderID() {
	m._order = nil
	m.clearedFields[ordersub.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *OrderSubMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[ordersub.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderSubMutation) ResetOrderID() {
	m._order = nil
	delete(m.clearedFields, ordersub.FieldOrderID)
}

// ClearOrder clears the "order" edge to the Order entity.
func (m *OrderSubMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the Order entity was cleared.
func (m *OrderSubMutation) OrderCleared() bool {
	return m.OrderIDCleared() || m.cleared_order
}

// OrderIDs returns the "order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderID instead. It exists only for internal usage by the builders.
func (m *OrderSubMutation) OrderIDs() (ids []int64) {
	if id := m._order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *OrderSubMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
}

// Where appends a list predicates to the OrderSubMutation builder.
func (m *OrderSubMutation) Where(ps ...predicate.OrderSub) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderSubMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderSub).
func (m *OrderSubMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderSubMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.create_time != nil {
		fields = append(fields, ordersub.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, ordersub.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, ordersub.FieldDeleteTime)
	}
	if m.order_no != nil {
		fields = append(fields, ordersub.FieldOrderNo)
	}
	if m.user_id != nil {
		fields = append(fields, ordersub.FieldUserID)
	}
	if m.price != nil {
		fields = append(fields, ordersub.FieldPrice)
	}
	if m.count != nil {
		fields = append(fields, ordersub.FieldCount)
	}
	if m.final_price != nil {
		fields = append(fields, ordersub.FieldFinalPrice)
	}
	if m.status != nil {
		fields = append(fields, ordersub.FieldStatus)
	}
	if m._order != nil {
		fields = append(fields, ordersub.FieldOrderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderSubMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ordersub.FieldCreateTime:
		return m.CreateTime()
	case ordersub.FieldUpdateTime:
		return m.UpdateTime()
	case ordersub.FieldDeleteTime:
		return m.DeleteTime()
	case ordersub.FieldOrderNo:
		return m.OrderNo()
	case ordersub.FieldUserID:
		return m.UserID()
	case ordersub.FieldPrice:
		return m.Price()
	case ordersub.FieldCount:
		return m.Count()
	case ordersub.FieldFinalPrice:
		return m.FinalPrice()
	case ordersub.FieldStatus:
		return m.Status()
	case ordersub.FieldOrderID:
		return m.OrderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderSubMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ordersub.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case ordersub.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case ordersub.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case ordersub.FieldOrderNo:
		return m.OldOrderNo(ctx)
	case ordersub.FieldUserID:
		return m.OldUserID(ctx)
	case ordersub.FieldPrice:
		return m.OldPrice(ctx)
	case ordersub.FieldCount:
		return m.OldCount(ctx)
	case ordersub.FieldFinalPrice:
		return m.OldFinalPrice(ctx)
	case ordersub.FieldStatus:
		return m.OldStatus(ctx)
	case ordersub.FieldOrderID:
		return m.OldOrderID(ctx)
	}
	return nil, fmt.Errorf("unknown OrderSub field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderSubMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ordersub.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case ordersub.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case ordersub.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case ordersub.FieldOrderNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderNo(v)
		return nil
	case ordersub.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case ordersub.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case ordersub.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case ordersub.FieldFinalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalPrice(v)
		return nil
	case ordersub.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ordersub.FieldOrderID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderSub field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderSubMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, ordersub.FieldUserID)
	}
	if m.addprice != nil {
		fields = append(fields, ordersub.FieldPrice)
	}
	if m.addcount != nil {
		fields = append(fields, ordersub.FieldCount)
	}
	if m.addfinal_price != nil {
		fields = append(fields, ordersub.FieldFinalPrice)
	}
	if m.addstatus != nil {
		fields = append(fields, ordersub.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderSubMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ordersub.FieldUserID:
		return m.AddedUserID()
	case ordersub.FieldPrice:
		return m.AddedPrice()
	case ordersub.FieldCount:
		return m.AddedCount()
	case ordersub.FieldFinalPrice:
		return m.AddedFinalPrice()
	case ordersub.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderSubMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ordersub.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case ordersub.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case ordersub.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	case ordersub.FieldFinalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinalPrice(v)
		return nil
	case ordersub.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown OrderSub numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderSubMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ordersub.FieldDeleteTime) {
		fields = append(fields, ordersub.FieldDeleteTime)
	}
	if m.FieldCleared(ordersub.FieldUserID) {
		fields = append(fields, ordersub.FieldUserID)
	}
	if m.FieldCleared(ordersub.FieldOrderID) {
		fields = append(fields, ordersub.FieldOrderID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderSubMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderSubMutation) ClearField(name string) error {
	switch name {
	case ordersub.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case ordersub.FieldUserID:
		m.ClearUserID()
		return nil
	case ordersub.FieldOrderID:
		m.ClearOrderID()
		return nil
	}
	return fmt.Errorf("unknown OrderSub nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderSubMutation) ResetField(name string) error {
	switch name {
	case ordersub.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case ordersub.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case ordersub.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case ordersub.FieldOrderNo:
		m.ResetOrderNo()
		return nil
	case ordersub.FieldUserID:
		m.ResetUserID()
		return nil
	case ordersub.FieldPrice:
		m.ResetPrice()
		return nil
	case ordersub.FieldCount:
		m.ResetCount()
		return nil
	case ordersub.FieldFinalPrice:
		m.ResetFinalPrice()
		return nil
	case ordersub.FieldStatus:
		m.ResetStatus()
		return nil
	case ordersub.FieldOrderID:
		m.ResetOrderID()
		return nil
	}
	return fmt.Errorf("unknown OrderSub field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderSubMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._order != nil {
		edges = append(edges, ordersub.EdgeOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderSubMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ordersub.EdgeOrder:
		if id := m._order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderSubMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderSubMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderSubMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_order {
		edges = append(edges, ordersub.EdgeOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderSubMutation) EdgeCleared(name string) bool {
	switch name {
	case ordersub.EdgeOrder:
		return m.cleared_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderSubMutation) ClearEdge(name string) error {
	switch name {
	case ordersub.EdgeOrder:
		m.ClearOrder()
		return nil
	}
	return fmt.Errorf("unknown OrderSub unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderSubMutation) ResetEdge(name string) error {
	switch name {
	case ordersub.EdgeOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown OrderSub edge %s", name)
}
