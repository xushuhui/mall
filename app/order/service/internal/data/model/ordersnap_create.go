// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/order/service/internal/data/model/order"
	"mall-go/app/order/service/internal/data/model/ordersnap"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderSnapCreate is the builder for creating a OrderSnap entity.
type OrderSnapCreate struct {
	config
	mutation *OrderSnapMutation
	hooks    []Hook
}

// SetSnapImg sets the "snap_img" field.
func (osc *OrderSnapCreate) SetSnapImg(s string) *OrderSnapCreate {
	osc.mutation.SetSnapImg(s)
	return osc
}

// SetSnapTitle sets the "snap_title" field.
func (osc *OrderSnapCreate) SetSnapTitle(s string) *OrderSnapCreate {
	osc.mutation.SetSnapTitle(s)
	return osc
}

// SetSnapItems sets the "snap_items" field.
func (osc *OrderSnapCreate) SetSnapItems(s string) *OrderSnapCreate {
	osc.mutation.SetSnapItems(s)
	return osc
}

// SetSnapAddress sets the "snap_address" field.
func (osc *OrderSnapCreate) SetSnapAddress(s string) *OrderSnapCreate {
	osc.mutation.SetSnapAddress(s)
	return osc
}

// SetOrderID sets the "order_id" field.
func (osc *OrderSnapCreate) SetOrderID(i int64) *OrderSnapCreate {
	osc.mutation.SetOrderID(i)
	return osc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osc *OrderSnapCreate) SetNillableOrderID(i *int64) *OrderSnapCreate {
	if i != nil {
		osc.SetOrderID(*i)
	}
	return osc
}

// SetOrder sets the "order" edge to the Order entity.
func (osc *OrderSnapCreate) SetOrder(o *Order) *OrderSnapCreate {
	return osc.SetOrderID(o.ID)
}

// Mutation returns the OrderSnapMutation object of the builder.
func (osc *OrderSnapCreate) Mutation() *OrderSnapMutation {
	return osc.mutation
}

// Save creates the OrderSnap in the database.
func (osc *OrderSnapCreate) Save(ctx context.Context) (*OrderSnap, error) {
	var (
		err  error
		node *OrderSnap
	)
	if len(osc.hooks) == 0 {
		if err = osc.check(); err != nil {
			return nil, err
		}
		node, err = osc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderSnapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osc.check(); err != nil {
				return nil, err
			}
			osc.mutation = mutation
			if node, err = osc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(osc.hooks) - 1; i >= 0; i-- {
			if osc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = osc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrderSnapCreate) SaveX(ctx context.Context) *OrderSnap {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrderSnapCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrderSnapCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrderSnapCreate) check() error {
	if _, ok := osc.mutation.SnapImg(); !ok {
		return &ValidationError{Name: "snap_img", err: errors.New(`model: missing required field "snap_img"`)}
	}
	if _, ok := osc.mutation.SnapTitle(); !ok {
		return &ValidationError{Name: "snap_title", err: errors.New(`model: missing required field "snap_title"`)}
	}
	if _, ok := osc.mutation.SnapItems(); !ok {
		return &ValidationError{Name: "snap_items", err: errors.New(`model: missing required field "snap_items"`)}
	}
	if _, ok := osc.mutation.SnapAddress(); !ok {
		return &ValidationError{Name: "snap_address", err: errors.New(`model: missing required field "snap_address"`)}
	}
	return nil
}

func (osc *OrderSnapCreate) sqlSave(ctx context.Context) (*OrderSnap, error) {
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (osc *OrderSnapCreate) createSpec() (*OrderSnap, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderSnap{config: osc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ordersnap.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordersnap.FieldID,
			},
		}
	)
	if value, ok := osc.mutation.SnapImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordersnap.FieldSnapImg,
		})
		_node.SnapImg = value
	}
	if value, ok := osc.mutation.SnapTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordersnap.FieldSnapTitle,
		})
		_node.SnapTitle = value
	}
	if value, ok := osc.mutation.SnapItems(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordersnap.FieldSnapItems,
		})
		_node.SnapItems = value
	}
	if value, ok := osc.mutation.SnapAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordersnap.FieldSnapAddress,
		})
		_node.SnapAddress = value
	}
	if nodes := osc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnap.OrderTable,
			Columns: []string{ordersnap.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderSnapCreateBulk is the builder for creating many OrderSnap entities in bulk.
type OrderSnapCreateBulk struct {
	config
	builders []*OrderSnapCreate
}

// Save creates the OrderSnap entities in the database.
func (oscb *OrderSnapCreateBulk) Save(ctx context.Context) ([]*OrderSnap, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrderSnap, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderSnapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrderSnapCreateBulk) SaveX(ctx context.Context) []*OrderSnap {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrderSnapCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrderSnapCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
