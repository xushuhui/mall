// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"log"

	"mall-go/app/coupon/service/internal/data/model/migrate"

	"mall-go/app/coupon/service/internal/data/model/coupon"
	"mall-go/app/coupon/service/internal/data/model/coupontemplate"
	"mall-go/app/coupon/service/internal/data/model/coupontype"
	"mall-go/app/coupon/service/internal/data/model/usercoupon"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// CouponTemplate is the client for interacting with the CouponTemplate builders.
	CouponTemplate *CouponTemplateClient
	// CouponType is the client for interacting with the CouponType builders.
	CouponType *CouponTypeClient
	// UserCoupon is the client for interacting with the UserCoupon builders.
	UserCoupon *UserCouponClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Coupon = NewCouponClient(c.config)
	c.CouponTemplate = NewCouponTemplateClient(c.config)
	c.CouponType = NewCouponTypeClient(c.config)
	c.UserCoupon = NewUserCouponClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Coupon:         NewCouponClient(cfg),
		CouponTemplate: NewCouponTemplateClient(cfg),
		CouponType:     NewCouponTypeClient(cfg),
		UserCoupon:     NewUserCouponClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Coupon:         NewCouponClient(cfg),
		CouponTemplate: NewCouponTemplateClient(cfg),
		CouponType:     NewCouponTypeClient(cfg),
		UserCoupon:     NewUserCouponClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Coupon.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Coupon.Use(hooks...)
	c.CouponTemplate.Use(hooks...)
	c.CouponType.Use(hooks...)
	c.UserCoupon.Use(hooks...)
}

// CouponClient is a client for the Coupon schema.
type CouponClient struct {
	config
}

// NewCouponClient returns a client for the Coupon from the given config.
func NewCouponClient(c config) *CouponClient {
	return &CouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupon.Hooks(f(g(h())))`.
func (c *CouponClient) Use(hooks ...Hook) {
	c.hooks.Coupon = append(c.hooks.Coupon, hooks...)
}

// Create returns a create builder for Coupon.
func (c *CouponClient) Create() *CouponCreate {
	mutation := newCouponMutation(c.config, OpCreate)
	return &CouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coupon entities.
func (c *CouponClient) CreateBulk(builders ...*CouponCreate) *CouponCreateBulk {
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coupon.
func (c *CouponClient) Update() *CouponUpdate {
	mutation := newCouponMutation(c.config, OpUpdate)
	return &CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponClient) UpdateOne(co *Coupon) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(co))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponClient) UpdateOneID(id int64) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCouponID(id))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coupon.
func (c *CouponClient) Delete() *CouponDelete {
	mutation := newCouponMutation(c.config, OpDelete)
	return &CouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CouponClient) DeleteOne(co *Coupon) *CouponDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CouponClient) DeleteOneID(id int64) *CouponDeleteOne {
	builder := c.Delete().Where(coupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDeleteOne{builder}
}

// Query returns a query builder for Coupon.
func (c *CouponClient) Query() *CouponQuery {
	return &CouponQuery{
		config: c.config,
	}
}

// Get returns a Coupon entity by its id.
func (c *CouponClient) Get(ctx context.Context, id int64) (*Coupon, error) {
	return c.Query().Where(coupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponClient) GetX(ctx context.Context, id int64) *Coupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponClient) Hooks() []Hook {
	return c.hooks.Coupon
}

// CouponTemplateClient is a client for the CouponTemplate schema.
type CouponTemplateClient struct {
	config
}

// NewCouponTemplateClient returns a client for the CouponTemplate from the given config.
func NewCouponTemplateClient(c config) *CouponTemplateClient {
	return &CouponTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupontemplate.Hooks(f(g(h())))`.
func (c *CouponTemplateClient) Use(hooks ...Hook) {
	c.hooks.CouponTemplate = append(c.hooks.CouponTemplate, hooks...)
}

// Create returns a create builder for CouponTemplate.
func (c *CouponTemplateClient) Create() *CouponTemplateCreate {
	mutation := newCouponTemplateMutation(c.config, OpCreate)
	return &CouponTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponTemplate entities.
func (c *CouponTemplateClient) CreateBulk(builders ...*CouponTemplateCreate) *CouponTemplateCreateBulk {
	return &CouponTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponTemplate.
func (c *CouponTemplateClient) Update() *CouponTemplateUpdate {
	mutation := newCouponTemplateMutation(c.config, OpUpdate)
	return &CouponTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponTemplateClient) UpdateOne(ct *CouponTemplate) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplate(ct))
	return &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponTemplateClient) UpdateOneID(id int64) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplateID(id))
	return &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponTemplate.
func (c *CouponTemplateClient) Delete() *CouponTemplateDelete {
	mutation := newCouponTemplateMutation(c.config, OpDelete)
	return &CouponTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CouponTemplateClient) DeleteOne(ct *CouponTemplate) *CouponTemplateDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CouponTemplateClient) DeleteOneID(id int64) *CouponTemplateDeleteOne {
	builder := c.Delete().Where(coupontemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponTemplateDeleteOne{builder}
}

// Query returns a query builder for CouponTemplate.
func (c *CouponTemplateClient) Query() *CouponTemplateQuery {
	return &CouponTemplateQuery{
		config: c.config,
	}
}

// Get returns a CouponTemplate entity by its id.
func (c *CouponTemplateClient) Get(ctx context.Context, id int64) (*CouponTemplate, error) {
	return c.Query().Where(coupontemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponTemplateClient) GetX(ctx context.Context, id int64) *CouponTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponTemplateClient) Hooks() []Hook {
	return c.hooks.CouponTemplate
}

// CouponTypeClient is a client for the CouponType schema.
type CouponTypeClient struct {
	config
}

// NewCouponTypeClient returns a client for the CouponType from the given config.
func NewCouponTypeClient(c config) *CouponTypeClient {
	return &CouponTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupontype.Hooks(f(g(h())))`.
func (c *CouponTypeClient) Use(hooks ...Hook) {
	c.hooks.CouponType = append(c.hooks.CouponType, hooks...)
}

// Create returns a create builder for CouponType.
func (c *CouponTypeClient) Create() *CouponTypeCreate {
	mutation := newCouponTypeMutation(c.config, OpCreate)
	return &CouponTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponType entities.
func (c *CouponTypeClient) CreateBulk(builders ...*CouponTypeCreate) *CouponTypeCreateBulk {
	return &CouponTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponType.
func (c *CouponTypeClient) Update() *CouponTypeUpdate {
	mutation := newCouponTypeMutation(c.config, OpUpdate)
	return &CouponTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponTypeClient) UpdateOne(ct *CouponType) *CouponTypeUpdateOne {
	mutation := newCouponTypeMutation(c.config, OpUpdateOne, withCouponType(ct))
	return &CouponTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponTypeClient) UpdateOneID(id int64) *CouponTypeUpdateOne {
	mutation := newCouponTypeMutation(c.config, OpUpdateOne, withCouponTypeID(id))
	return &CouponTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponType.
func (c *CouponTypeClient) Delete() *CouponTypeDelete {
	mutation := newCouponTypeMutation(c.config, OpDelete)
	return &CouponTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CouponTypeClient) DeleteOne(ct *CouponType) *CouponTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CouponTypeClient) DeleteOneID(id int64) *CouponTypeDeleteOne {
	builder := c.Delete().Where(coupontype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponTypeDeleteOne{builder}
}

// Query returns a query builder for CouponType.
func (c *CouponTypeClient) Query() *CouponTypeQuery {
	return &CouponTypeQuery{
		config: c.config,
	}
}

// Get returns a CouponType entity by its id.
func (c *CouponTypeClient) Get(ctx context.Context, id int64) (*CouponType, error) {
	return c.Query().Where(coupontype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponTypeClient) GetX(ctx context.Context, id int64) *CouponType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponTypeClient) Hooks() []Hook {
	return c.hooks.CouponType
}

// UserCouponClient is a client for the UserCoupon schema.
type UserCouponClient struct {
	config
}

// NewUserCouponClient returns a client for the UserCoupon from the given config.
func NewUserCouponClient(c config) *UserCouponClient {
	return &UserCouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercoupon.Hooks(f(g(h())))`.
func (c *UserCouponClient) Use(hooks ...Hook) {
	c.hooks.UserCoupon = append(c.hooks.UserCoupon, hooks...)
}

// Create returns a create builder for UserCoupon.
func (c *UserCouponClient) Create() *UserCouponCreate {
	mutation := newUserCouponMutation(c.config, OpCreate)
	return &UserCouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCoupon entities.
func (c *UserCouponClient) CreateBulk(builders ...*UserCouponCreate) *UserCouponCreateBulk {
	return &UserCouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCoupon.
func (c *UserCouponClient) Update() *UserCouponUpdate {
	mutation := newUserCouponMutation(c.config, OpUpdate)
	return &UserCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCouponClient) UpdateOne(uc *UserCoupon) *UserCouponUpdateOne {
	mutation := newUserCouponMutation(c.config, OpUpdateOne, withUserCoupon(uc))
	return &UserCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCouponClient) UpdateOneID(id int64) *UserCouponUpdateOne {
	mutation := newUserCouponMutation(c.config, OpUpdateOne, withUserCouponID(id))
	return &UserCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCoupon.
func (c *UserCouponClient) Delete() *UserCouponDelete {
	mutation := newUserCouponMutation(c.config, OpDelete)
	return &UserCouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserCouponClient) DeleteOne(uc *UserCoupon) *UserCouponDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserCouponClient) DeleteOneID(id int64) *UserCouponDeleteOne {
	builder := c.Delete().Where(usercoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCouponDeleteOne{builder}
}

// Query returns a query builder for UserCoupon.
func (c *UserCouponClient) Query() *UserCouponQuery {
	return &UserCouponQuery{
		config: c.config,
	}
}

// Get returns a UserCoupon entity by its id.
func (c *UserCouponClient) Get(ctx context.Context, id int64) (*UserCoupon, error) {
	return c.Query().Where(usercoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCouponClient) GetX(ctx context.Context, id int64) *UserCoupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserCouponClient) Hooks() []Hook {
	return c.hooks.UserCoupon
}
