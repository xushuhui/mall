// Code generated by ent, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/coupon/service/internal/data/model/coupon"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Coupon is the model entity for the Coupon schema.
type Coupon struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// FullMoney holds the value of the "full_money" field.
	FullMoney float64 `json:"full_money,omitempty"`
	// Minus holds the value of the "minus" field.
	Minus float64 `json:"minus,omitempty"`
	// 国内多是打折，国外多是百分比 off
	Rate float64 `json:"rate,omitempty"`
	// 1. 满减券 2.折扣券 3.无门槛券 4.满金额折扣券
	Type int `json:"type,omitempty"`
	// Valitiy holds the value of the "valitiy" field.
	Valitiy int `json:"valitiy,omitempty"`
	// ActivityID holds the value of the "activity_id" field.
	ActivityID int64 `json:"activity_id,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// WholeStore holds the value of the "whole_store" field.
	WholeStore int `json:"whole_store,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Coupon) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coupon.FieldFullMoney, coupon.FieldMinus, coupon.FieldRate:
			values[i] = new(sql.NullFloat64)
		case coupon.FieldID, coupon.FieldType, coupon.FieldValitiy, coupon.FieldActivityID, coupon.FieldWholeStore:
			values[i] = new(sql.NullInt64)
		case coupon.FieldTitle, coupon.FieldDescription, coupon.FieldRemark:
			values[i] = new(sql.NullString)
		case coupon.FieldCreateTime, coupon.FieldUpdateTime, coupon.FieldDeleteTime, coupon.FieldStartTime, coupon.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Coupon", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Coupon fields.
func (c *Coupon) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coupon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case coupon.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case coupon.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case coupon.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				c.DeleteTime = value.Time
			}
		case coupon.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case coupon.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				c.StartTime = value.Time
			}
		case coupon.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				c.EndTime = value.Time
			}
		case coupon.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case coupon.FieldFullMoney:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field full_money", values[i])
			} else if value.Valid {
				c.FullMoney = value.Float64
			}
		case coupon.FieldMinus:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field minus", values[i])
			} else if value.Valid {
				c.Minus = value.Float64
			}
		case coupon.FieldRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				c.Rate = value.Float64
			}
		case coupon.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = int(value.Int64)
			}
		case coupon.FieldValitiy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field valitiy", values[i])
			} else if value.Valid {
				c.Valitiy = int(value.Int64)
			}
		case coupon.FieldActivityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_id", values[i])
			} else if value.Valid {
				c.ActivityID = value.Int64
			}
		case coupon.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				c.Remark = value.String
			}
		case coupon.FieldWholeStore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field whole_store", values[i])
			} else if value.Valid {
				c.WholeStore = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Coupon.
// Note that you need to call Coupon.Unwrap() before calling this method if this Coupon
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Coupon) Update() *CouponUpdateOne {
	return (&CouponClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Coupon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Coupon) Unwrap() *Coupon {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("model: Coupon is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Coupon) String() string {
	var builder strings.Builder
	builder.WriteString("Coupon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_time=")
	builder.WriteString(c.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(c.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(c.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("full_money=")
	builder.WriteString(fmt.Sprintf("%v", c.FullMoney))
	builder.WriteString(", ")
	builder.WriteString("minus=")
	builder.WriteString(fmt.Sprintf("%v", c.Minus))
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", c.Rate))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("valitiy=")
	builder.WriteString(fmt.Sprintf("%v", c.Valitiy))
	builder.WriteString(", ")
	builder.WriteString("activity_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ActivityID))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(c.Remark)
	builder.WriteString(", ")
	builder.WriteString("whole_store=")
	builder.WriteString(fmt.Sprintf("%v", c.WholeStore))
	builder.WriteByte(')')
	return builder.String()
}

// Coupons is a parsable slice of Coupon.
type Coupons []*Coupon

func (c Coupons) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
