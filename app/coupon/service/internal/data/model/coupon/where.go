// Code generated by entc, DO NOT EDIT.

package coupon

import (
	"mall-go/app/coupon/service/internal/data/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// FullMoney applies equality check predicate on the "full_money" field. It's identical to FullMoneyEQ.
func FullMoney(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFullMoney), v))
	})
}

// Minus applies equality check predicate on the "minus" field. It's identical to MinusEQ.
func Minus(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinus), v))
	})
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRate), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Valitiy applies equality check predicate on the "valitiy" field. It's identical to ValitiyEQ.
func Valitiy(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValitiy), v))
	})
}

// ActivityID applies equality check predicate on the "activity_id" field. It's identical to ActivityIDEQ.
func ActivityID(v int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityID), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// WholeStore applies equality check predicate on the "whole_store" field. It's identical to WholeStoreEQ.
func WholeStore(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWholeStore), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeleteTime)))
	})
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeleteTime)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// FullMoneyEQ applies the EQ predicate on the "full_money" field.
func FullMoneyEQ(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFullMoney), v))
	})
}

// FullMoneyNEQ applies the NEQ predicate on the "full_money" field.
func FullMoneyNEQ(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFullMoney), v))
	})
}

// FullMoneyIn applies the In predicate on the "full_money" field.
func FullMoneyIn(vs ...float64) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFullMoney), v...))
	})
}

// FullMoneyNotIn applies the NotIn predicate on the "full_money" field.
func FullMoneyNotIn(vs ...float64) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFullMoney), v...))
	})
}

// FullMoneyGT applies the GT predicate on the "full_money" field.
func FullMoneyGT(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFullMoney), v))
	})
}

// FullMoneyGTE applies the GTE predicate on the "full_money" field.
func FullMoneyGTE(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFullMoney), v))
	})
}

// FullMoneyLT applies the LT predicate on the "full_money" field.
func FullMoneyLT(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFullMoney), v))
	})
}

// FullMoneyLTE applies the LTE predicate on the "full_money" field.
func FullMoneyLTE(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFullMoney), v))
	})
}

// MinusEQ applies the EQ predicate on the "minus" field.
func MinusEQ(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinus), v))
	})
}

// MinusNEQ applies the NEQ predicate on the "minus" field.
func MinusNEQ(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinus), v))
	})
}

// MinusIn applies the In predicate on the "minus" field.
func MinusIn(vs ...float64) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinus), v...))
	})
}

// MinusNotIn applies the NotIn predicate on the "minus" field.
func MinusNotIn(vs ...float64) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinus), v...))
	})
}

// MinusGT applies the GT predicate on the "minus" field.
func MinusGT(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinus), v))
	})
}

// MinusGTE applies the GTE predicate on the "minus" field.
func MinusGTE(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinus), v))
	})
}

// MinusLT applies the LT predicate on the "minus" field.
func MinusLT(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinus), v))
	})
}

// MinusLTE applies the LTE predicate on the "minus" field.
func MinusLTE(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinus), v))
	})
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRate), v))
	})
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRate), v))
	})
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float64) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRate), v...))
	})
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float64) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRate), v...))
	})
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRate), v))
	})
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRate), v))
	})
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRate), v))
	})
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRate), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// ValitiyEQ applies the EQ predicate on the "valitiy" field.
func ValitiyEQ(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValitiy), v))
	})
}

// ValitiyNEQ applies the NEQ predicate on the "valitiy" field.
func ValitiyNEQ(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValitiy), v))
	})
}

// ValitiyIn applies the In predicate on the "valitiy" field.
func ValitiyIn(vs ...int) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldValitiy), v...))
	})
}

// ValitiyNotIn applies the NotIn predicate on the "valitiy" field.
func ValitiyNotIn(vs ...int) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldValitiy), v...))
	})
}

// ValitiyGT applies the GT predicate on the "valitiy" field.
func ValitiyGT(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValitiy), v))
	})
}

// ValitiyGTE applies the GTE predicate on the "valitiy" field.
func ValitiyGTE(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValitiy), v))
	})
}

// ValitiyLT applies the LT predicate on the "valitiy" field.
func ValitiyLT(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValitiy), v))
	})
}

// ValitiyLTE applies the LTE predicate on the "valitiy" field.
func ValitiyLTE(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValitiy), v))
	})
}

// ActivityIDEQ applies the EQ predicate on the "activity_id" field.
func ActivityIDEQ(v int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityID), v))
	})
}

// ActivityIDNEQ applies the NEQ predicate on the "activity_id" field.
func ActivityIDNEQ(v int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivityID), v))
	})
}

// ActivityIDIn applies the In predicate on the "activity_id" field.
func ActivityIDIn(vs ...int64) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivityID), v...))
	})
}

// ActivityIDNotIn applies the NotIn predicate on the "activity_id" field.
func ActivityIDNotIn(vs ...int64) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivityID), v...))
	})
}

// ActivityIDGT applies the GT predicate on the "activity_id" field.
func ActivityIDGT(v int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivityID), v))
	})
}

// ActivityIDGTE applies the GTE predicate on the "activity_id" field.
func ActivityIDGTE(v int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivityID), v))
	})
}

// ActivityIDLT applies the LT predicate on the "activity_id" field.
func ActivityIDLT(v int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivityID), v))
	})
}

// ActivityIDLTE applies the LTE predicate on the "activity_id" field.
func ActivityIDLTE(v int64) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivityID), v))
	})
}

// ActivityIDIsNil applies the IsNil predicate on the "activity_id" field.
func ActivityIDIsNil() predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActivityID)))
	})
}

// ActivityIDNotNil applies the NotNil predicate on the "activity_id" field.
func ActivityIDNotNil() predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActivityID)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// WholeStoreEQ applies the EQ predicate on the "whole_store" field.
func WholeStoreEQ(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWholeStore), v))
	})
}

// WholeStoreNEQ applies the NEQ predicate on the "whole_store" field.
func WholeStoreNEQ(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWholeStore), v))
	})
}

// WholeStoreIn applies the In predicate on the "whole_store" field.
func WholeStoreIn(vs ...int) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWholeStore), v...))
	})
}

// WholeStoreNotIn applies the NotIn predicate on the "whole_store" field.
func WholeStoreNotIn(vs ...int) predicate.Coupon {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Coupon(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWholeStore), v...))
	})
}

// WholeStoreGT applies the GT predicate on the "whole_store" field.
func WholeStoreGT(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWholeStore), v))
	})
}

// WholeStoreGTE applies the GTE predicate on the "whole_store" field.
func WholeStoreGTE(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWholeStore), v))
	})
}

// WholeStoreLT applies the LT predicate on the "whole_store" field.
func WholeStoreLT(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWholeStore), v))
	})
}

// WholeStoreLTE applies the LTE predicate on the "whole_store" field.
func WholeStoreLTE(v int) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWholeStore), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		p(s.Not())
	})
}
