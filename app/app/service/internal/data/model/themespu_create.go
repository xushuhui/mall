// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/app/service/internal/data/model/theme"
	"mall-go/app/app/service/internal/data/model/themespu"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThemeSpuCreate is the builder for creating a ThemeSpu entity.
type ThemeSpuCreate struct {
	config
	mutation *ThemeSpuMutation
	hooks    []Hook
}

// SetThemeID sets the "theme_id" field.
func (tsc *ThemeSpuCreate) SetThemeID(i int64) *ThemeSpuCreate {
	tsc.mutation.SetThemeID(i)
	return tsc
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (tsc *ThemeSpuCreate) SetNillableThemeID(i *int64) *ThemeSpuCreate {
	if i != nil {
		tsc.SetThemeID(*i)
	}
	return tsc
}

// SetSpuID sets the "spu_id" field.
func (tsc *ThemeSpuCreate) SetSpuID(i int64) *ThemeSpuCreate {
	tsc.mutation.SetSpuID(i)
	return tsc
}

// SetTheme sets the "theme" edge to the Theme entity.
func (tsc *ThemeSpuCreate) SetTheme(t *Theme) *ThemeSpuCreate {
	return tsc.SetThemeID(t.ID)
}

// Mutation returns the ThemeSpuMutation object of the builder.
func (tsc *ThemeSpuCreate) Mutation() *ThemeSpuMutation {
	return tsc.mutation
}

// Save creates the ThemeSpu in the database.
func (tsc *ThemeSpuCreate) Save(ctx context.Context) (*ThemeSpu, error) {
	var (
		err  error
		node *ThemeSpu
	)
	if len(tsc.hooks) == 0 {
		if err = tsc.check(); err != nil {
			return nil, err
		}
		node, err = tsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeSpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsc.check(); err != nil {
				return nil, err
			}
			tsc.mutation = mutation
			if node, err = tsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tsc.hooks) - 1; i >= 0; i-- {
			if tsc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = tsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *ThemeSpuCreate) SaveX(ctx context.Context) *ThemeSpu {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *ThemeSpuCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *ThemeSpuCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *ThemeSpuCreate) check() error {
	if _, ok := tsc.mutation.SpuID(); !ok {
		return &ValidationError{Name: "spu_id", err: errors.New(`model: missing required field "ThemeSpu.spu_id"`)}
	}
	return nil
}

func (tsc *ThemeSpuCreate) sqlSave(ctx context.Context) (*ThemeSpu, error) {
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (tsc *ThemeSpuCreate) createSpec() (*ThemeSpu, *sqlgraph.CreateSpec) {
	var (
		_node = &ThemeSpu{config: tsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: themespu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: themespu.FieldID,
			},
		}
	)
	if value, ok := tsc.mutation.SpuID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: themespu.FieldSpuID,
		})
		_node.SpuID = value
	}
	if nodes := tsc.mutation.ThemeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themespu.ThemeTable,
			Columns: []string{themespu.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ThemeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ThemeSpuCreateBulk is the builder for creating many ThemeSpu entities in bulk.
type ThemeSpuCreateBulk struct {
	config
	builders []*ThemeSpuCreate
}

// Save creates the ThemeSpu entities in the database.
func (tscb *ThemeSpuCreateBulk) Save(ctx context.Context) ([]*ThemeSpu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*ThemeSpu, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThemeSpuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *ThemeSpuCreateBulk) SaveX(ctx context.Context) []*ThemeSpu {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *ThemeSpuCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *ThemeSpuCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
