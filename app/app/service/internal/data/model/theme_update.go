// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/app/app/service/internal/data/model/predicate"
	"mall-go/app/app/service/internal/data/model/spu"
	"mall-go/app/app/service/internal/data/model/theme"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThemeUpdate is the builder for updating Theme entities.
type ThemeUpdate struct {
	config
	hooks    []Hook
	mutation *ThemeMutation
}

// Where appends a list predicates to the ThemeUpdate builder.
func (tu *ThemeUpdate) Where(ps ...predicate.Theme) *ThemeUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *ThemeUpdate) SetUpdateTime(t time.Time) *ThemeUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetDeleteTime sets the "delete_time" field.
func (tu *ThemeUpdate) SetDeleteTime(t time.Time) *ThemeUpdate {
	tu.mutation.SetDeleteTime(t)
	return tu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tu *ThemeUpdate) SetNillableDeleteTime(t *time.Time) *ThemeUpdate {
	if t != nil {
		tu.SetDeleteTime(*t)
	}
	return tu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (tu *ThemeUpdate) ClearDeleteTime() *ThemeUpdate {
	tu.mutation.ClearDeleteTime()
	return tu
}

// SetTitle sets the "title" field.
func (tu *ThemeUpdate) SetTitle(s string) *ThemeUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetDescription sets the "description" field.
func (tu *ThemeUpdate) SetDescription(s string) *ThemeUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetName sets the "name" field.
func (tu *ThemeUpdate) SetName(s string) *ThemeUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetTplName sets the "tpl_name" field.
func (tu *ThemeUpdate) SetTplName(s string) *ThemeUpdate {
	tu.mutation.SetTplName(s)
	return tu
}

// SetEntranceImg sets the "entrance_img" field.
func (tu *ThemeUpdate) SetEntranceImg(s string) *ThemeUpdate {
	tu.mutation.SetEntranceImg(s)
	return tu
}

// SetExtend sets the "extend" field.
func (tu *ThemeUpdate) SetExtend(s string) *ThemeUpdate {
	tu.mutation.SetExtend(s)
	return tu
}

// SetInternalTopImg sets the "internal_top_img" field.
func (tu *ThemeUpdate) SetInternalTopImg(s string) *ThemeUpdate {
	tu.mutation.SetInternalTopImg(s)
	return tu
}

// SetTitleImg sets the "title_img" field.
func (tu *ThemeUpdate) SetTitleImg(s string) *ThemeUpdate {
	tu.mutation.SetTitleImg(s)
	return tu
}

// SetOnline sets the "online" field.
func (tu *ThemeUpdate) SetOnline(i int) *ThemeUpdate {
	tu.mutation.ResetOnline()
	tu.mutation.SetOnline(i)
	return tu
}

// AddOnline adds i to the "online" field.
func (tu *ThemeUpdate) AddOnline(i int) *ThemeUpdate {
	tu.mutation.AddOnline(i)
	return tu
}

// AddSpuIDs adds the "spu" edge to the Spu entity by IDs.
func (tu *ThemeUpdate) AddSpuIDs(ids ...int64) *ThemeUpdate {
	tu.mutation.AddSpuIDs(ids...)
	return tu
}

// AddSpu adds the "spu" edges to the Spu entity.
func (tu *ThemeUpdate) AddSpu(s ...*Spu) *ThemeUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSpuIDs(ids...)
}

// Mutation returns the ThemeMutation object of the builder.
func (tu *ThemeUpdate) Mutation() *ThemeMutation {
	return tu.mutation
}

// ClearSpu clears all "spu" edges to the Spu entity.
func (tu *ThemeUpdate) ClearSpu() *ThemeUpdate {
	tu.mutation.ClearSpu()
	return tu
}

// RemoveSpuIDs removes the "spu" edge to Spu entities by IDs.
func (tu *ThemeUpdate) RemoveSpuIDs(ids ...int64) *ThemeUpdate {
	tu.mutation.RemoveSpuIDs(ids...)
	return tu
}

// RemoveSpu removes "spu" edges to Spu entities.
func (tu *ThemeUpdate) RemoveSpu(s ...*Spu) *ThemeUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSpuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ThemeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ThemeUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ThemeUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ThemeUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *ThemeUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := theme.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

func (tu *ThemeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   theme.Table,
			Columns: theme.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: theme.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theme.FieldUpdateTime,
		})
	}
	if value, ok := tu.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theme.FieldDeleteTime,
		})
	}
	if tu.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: theme.FieldDeleteTime,
		})
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldTitle,
		})
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldDescription,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldName,
		})
	}
	if value, ok := tu.mutation.TplName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldTplName,
		})
	}
	if value, ok := tu.mutation.EntranceImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldEntranceImg,
		})
	}
	if value, ok := tu.mutation.Extend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldExtend,
		})
	}
	if value, ok := tu.mutation.InternalTopImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldInternalTopImg,
		})
	}
	if value, ok := tu.mutation.TitleImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldTitleImg,
		})
	}
	if value, ok := tu.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: theme.FieldOnline,
		})
	}
	if value, ok := tu.mutation.AddedOnline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: theme.FieldOnline,
		})
	}
	if tu.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   theme.SpuTable,
			Columns: theme.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSpuIDs(); len(nodes) > 0 && !tu.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   theme.SpuTable,
			Columns: theme.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   theme.SpuTable,
			Columns: theme.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theme.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ThemeUpdateOne is the builder for updating a single Theme entity.
type ThemeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThemeMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *ThemeUpdateOne) SetUpdateTime(t time.Time) *ThemeUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetDeleteTime sets the "delete_time" field.
func (tuo *ThemeUpdateOne) SetDeleteTime(t time.Time) *ThemeUpdateOne {
	tuo.mutation.SetDeleteTime(t)
	return tuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tuo *ThemeUpdateOne) SetNillableDeleteTime(t *time.Time) *ThemeUpdateOne {
	if t != nil {
		tuo.SetDeleteTime(*t)
	}
	return tuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (tuo *ThemeUpdateOne) ClearDeleteTime() *ThemeUpdateOne {
	tuo.mutation.ClearDeleteTime()
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *ThemeUpdateOne) SetTitle(s string) *ThemeUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *ThemeUpdateOne) SetDescription(s string) *ThemeUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetName sets the "name" field.
func (tuo *ThemeUpdateOne) SetName(s string) *ThemeUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetTplName sets the "tpl_name" field.
func (tuo *ThemeUpdateOne) SetTplName(s string) *ThemeUpdateOne {
	tuo.mutation.SetTplName(s)
	return tuo
}

// SetEntranceImg sets the "entrance_img" field.
func (tuo *ThemeUpdateOne) SetEntranceImg(s string) *ThemeUpdateOne {
	tuo.mutation.SetEntranceImg(s)
	return tuo
}

// SetExtend sets the "extend" field.
func (tuo *ThemeUpdateOne) SetExtend(s string) *ThemeUpdateOne {
	tuo.mutation.SetExtend(s)
	return tuo
}

// SetInternalTopImg sets the "internal_top_img" field.
func (tuo *ThemeUpdateOne) SetInternalTopImg(s string) *ThemeUpdateOne {
	tuo.mutation.SetInternalTopImg(s)
	return tuo
}

// SetTitleImg sets the "title_img" field.
func (tuo *ThemeUpdateOne) SetTitleImg(s string) *ThemeUpdateOne {
	tuo.mutation.SetTitleImg(s)
	return tuo
}

// SetOnline sets the "online" field.
func (tuo *ThemeUpdateOne) SetOnline(i int) *ThemeUpdateOne {
	tuo.mutation.ResetOnline()
	tuo.mutation.SetOnline(i)
	return tuo
}

// AddOnline adds i to the "online" field.
func (tuo *ThemeUpdateOne) AddOnline(i int) *ThemeUpdateOne {
	tuo.mutation.AddOnline(i)
	return tuo
}

// AddSpuIDs adds the "spu" edge to the Spu entity by IDs.
func (tuo *ThemeUpdateOne) AddSpuIDs(ids ...int64) *ThemeUpdateOne {
	tuo.mutation.AddSpuIDs(ids...)
	return tuo
}

// AddSpu adds the "spu" edges to the Spu entity.
func (tuo *ThemeUpdateOne) AddSpu(s ...*Spu) *ThemeUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSpuIDs(ids...)
}

// Mutation returns the ThemeMutation object of the builder.
func (tuo *ThemeUpdateOne) Mutation() *ThemeMutation {
	return tuo.mutation
}

// ClearSpu clears all "spu" edges to the Spu entity.
func (tuo *ThemeUpdateOne) ClearSpu() *ThemeUpdateOne {
	tuo.mutation.ClearSpu()
	return tuo
}

// RemoveSpuIDs removes the "spu" edge to Spu entities by IDs.
func (tuo *ThemeUpdateOne) RemoveSpuIDs(ids ...int64) *ThemeUpdateOne {
	tuo.mutation.RemoveSpuIDs(ids...)
	return tuo
}

// RemoveSpu removes "spu" edges to Spu entities.
func (tuo *ThemeUpdateOne) RemoveSpu(s ...*Spu) *ThemeUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSpuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ThemeUpdateOne) Select(field string, fields ...string) *ThemeUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Theme entity.
func (tuo *ThemeUpdateOne) Save(ctx context.Context) (*Theme, error) {
	var (
		err  error
		node *Theme
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ThemeUpdateOne) SaveX(ctx context.Context) *Theme {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ThemeUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ThemeUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *ThemeUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := theme.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

func (tuo *ThemeUpdateOne) sqlSave(ctx context.Context) (_node *Theme, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   theme.Table,
			Columns: theme.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: theme.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Theme.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, theme.FieldID)
		for _, f := range fields {
			if !theme.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != theme.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theme.FieldUpdateTime,
		})
	}
	if value, ok := tuo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theme.FieldDeleteTime,
		})
	}
	if tuo.mutation.DeleteTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: theme.FieldDeleteTime,
		})
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldTitle,
		})
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldDescription,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldName,
		})
	}
	if value, ok := tuo.mutation.TplName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldTplName,
		})
	}
	if value, ok := tuo.mutation.EntranceImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldEntranceImg,
		})
	}
	if value, ok := tuo.mutation.Extend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldExtend,
		})
	}
	if value, ok := tuo.mutation.InternalTopImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldInternalTopImg,
		})
	}
	if value, ok := tuo.mutation.TitleImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldTitleImg,
		})
	}
	if value, ok := tuo.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: theme.FieldOnline,
		})
	}
	if value, ok := tuo.mutation.AddedOnline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: theme.FieldOnline,
		})
	}
	if tuo.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   theme.SpuTable,
			Columns: theme.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSpuIDs(); len(nodes) > 0 && !tuo.mutation.SpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   theme.SpuTable,
			Columns: theme.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   theme.SpuTable,
			Columns: theme.SpuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: spu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Theme{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theme.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
