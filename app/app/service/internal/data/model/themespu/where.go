// Code generated by ent, DO NOT EDIT.

package themespu

import (
	"mall-go/app/app/service/internal/data/model/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ThemeID applies equality check predicate on the "theme_id" field. It's identical to ThemeIDEQ.
func ThemeID(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeID), v))
	})
}

// SpuID applies equality check predicate on the "spu_id" field. It's identical to SpuIDEQ.
func SpuID(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpuID), v))
	})
}

// ThemeIDEQ applies the EQ predicate on the "theme_id" field.
func ThemeIDEQ(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeID), v))
	})
}

// ThemeIDNEQ applies the NEQ predicate on the "theme_id" field.
func ThemeIDNEQ(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeID), v))
	})
}

// ThemeIDIn applies the In predicate on the "theme_id" field.
func ThemeIDIn(vs ...int64) predicate.ThemeSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThemeSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeID), v...))
	})
}

// ThemeIDNotIn applies the NotIn predicate on the "theme_id" field.
func ThemeIDNotIn(vs ...int64) predicate.ThemeSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThemeSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeID), v...))
	})
}

// ThemeIDIsNil applies the IsNil predicate on the "theme_id" field.
func ThemeIDIsNil() predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThemeID)))
	})
}

// ThemeIDNotNil applies the NotNil predicate on the "theme_id" field.
func ThemeIDNotNil() predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThemeID)))
	})
}

// SpuIDEQ applies the EQ predicate on the "spu_id" field.
func SpuIDEQ(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpuID), v))
	})
}

// SpuIDNEQ applies the NEQ predicate on the "spu_id" field.
func SpuIDNEQ(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpuID), v))
	})
}

// SpuIDIn applies the In predicate on the "spu_id" field.
func SpuIDIn(vs ...int64) predicate.ThemeSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThemeSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpuID), v...))
	})
}

// SpuIDNotIn applies the NotIn predicate on the "spu_id" field.
func SpuIDNotIn(vs ...int64) predicate.ThemeSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ThemeSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpuID), v...))
	})
}

// SpuIDGT applies the GT predicate on the "spu_id" field.
func SpuIDGT(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpuID), v))
	})
}

// SpuIDGTE applies the GTE predicate on the "spu_id" field.
func SpuIDGTE(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpuID), v))
	})
}

// SpuIDLT applies the LT predicate on the "spu_id" field.
func SpuIDLT(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpuID), v))
	})
}

// SpuIDLTE applies the LTE predicate on the "spu_id" field.
func SpuIDLTE(v int64) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpuID), v))
	})
}

// HasTheme applies the HasEdge predicate on the "theme" edge.
func HasTheme() predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ThemeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ThemeTable, ThemeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThemeWith applies the HasEdge predicate on the "theme" edge with a given conditions (other predicates).
func HasThemeWith(preds ...predicate.Theme) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ThemeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ThemeTable, ThemeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ThemeSpu) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ThemeSpu) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ThemeSpu) predicate.ThemeSpu {
	return predicate.ThemeSpu(func(s *sql.Selector) {
		p(s.Not())
	})
}
