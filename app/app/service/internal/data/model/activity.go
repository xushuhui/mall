// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/app/service/internal/data/model/activity"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Activity is the model entity for the Activity schema.
type Activity struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Online holds the value of the "online" field.
	Online int `json:"online,omitempty"`
	// EntranceImg holds the value of the "entrance_img" field.
	EntranceImg string `json:"entrance_img,omitempty"`
	// InternalTopImg holds the value of the "internal_top_img" field.
	InternalTopImg string `json:"internal_top_img,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityQuery when eager-loading is set.
	Edges ActivityEdges `json:"edges"`
}

// ActivityEdges holds the relations/edges for other nodes in the graph.
type ActivityEdges struct {
	// Coupon holds the value of the coupon edge.
	Coupon []*Coupon `json:"coupon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CouponOrErr returns the Coupon value or an error if the edge
// was not loaded in eager-loading.
func (e ActivityEdges) CouponOrErr() ([]*Coupon, error) {
	if e.loadedTypes[0] {
		return e.Coupon, nil
	}
	return nil, &NotLoadedError{edge: "coupon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case activity.FieldID, activity.FieldOnline:
			values[i] = new(sql.NullInt64)
		case activity.FieldTitle, activity.FieldDescription, activity.FieldRemark, activity.FieldEntranceImg, activity.FieldInternalTopImg, activity.FieldName:
			values[i] = new(sql.NullString)
		case activity.FieldCreateTime, activity.FieldUpdateTime, activity.FieldDeleteTime, activity.FieldStartTime, activity.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Activity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activity fields.
func (a *Activity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case activity.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case activity.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case activity.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				a.DeleteTime = value.Time
			}
		case activity.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case activity.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case activity.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				a.StartTime = value.Time
			}
		case activity.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				a.EndTime = value.Time
			}
		case activity.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				a.Remark = value.String
			}
		case activity.FieldOnline:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field online", values[i])
			} else if value.Valid {
				a.Online = int(value.Int64)
			}
		case activity.FieldEntranceImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entrance_img", values[i])
			} else if value.Valid {
				a.EntranceImg = value.String
			}
		case activity.FieldInternalTopImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_top_img", values[i])
			} else if value.Valid {
				a.InternalTopImg = value.String
			}
		case activity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		}
	}
	return nil
}

// QueryCoupon queries the "coupon" edge of the Activity entity.
func (a *Activity) QueryCoupon() *CouponQuery {
	return (&ActivityClient{config: a.config}).QueryCoupon(a)
}

// Update returns a builder for updating this Activity.
// Note that you need to call Activity.Unwrap() before calling this method if this Activity
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activity) Update() *ActivityUpdateOne {
	return (&ActivityClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Activity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Activity) Unwrap() *Activity {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("model: Activity is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activity) String() string {
	var builder strings.Builder
	builder.WriteString("Activity(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(a.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", description=")
	builder.WriteString(a.Description)
	builder.WriteString(", start_time=")
	builder.WriteString(a.StartTime.Format(time.ANSIC))
	builder.WriteString(", end_time=")
	builder.WriteString(a.EndTime.Format(time.ANSIC))
	builder.WriteString(", remark=")
	builder.WriteString(a.Remark)
	builder.WriteString(", online=")
	builder.WriteString(fmt.Sprintf("%v", a.Online))
	builder.WriteString(", entrance_img=")
	builder.WriteString(a.EntranceImg)
	builder.WriteString(", internal_top_img=")
	builder.WriteString(a.InternalTopImg)
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Activities is a parsable slice of Activity.
type Activities []*Activity

func (a Activities) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
