// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/app/service/internal/data/model/userpointdetail"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserPointDetail is the model entity for the UserPointDetail schema.
type UserPointDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Value holds the value of the "value" field.
	Value int `json:"value,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPointDetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpointdetail.FieldID, userpointdetail.FieldUserID, userpointdetail.FieldValue:
			values[i] = new(sql.NullInt64)
		case userpointdetail.FieldCreateTime, userpointdetail.FieldUpdateTime, userpointdetail.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserPointDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPointDetail fields.
func (upd *UserPointDetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpointdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			upd.ID = int64(value.Int64)
		case userpointdetail.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				upd.CreateTime = value.Time
			}
		case userpointdetail.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				upd.UpdateTime = value.Time
			}
		case userpointdetail.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				upd.DeleteTime = value.Time
			}
		case userpointdetail.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				upd.UserID = value.Int64
			}
		case userpointdetail.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				upd.Value = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserPointDetail.
// Note that you need to call UserPointDetail.Unwrap() before calling this method if this UserPointDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (upd *UserPointDetail) Update() *UserPointDetailUpdateOne {
	return (&UserPointDetailClient{config: upd.config}).UpdateOne(upd)
}

// Unwrap unwraps the UserPointDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (upd *UserPointDetail) Unwrap() *UserPointDetail {
	tx, ok := upd.config.driver.(*txDriver)
	if !ok {
		panic("model: UserPointDetail is not a transactional entity")
	}
	upd.config.driver = tx.drv
	return upd
}

// String implements the fmt.Stringer.
func (upd *UserPointDetail) String() string {
	var builder strings.Builder
	builder.WriteString("UserPointDetail(")
	builder.WriteString(fmt.Sprintf("id=%v", upd.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(upd.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(upd.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(upd.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", upd.UserID))
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", upd.Value))
	builder.WriteByte(')')
	return builder.String()
}

// UserPointDetails is a parsable slice of UserPointDetail.
type UserPointDetails []*UserPointDetail

func (upd UserPointDetails) config(cfg config) {
	for _i := range upd {
		upd[_i].config = cfg
	}
}
