// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/app/service/internal/data/model/userwalletdetail"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserWalletDetail is the model entity for the UserWalletDetail schema.
type UserWalletDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Op holds the value of the "op" field.
	// 1 增加 2减少
	Op int `json:"op,omitempty"`
	// Current holds the value of the "current" field.
	// 当前余额
	Current int `json:"current,omitempty"`
	// Value holds the value of the "value" field.
	// 余额
	Value int `json:"value,omitempty"`
	// Type holds the value of the "type" field.
	// 1充值，2消费
	Type int `json:"type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserWalletDetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userwalletdetail.FieldID, userwalletdetail.FieldOp, userwalletdetail.FieldCurrent, userwalletdetail.FieldValue, userwalletdetail.FieldType:
			values[i] = new(sql.NullInt64)
		case userwalletdetail.FieldDescription:
			values[i] = new(sql.NullString)
		case userwalletdetail.FieldCreateTime, userwalletdetail.FieldUpdateTime, userwalletdetail.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserWalletDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserWalletDetail fields.
func (uwd *UserWalletDetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userwalletdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uwd.ID = int64(value.Int64)
		case userwalletdetail.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				uwd.CreateTime = value.Time
			}
		case userwalletdetail.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				uwd.UpdateTime = value.Time
			}
		case userwalletdetail.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				uwd.DeleteTime = value.Time
			}
		case userwalletdetail.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				uwd.Description = value.String
			}
		case userwalletdetail.FieldOp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field op", values[i])
			} else if value.Valid {
				uwd.Op = int(value.Int64)
			}
		case userwalletdetail.FieldCurrent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current", values[i])
			} else if value.Valid {
				uwd.Current = int(value.Int64)
			}
		case userwalletdetail.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				uwd.Value = int(value.Int64)
			}
		case userwalletdetail.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				uwd.Type = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserWalletDetail.
// Note that you need to call UserWalletDetail.Unwrap() before calling this method if this UserWalletDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (uwd *UserWalletDetail) Update() *UserWalletDetailUpdateOne {
	return (&UserWalletDetailClient{config: uwd.config}).UpdateOne(uwd)
}

// Unwrap unwraps the UserWalletDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uwd *UserWalletDetail) Unwrap() *UserWalletDetail {
	tx, ok := uwd.config.driver.(*txDriver)
	if !ok {
		panic("model: UserWalletDetail is not a transactional entity")
	}
	uwd.config.driver = tx.drv
	return uwd
}

// String implements the fmt.Stringer.
func (uwd *UserWalletDetail) String() string {
	var builder strings.Builder
	builder.WriteString("UserWalletDetail(")
	builder.WriteString(fmt.Sprintf("id=%v", uwd.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(uwd.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(uwd.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(uwd.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", description=")
	builder.WriteString(uwd.Description)
	builder.WriteString(", op=")
	builder.WriteString(fmt.Sprintf("%v", uwd.Op))
	builder.WriteString(", current=")
	builder.WriteString(fmt.Sprintf("%v", uwd.Current))
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", uwd.Value))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", uwd.Type))
	builder.WriteByte(')')
	return builder.String()
}

// UserWalletDetails is a parsable slice of UserWalletDetail.
type UserWalletDetails []*UserWalletDetail

func (uwd UserWalletDetails) config(cfg config) {
	for _i := range uwd {
		uwd[_i].config = cfg
	}
}
