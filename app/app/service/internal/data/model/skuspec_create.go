// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/app/service/internal/data/model/skuspec"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SkuSpecCreate is the builder for creating a SkuSpec entity.
type SkuSpecCreate struct {
	config
	mutation *SkuSpecMutation
	hooks    []Hook
}

// SetSpuID sets the "spu_id" field.
func (ssc *SkuSpecCreate) SetSpuID(i int64) *SkuSpecCreate {
	ssc.mutation.SetSpuID(i)
	return ssc
}

// SetSkuID sets the "sku_id" field.
func (ssc *SkuSpecCreate) SetSkuID(i int64) *SkuSpecCreate {
	ssc.mutation.SetSkuID(i)
	return ssc
}

// SetKeyID sets the "key_id" field.
func (ssc *SkuSpecCreate) SetKeyID(i int64) *SkuSpecCreate {
	ssc.mutation.SetKeyID(i)
	return ssc
}

// SetValueID sets the "value_id" field.
func (ssc *SkuSpecCreate) SetValueID(i int64) *SkuSpecCreate {
	ssc.mutation.SetValueID(i)
	return ssc
}

// Mutation returns the SkuSpecMutation object of the builder.
func (ssc *SkuSpecCreate) Mutation() *SkuSpecMutation {
	return ssc.mutation
}

// Save creates the SkuSpec in the database.
func (ssc *SkuSpecCreate) Save(ctx context.Context) (*SkuSpec, error) {
	var (
		err  error
		node *SkuSpec
	)
	if len(ssc.hooks) == 0 {
		if err = ssc.check(); err != nil {
			return nil, err
		}
		node, err = ssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuSpecMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssc.check(); err != nil {
				return nil, err
			}
			ssc.mutation = mutation
			if node, err = ssc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ssc.hooks) - 1; i >= 0; i-- {
			if ssc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = ssc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SkuSpecCreate) SaveX(ctx context.Context) *SkuSpec {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SkuSpecCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SkuSpecCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SkuSpecCreate) check() error {
	if _, ok := ssc.mutation.SpuID(); !ok {
		return &ValidationError{Name: "spu_id", err: errors.New(`model: missing required field "spu_id"`)}
	}
	if _, ok := ssc.mutation.SkuID(); !ok {
		return &ValidationError{Name: "sku_id", err: errors.New(`model: missing required field "sku_id"`)}
	}
	if _, ok := ssc.mutation.KeyID(); !ok {
		return &ValidationError{Name: "key_id", err: errors.New(`model: missing required field "key_id"`)}
	}
	if _, ok := ssc.mutation.ValueID(); !ok {
		return &ValidationError{Name: "value_id", err: errors.New(`model: missing required field "value_id"`)}
	}
	return nil
}

func (ssc *SkuSpecCreate) sqlSave(ctx context.Context) (*SkuSpec, error) {
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ssc *SkuSpecCreate) createSpec() (*SkuSpec, *sqlgraph.CreateSpec) {
	var (
		_node = &SkuSpec{config: ssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: skuspec.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: skuspec.FieldID,
			},
		}
	)
	if value, ok := ssc.mutation.SpuID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSpuID,
		})
		_node.SpuID = value
	}
	if value, ok := ssc.mutation.SkuID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldSkuID,
		})
		_node.SkuID = value
	}
	if value, ok := ssc.mutation.KeyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldKeyID,
		})
		_node.KeyID = value
	}
	if value, ok := ssc.mutation.ValueID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skuspec.FieldValueID,
		})
		_node.ValueID = value
	}
	return _node, _spec
}

// SkuSpecCreateBulk is the builder for creating many SkuSpec entities in bulk.
type SkuSpecCreateBulk struct {
	config
	builders []*SkuSpecCreate
}

// Save creates the SkuSpec entities in the database.
func (sscb *SkuSpecCreateBulk) Save(ctx context.Context) ([]*SkuSpec, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SkuSpec, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SkuSpecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SkuSpecCreateBulk) SaveX(ctx context.Context) []*SkuSpec {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SkuSpecCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SkuSpecCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
