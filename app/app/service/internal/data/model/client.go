// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"log"

	"mall-go/app/app/service/internal/data/model/migrate"

	"mall-go/app/app/service/internal/data/model/activity"
	"mall-go/app/app/service/internal/data/model/banner"
	"mall-go/app/app/service/internal/data/model/banneritem"
	"mall-go/app/app/service/internal/data/model/category"
	"mall-go/app/app/service/internal/data/model/charge"
	"mall-go/app/app/service/internal/data/model/gridcategory"
	"mall-go/app/app/service/internal/data/model/refund"
	"mall-go/app/app/service/internal/data/model/tag"
	"mall-go/app/app/service/internal/data/model/theme"
	"mall-go/app/app/service/internal/data/model/themespu"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// Banner is the client for interacting with the Banner builders.
	Banner *BannerClient
	// BannerItem is the client for interacting with the BannerItem builders.
	BannerItem *BannerItemClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Charge is the client for interacting with the Charge builders.
	Charge *ChargeClient
	// GridCategory is the client for interacting with the GridCategory builders.
	GridCategory *GridCategoryClient
	// Refund is the client for interacting with the Refund builders.
	Refund *RefundClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Theme is the client for interacting with the Theme builders.
	Theme *ThemeClient
	// ThemeSpu is the client for interacting with the ThemeSpu builders.
	ThemeSpu *ThemeSpuClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.Banner = NewBannerClient(c.config)
	c.BannerItem = NewBannerItemClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Charge = NewChargeClient(c.config)
	c.GridCategory = NewGridCategoryClient(c.config)
	c.Refund = NewRefundClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Theme = NewThemeClient(c.config)
	c.ThemeSpu = NewThemeSpuClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Activity:     NewActivityClient(cfg),
		Banner:       NewBannerClient(cfg),
		BannerItem:   NewBannerItemClient(cfg),
		Category:     NewCategoryClient(cfg),
		Charge:       NewChargeClient(cfg),
		GridCategory: NewGridCategoryClient(cfg),
		Refund:       NewRefundClient(cfg),
		Tag:          NewTagClient(cfg),
		Theme:        NewThemeClient(cfg),
		ThemeSpu:     NewThemeSpuClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Activity:     NewActivityClient(cfg),
		Banner:       NewBannerClient(cfg),
		BannerItem:   NewBannerItemClient(cfg),
		Category:     NewCategoryClient(cfg),
		Charge:       NewChargeClient(cfg),
		GridCategory: NewGridCategoryClient(cfg),
		Refund:       NewRefundClient(cfg),
		Tag:          NewTagClient(cfg),
		Theme:        NewThemeClient(cfg),
		ThemeSpu:     NewThemeSpuClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Activity.Use(hooks...)
	c.Banner.Use(hooks...)
	c.BannerItem.Use(hooks...)
	c.Category.Use(hooks...)
	c.Charge.Use(hooks...)
	c.GridCategory.Use(hooks...)
	c.Refund.Use(hooks...)
	c.Tag.Use(hooks...)
	c.Theme.Use(hooks...)
	c.ThemeSpu.Use(hooks...)
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Create returns a create builder for Activity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id int64) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityClient) DeleteOneID(id int64) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id int64) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id int64) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// BannerClient is a client for the Banner schema.
type BannerClient struct {
	config
}

// NewBannerClient returns a client for the Banner from the given config.
func NewBannerClient(c config) *BannerClient {
	return &BannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banner.Hooks(f(g(h())))`.
func (c *BannerClient) Use(hooks ...Hook) {
	c.hooks.Banner = append(c.hooks.Banner, hooks...)
}

// Create returns a create builder for Banner.
func (c *BannerClient) Create() *BannerCreate {
	mutation := newBannerMutation(c.config, OpCreate)
	return &BannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Banner entities.
func (c *BannerClient) CreateBulk(builders ...*BannerCreate) *BannerCreateBulk {
	return &BannerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Banner.
func (c *BannerClient) Update() *BannerUpdate {
	mutation := newBannerMutation(c.config, OpUpdate)
	return &BannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannerClient) UpdateOne(b *Banner) *BannerUpdateOne {
	mutation := newBannerMutation(c.config, OpUpdateOne, withBanner(b))
	return &BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannerClient) UpdateOneID(id int64) *BannerUpdateOne {
	mutation := newBannerMutation(c.config, OpUpdateOne, withBannerID(id))
	return &BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Banner.
func (c *BannerClient) Delete() *BannerDelete {
	mutation := newBannerMutation(c.config, OpDelete)
	return &BannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BannerClient) DeleteOne(b *Banner) *BannerDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BannerClient) DeleteOneID(id int64) *BannerDeleteOne {
	builder := c.Delete().Where(banner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannerDeleteOne{builder}
}

// Query returns a query builder for Banner.
func (c *BannerClient) Query() *BannerQuery {
	return &BannerQuery{
		config: c.config,
	}
}

// Get returns a Banner entity by its id.
func (c *BannerClient) Get(ctx context.Context, id int64) (*Banner, error) {
	return c.Query().Where(banner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannerClient) GetX(ctx context.Context, id int64) *Banner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBannerItem queries the banner_item edge of a Banner.
func (c *BannerClient) QueryBannerItem(b *Banner) *BannerItemQuery {
	query := &BannerItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(banner.Table, banner.FieldID, id),
			sqlgraph.To(banneritem.Table, banneritem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, banner.BannerItemTable, banner.BannerItemColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BannerClient) Hooks() []Hook {
	return c.hooks.Banner
}

// BannerItemClient is a client for the BannerItem schema.
type BannerItemClient struct {
	config
}

// NewBannerItemClient returns a client for the BannerItem from the given config.
func NewBannerItemClient(c config) *BannerItemClient {
	return &BannerItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banneritem.Hooks(f(g(h())))`.
func (c *BannerItemClient) Use(hooks ...Hook) {
	c.hooks.BannerItem = append(c.hooks.BannerItem, hooks...)
}

// Create returns a create builder for BannerItem.
func (c *BannerItemClient) Create() *BannerItemCreate {
	mutation := newBannerItemMutation(c.config, OpCreate)
	return &BannerItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BannerItem entities.
func (c *BannerItemClient) CreateBulk(builders ...*BannerItemCreate) *BannerItemCreateBulk {
	return &BannerItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BannerItem.
func (c *BannerItemClient) Update() *BannerItemUpdate {
	mutation := newBannerItemMutation(c.config, OpUpdate)
	return &BannerItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannerItemClient) UpdateOne(bi *BannerItem) *BannerItemUpdateOne {
	mutation := newBannerItemMutation(c.config, OpUpdateOne, withBannerItem(bi))
	return &BannerItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannerItemClient) UpdateOneID(id int64) *BannerItemUpdateOne {
	mutation := newBannerItemMutation(c.config, OpUpdateOne, withBannerItemID(id))
	return &BannerItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BannerItem.
func (c *BannerItemClient) Delete() *BannerItemDelete {
	mutation := newBannerItemMutation(c.config, OpDelete)
	return &BannerItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BannerItemClient) DeleteOne(bi *BannerItem) *BannerItemDeleteOne {
	return c.DeleteOneID(bi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BannerItemClient) DeleteOneID(id int64) *BannerItemDeleteOne {
	builder := c.Delete().Where(banneritem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannerItemDeleteOne{builder}
}

// Query returns a query builder for BannerItem.
func (c *BannerItemClient) Query() *BannerItemQuery {
	return &BannerItemQuery{
		config: c.config,
	}
}

// Get returns a BannerItem entity by its id.
func (c *BannerItemClient) Get(ctx context.Context, id int64) (*BannerItem, error) {
	return c.Query().Where(banneritem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannerItemClient) GetX(ctx context.Context, id int64) *BannerItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBanner queries the banner edge of a BannerItem.
func (c *BannerItemClient) QueryBanner(bi *BannerItem) *BannerQuery {
	query := &BannerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(banneritem.Table, banneritem.FieldID, id),
			sqlgraph.To(banner.Table, banner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, banneritem.BannerTable, banneritem.BannerColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BannerItemClient) Hooks() []Hook {
	return c.hooks.BannerItem
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int64) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int64) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int64) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int64) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a Category.
func (c *CategoryClient) QueryParent(ca *Category) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, category.ParentTable, category.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Category.
func (c *CategoryClient) QueryChildren(ca *Category) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.ChildrenTable, category.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// ChargeClient is a client for the Charge schema.
type ChargeClient struct {
	config
}

// NewChargeClient returns a client for the Charge from the given config.
func NewChargeClient(c config) *ChargeClient {
	return &ChargeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `charge.Hooks(f(g(h())))`.
func (c *ChargeClient) Use(hooks ...Hook) {
	c.hooks.Charge = append(c.hooks.Charge, hooks...)
}

// Create returns a create builder for Charge.
func (c *ChargeClient) Create() *ChargeCreate {
	mutation := newChargeMutation(c.config, OpCreate)
	return &ChargeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Charge entities.
func (c *ChargeClient) CreateBulk(builders ...*ChargeCreate) *ChargeCreateBulk {
	return &ChargeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Charge.
func (c *ChargeClient) Update() *ChargeUpdate {
	mutation := newChargeMutation(c.config, OpUpdate)
	return &ChargeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChargeClient) UpdateOne(ch *Charge) *ChargeUpdateOne {
	mutation := newChargeMutation(c.config, OpUpdateOne, withCharge(ch))
	return &ChargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChargeClient) UpdateOneID(id int64) *ChargeUpdateOne {
	mutation := newChargeMutation(c.config, OpUpdateOne, withChargeID(id))
	return &ChargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Charge.
func (c *ChargeClient) Delete() *ChargeDelete {
	mutation := newChargeMutation(c.config, OpDelete)
	return &ChargeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChargeClient) DeleteOne(ch *Charge) *ChargeDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChargeClient) DeleteOneID(id int64) *ChargeDeleteOne {
	builder := c.Delete().Where(charge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChargeDeleteOne{builder}
}

// Query returns a query builder for Charge.
func (c *ChargeClient) Query() *ChargeQuery {
	return &ChargeQuery{
		config: c.config,
	}
}

// Get returns a Charge entity by its id.
func (c *ChargeClient) Get(ctx context.Context, id int64) (*Charge, error) {
	return c.Query().Where(charge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChargeClient) GetX(ctx context.Context, id int64) *Charge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChargeClient) Hooks() []Hook {
	return c.hooks.Charge
}

// GridCategoryClient is a client for the GridCategory schema.
type GridCategoryClient struct {
	config
}

// NewGridCategoryClient returns a client for the GridCategory from the given config.
func NewGridCategoryClient(c config) *GridCategoryClient {
	return &GridCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gridcategory.Hooks(f(g(h())))`.
func (c *GridCategoryClient) Use(hooks ...Hook) {
	c.hooks.GridCategory = append(c.hooks.GridCategory, hooks...)
}

// Create returns a create builder for GridCategory.
func (c *GridCategoryClient) Create() *GridCategoryCreate {
	mutation := newGridCategoryMutation(c.config, OpCreate)
	return &GridCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GridCategory entities.
func (c *GridCategoryClient) CreateBulk(builders ...*GridCategoryCreate) *GridCategoryCreateBulk {
	return &GridCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GridCategory.
func (c *GridCategoryClient) Update() *GridCategoryUpdate {
	mutation := newGridCategoryMutation(c.config, OpUpdate)
	return &GridCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GridCategoryClient) UpdateOne(gc *GridCategory) *GridCategoryUpdateOne {
	mutation := newGridCategoryMutation(c.config, OpUpdateOne, withGridCategory(gc))
	return &GridCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GridCategoryClient) UpdateOneID(id int64) *GridCategoryUpdateOne {
	mutation := newGridCategoryMutation(c.config, OpUpdateOne, withGridCategoryID(id))
	return &GridCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GridCategory.
func (c *GridCategoryClient) Delete() *GridCategoryDelete {
	mutation := newGridCategoryMutation(c.config, OpDelete)
	return &GridCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GridCategoryClient) DeleteOne(gc *GridCategory) *GridCategoryDeleteOne {
	return c.DeleteOneID(gc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GridCategoryClient) DeleteOneID(id int64) *GridCategoryDeleteOne {
	builder := c.Delete().Where(gridcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GridCategoryDeleteOne{builder}
}

// Query returns a query builder for GridCategory.
func (c *GridCategoryClient) Query() *GridCategoryQuery {
	return &GridCategoryQuery{
		config: c.config,
	}
}

// Get returns a GridCategory entity by its id.
func (c *GridCategoryClient) Get(ctx context.Context, id int64) (*GridCategory, error) {
	return c.Query().Where(gridcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GridCategoryClient) GetX(ctx context.Context, id int64) *GridCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GridCategoryClient) Hooks() []Hook {
	return c.hooks.GridCategory
}

// RefundClient is a client for the Refund schema.
type RefundClient struct {
	config
}

// NewRefundClient returns a client for the Refund from the given config.
func NewRefundClient(c config) *RefundClient {
	return &RefundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `refund.Hooks(f(g(h())))`.
func (c *RefundClient) Use(hooks ...Hook) {
	c.hooks.Refund = append(c.hooks.Refund, hooks...)
}

// Create returns a create builder for Refund.
func (c *RefundClient) Create() *RefundCreate {
	mutation := newRefundMutation(c.config, OpCreate)
	return &RefundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Refund entities.
func (c *RefundClient) CreateBulk(builders ...*RefundCreate) *RefundCreateBulk {
	return &RefundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Refund.
func (c *RefundClient) Update() *RefundUpdate {
	mutation := newRefundMutation(c.config, OpUpdate)
	return &RefundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RefundClient) UpdateOne(r *Refund) *RefundUpdateOne {
	mutation := newRefundMutation(c.config, OpUpdateOne, withRefund(r))
	return &RefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RefundClient) UpdateOneID(id int64) *RefundUpdateOne {
	mutation := newRefundMutation(c.config, OpUpdateOne, withRefundID(id))
	return &RefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Refund.
func (c *RefundClient) Delete() *RefundDelete {
	mutation := newRefundMutation(c.config, OpDelete)
	return &RefundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RefundClient) DeleteOne(r *Refund) *RefundDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RefundClient) DeleteOneID(id int64) *RefundDeleteOne {
	builder := c.Delete().Where(refund.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RefundDeleteOne{builder}
}

// Query returns a query builder for Refund.
func (c *RefundClient) Query() *RefundQuery {
	return &RefundQuery{
		config: c.config,
	}
}

// Get returns a Refund entity by its id.
func (c *RefundClient) Get(ctx context.Context, id int64) (*Refund, error) {
	return c.Query().Where(refund.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RefundClient) GetX(ctx context.Context, id int64) *Refund {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RefundClient) Hooks() []Hook {
	return c.hooks.Refund
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int64) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int64) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int64) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int64) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// ThemeClient is a client for the Theme schema.
type ThemeClient struct {
	config
}

// NewThemeClient returns a client for the Theme from the given config.
func NewThemeClient(c config) *ThemeClient {
	return &ThemeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `theme.Hooks(f(g(h())))`.
func (c *ThemeClient) Use(hooks ...Hook) {
	c.hooks.Theme = append(c.hooks.Theme, hooks...)
}

// Create returns a create builder for Theme.
func (c *ThemeClient) Create() *ThemeCreate {
	mutation := newThemeMutation(c.config, OpCreate)
	return &ThemeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Theme entities.
func (c *ThemeClient) CreateBulk(builders ...*ThemeCreate) *ThemeCreateBulk {
	return &ThemeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Theme.
func (c *ThemeClient) Update() *ThemeUpdate {
	mutation := newThemeMutation(c.config, OpUpdate)
	return &ThemeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThemeClient) UpdateOne(t *Theme) *ThemeUpdateOne {
	mutation := newThemeMutation(c.config, OpUpdateOne, withTheme(t))
	return &ThemeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThemeClient) UpdateOneID(id int64) *ThemeUpdateOne {
	mutation := newThemeMutation(c.config, OpUpdateOne, withThemeID(id))
	return &ThemeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Theme.
func (c *ThemeClient) Delete() *ThemeDelete {
	mutation := newThemeMutation(c.config, OpDelete)
	return &ThemeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ThemeClient) DeleteOne(t *Theme) *ThemeDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ThemeClient) DeleteOneID(id int64) *ThemeDeleteOne {
	builder := c.Delete().Where(theme.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThemeDeleteOne{builder}
}

// Query returns a query builder for Theme.
func (c *ThemeClient) Query() *ThemeQuery {
	return &ThemeQuery{
		config: c.config,
	}
}

// Get returns a Theme entity by its id.
func (c *ThemeClient) Get(ctx context.Context, id int64) (*Theme, error) {
	return c.Query().Where(theme.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThemeClient) GetX(ctx context.Context, id int64) *Theme {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryThemeSpu queries the theme_spu edge of a Theme.
func (c *ThemeClient) QueryThemeSpu(t *Theme) *ThemeSpuQuery {
	query := &ThemeSpuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(theme.Table, theme.FieldID, id),
			sqlgraph.To(themespu.Table, themespu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, theme.ThemeSpuTable, theme.ThemeSpuColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ThemeClient) Hooks() []Hook {
	return c.hooks.Theme
}

// ThemeSpuClient is a client for the ThemeSpu schema.
type ThemeSpuClient struct {
	config
}

// NewThemeSpuClient returns a client for the ThemeSpu from the given config.
func NewThemeSpuClient(c config) *ThemeSpuClient {
	return &ThemeSpuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `themespu.Hooks(f(g(h())))`.
func (c *ThemeSpuClient) Use(hooks ...Hook) {
	c.hooks.ThemeSpu = append(c.hooks.ThemeSpu, hooks...)
}

// Create returns a create builder for ThemeSpu.
func (c *ThemeSpuClient) Create() *ThemeSpuCreate {
	mutation := newThemeSpuMutation(c.config, OpCreate)
	return &ThemeSpuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ThemeSpu entities.
func (c *ThemeSpuClient) CreateBulk(builders ...*ThemeSpuCreate) *ThemeSpuCreateBulk {
	return &ThemeSpuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ThemeSpu.
func (c *ThemeSpuClient) Update() *ThemeSpuUpdate {
	mutation := newThemeSpuMutation(c.config, OpUpdate)
	return &ThemeSpuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThemeSpuClient) UpdateOne(ts *ThemeSpu) *ThemeSpuUpdateOne {
	mutation := newThemeSpuMutation(c.config, OpUpdateOne, withThemeSpu(ts))
	return &ThemeSpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThemeSpuClient) UpdateOneID(id int64) *ThemeSpuUpdateOne {
	mutation := newThemeSpuMutation(c.config, OpUpdateOne, withThemeSpuID(id))
	return &ThemeSpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ThemeSpu.
func (c *ThemeSpuClient) Delete() *ThemeSpuDelete {
	mutation := newThemeSpuMutation(c.config, OpDelete)
	return &ThemeSpuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ThemeSpuClient) DeleteOne(ts *ThemeSpu) *ThemeSpuDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ThemeSpuClient) DeleteOneID(id int64) *ThemeSpuDeleteOne {
	builder := c.Delete().Where(themespu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThemeSpuDeleteOne{builder}
}

// Query returns a query builder for ThemeSpu.
func (c *ThemeSpuClient) Query() *ThemeSpuQuery {
	return &ThemeSpuQuery{
		config: c.config,
	}
}

// Get returns a ThemeSpu entity by its id.
func (c *ThemeSpuClient) Get(ctx context.Context, id int64) (*ThemeSpu, error) {
	return c.Query().Where(themespu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThemeSpuClient) GetX(ctx context.Context, id int64) *ThemeSpu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTheme queries the theme edge of a ThemeSpu.
func (c *ThemeSpuClient) QueryTheme(ts *ThemeSpu) *ThemeQuery {
	query := &ThemeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(themespu.Table, themespu.FieldID, id),
			sqlgraph.To(theme.Table, theme.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, themespu.ThemeTable, themespu.ThemeColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ThemeSpuClient) Hooks() []Hook {
	return c.hooks.ThemeSpu
}
