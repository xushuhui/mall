// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/app/service/internal/data/model/spu"
	"mall-go/app/app/service/internal/data/model/spudetailimg"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SpuDetailImg is the model entity for the SpuDetailImg schema.
type SpuDetailImg struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Img holds the value of the "img" field.
	Img string `json:"img,omitempty"`
	// SpuID holds the value of the "spu_id" field.
	SpuID int64 `json:"spu_id,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpuDetailImgQuery when eager-loading is set.
	Edges SpuDetailImgEdges `json:"edges"`
}

// SpuDetailImgEdges holds the relations/edges for other nodes in the graph.
type SpuDetailImgEdges struct {
	// Spu holds the value of the spu edge.
	Spu *Spu `json:"spu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SpuOrErr returns the Spu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpuDetailImgEdges) SpuOrErr() (*Spu, error) {
	if e.loadedTypes[0] {
		if e.Spu == nil {
			// The edge spu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: spu.Label}
		}
		return e.Spu, nil
	}
	return nil, &NotLoadedError{edge: "spu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpuDetailImg) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case spudetailimg.FieldID, spudetailimg.FieldSpuID, spudetailimg.FieldIndex:
			values[i] = new(sql.NullInt64)
		case spudetailimg.FieldImg:
			values[i] = new(sql.NullString)
		case spudetailimg.FieldCreateTime, spudetailimg.FieldUpdateTime, spudetailimg.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SpuDetailImg", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpuDetailImg fields.
func (sdi *SpuDetailImg) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spudetailimg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sdi.ID = int64(value.Int64)
		case spudetailimg.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sdi.CreateTime = value.Time
			}
		case spudetailimg.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sdi.UpdateTime = value.Time
			}
		case spudetailimg.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				sdi.DeleteTime = value.Time
			}
		case spudetailimg.FieldImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img", values[i])
			} else if value.Valid {
				sdi.Img = value.String
			}
		case spudetailimg.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				sdi.SpuID = value.Int64
			}
		case spudetailimg.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				sdi.Index = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySpu queries the "spu" edge of the SpuDetailImg entity.
func (sdi *SpuDetailImg) QuerySpu() *SpuQuery {
	return (&SpuDetailImgClient{config: sdi.config}).QuerySpu(sdi)
}

// Update returns a builder for updating this SpuDetailImg.
// Note that you need to call SpuDetailImg.Unwrap() before calling this method if this SpuDetailImg
// was returned from a transaction, and the transaction was committed or rolled back.
func (sdi *SpuDetailImg) Update() *SpuDetailImgUpdateOne {
	return (&SpuDetailImgClient{config: sdi.config}).UpdateOne(sdi)
}

// Unwrap unwraps the SpuDetailImg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sdi *SpuDetailImg) Unwrap() *SpuDetailImg {
	tx, ok := sdi.config.driver.(*txDriver)
	if !ok {
		panic("model: SpuDetailImg is not a transactional entity")
	}
	sdi.config.driver = tx.drv
	return sdi
}

// String implements the fmt.Stringer.
func (sdi *SpuDetailImg) String() string {
	var builder strings.Builder
	builder.WriteString("SpuDetailImg(")
	builder.WriteString(fmt.Sprintf("id=%v", sdi.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sdi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sdi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(sdi.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", img=")
	builder.WriteString(sdi.Img)
	builder.WriteString(", spu_id=")
	builder.WriteString(fmt.Sprintf("%v", sdi.SpuID))
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", sdi.Index))
	builder.WriteByte(')')
	return builder.String()
}

// SpuDetailImgs is a parsable slice of SpuDetailImg.
type SpuDetailImgs []*SpuDetailImg

func (sdi SpuDetailImgs) config(cfg config) {
	for _i := range sdi {
		sdi[_i].config = cfg
	}
}
