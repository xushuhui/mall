// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/app/service/internal/data/model/refund"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RefundCreate is the builder for creating a Refund entity.
type RefundCreate struct {
	config
	mutation *RefundMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (rc *RefundCreate) SetCreateTime(t time.Time) *RefundCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *RefundCreate) SetNillableCreateTime(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *RefundCreate) SetUpdateTime(t time.Time) *RefundCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *RefundCreate) SetNillableUpdateTime(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetDeleteTime sets the "delete_time" field.
func (rc *RefundCreate) SetDeleteTime(t time.Time) *RefundCreate {
	rc.mutation.SetDeleteTime(t)
	return rc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (rc *RefundCreate) SetNillableDeleteTime(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetDeleteTime(*t)
	}
	return rc
}

// SetRefundNo sets the "refund_no" field.
func (rc *RefundCreate) SetRefundNo(s string) *RefundCreate {
	rc.mutation.SetRefundNo(s)
	return rc
}

// SetTransactionID sets the "transaction_id" field.
func (rc *RefundCreate) SetTransactionID(s string) *RefundCreate {
	rc.mutation.SetTransactionID(s)
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *RefundCreate) SetUserID(i int64) *RefundCreate {
	rc.mutation.SetUserID(i)
	return rc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rc *RefundCreate) SetNillableUserID(i *int64) *RefundCreate {
	if i != nil {
		rc.SetUserID(*i)
	}
	return rc
}

// SetReason sets the "reason" field.
func (rc *RefundCreate) SetReason(s string) *RefundCreate {
	rc.mutation.SetReason(s)
	return rc
}

// SetOrderID sets the "order_id" field.
func (rc *RefundCreate) SetOrderID(i int64) *RefundCreate {
	rc.mutation.SetOrderID(i)
	return rc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (rc *RefundCreate) SetNillableOrderID(i *int64) *RefundCreate {
	if i != nil {
		rc.SetOrderID(*i)
	}
	return rc
}

// SetOrderSubID sets the "order_sub_id" field.
func (rc *RefundCreate) SetOrderSubID(i int64) *RefundCreate {
	rc.mutation.SetOrderSubID(i)
	return rc
}

// SetNillableOrderSubID sets the "order_sub_id" field if the given value is not nil.
func (rc *RefundCreate) SetNillableOrderSubID(i *int64) *RefundCreate {
	if i != nil {
		rc.SetOrderSubID(*i)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *RefundCreate) SetStatus(i int) *RefundCreate {
	rc.mutation.SetStatus(i)
	return rc
}

// Mutation returns the RefundMutation object of the builder.
func (rc *RefundCreate) Mutation() *RefundMutation {
	return rc.mutation
}

// Save creates the Refund in the database.
func (rc *RefundCreate) Save(ctx context.Context) (*Refund, error) {
	var (
		err  error
		node *Refund
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RefundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Refund)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RefundMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RefundCreate) SaveX(ctx context.Context) *Refund {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RefundCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RefundCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RefundCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := refund.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := refund.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RefundCreate) check() error {
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "Refund.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "Refund.update_time"`)}
	}
	if _, ok := rc.mutation.RefundNo(); !ok {
		return &ValidationError{Name: "refund_no", err: errors.New(`model: missing required field "Refund.refund_no"`)}
	}
	if _, ok := rc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction_id", err: errors.New(`model: missing required field "Refund.transaction_id"`)}
	}
	if _, ok := rc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`model: missing required field "Refund.reason"`)}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`model: missing required field "Refund.status"`)}
	}
	return nil
}

func (rc *RefundCreate) sqlSave(ctx context.Context) (*Refund, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (rc *RefundCreate) createSpec() (*Refund, *sqlgraph.CreateSpec) {
	var (
		_node = &Refund{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: refund.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: refund.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: refund.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: refund.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: refund.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := rc.mutation.RefundNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: refund.FieldRefundNo,
		})
		_node.RefundNo = value
	}
	if value, ok := rc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: refund.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := rc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: refund.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := rc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: refund.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := rc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: refund.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := rc.mutation.OrderSubID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: refund.FieldOrderSubID,
		})
		_node.OrderSubID = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: refund.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// RefundCreateBulk is the builder for creating many Refund entities in bulk.
type RefundCreateBulk struct {
	config
	builders []*RefundCreate
}

// Save creates the Refund entities in the database.
func (rcb *RefundCreateBulk) Save(ctx context.Context) ([]*Refund, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Refund, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RefundCreateBulk) SaveX(ctx context.Context) []*Refund {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RefundCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RefundCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
