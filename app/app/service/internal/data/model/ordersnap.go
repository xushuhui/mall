// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/app/service/internal/data/model/order"
	"mall-go/app/app/service/internal/data/model/ordersnap"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// OrderSnap is the model entity for the OrderSnap schema.
type OrderSnap struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// SnapImg holds the value of the "snap_img" field.
	SnapImg string `json:"snap_img,omitempty"`
	// SnapTitle holds the value of the "snap_title" field.
	SnapTitle string `json:"snap_title,omitempty"`
	// SnapItems holds the value of the "snap_items" field.
	SnapItems string `json:"snap_items,omitempty"`
	// SnapAddress holds the value of the "snap_address" field.
	SnapAddress string `json:"snap_address,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int64 `json:"order_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderSnapQuery when eager-loading is set.
	Edges OrderSnapEdges `json:"edges"`
}

// OrderSnapEdges holds the relations/edges for other nodes in the graph.
type OrderSnapEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderSnapEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// The edge order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderSnap) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordersnap.FieldID, ordersnap.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case ordersnap.FieldSnapImg, ordersnap.FieldSnapTitle, ordersnap.FieldSnapItems, ordersnap.FieldSnapAddress:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderSnap", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderSnap fields.
func (os *OrderSnap) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordersnap.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = int64(value.Int64)
		case ordersnap.FieldSnapImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_img", values[i])
			} else if value.Valid {
				os.SnapImg = value.String
			}
		case ordersnap.FieldSnapTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_title", values[i])
			} else if value.Valid {
				os.SnapTitle = value.String
			}
		case ordersnap.FieldSnapItems:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_items", values[i])
			} else if value.Valid {
				os.SnapItems = value.String
			}
		case ordersnap.FieldSnapAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snap_address", values[i])
			} else if value.Valid {
				os.SnapAddress = value.String
			}
		case ordersnap.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				os.OrderID = value.Int64
			}
		}
	}
	return nil
}

// QueryOrder queries the "order" edge of the OrderSnap entity.
func (os *OrderSnap) QueryOrder() *OrderQuery {
	return (&OrderSnapClient{config: os.config}).QueryOrder(os)
}

// Update returns a builder for updating this OrderSnap.
// Note that you need to call OrderSnap.Unwrap() before calling this method if this OrderSnap
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrderSnap) Update() *OrderSnapUpdateOne {
	return (&OrderSnapClient{config: os.config}).UpdateOne(os)
}

// Unwrap unwraps the OrderSnap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrderSnap) Unwrap() *OrderSnap {
	tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("model: OrderSnap is not a transactional entity")
	}
	os.config.driver = tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrderSnap) String() string {
	var builder strings.Builder
	builder.WriteString("OrderSnap(")
	builder.WriteString(fmt.Sprintf("id=%v", os.ID))
	builder.WriteString(", snap_img=")
	builder.WriteString(os.SnapImg)
	builder.WriteString(", snap_title=")
	builder.WriteString(os.SnapTitle)
	builder.WriteString(", snap_items=")
	builder.WriteString(os.SnapItems)
	builder.WriteString(", snap_address=")
	builder.WriteString(os.SnapAddress)
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", os.OrderID))
	builder.WriteByte(')')
	return builder.String()
}

// OrderSnaps is a parsable slice of OrderSnap.
type OrderSnaps []*OrderSnap

func (os OrderSnaps) config(cfg config) {
	for _i := range os {
		os[_i].config = cfg
	}
}
