// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"mall-go/app/app/service/internal/data/model/spu"
	"mall-go/app/app/service/internal/data/model/spuimg"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SpuImg is the model entity for the SpuImg schema.
type SpuImg struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Img holds the value of the "img" field.
	Img string `json:"img,omitempty"`
	// SpuID holds the value of the "spu_id" field.
	SpuID int64 `json:"spu_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpuImgQuery when eager-loading is set.
	Edges SpuImgEdges `json:"edges"`
}

// SpuImgEdges holds the relations/edges for other nodes in the graph.
type SpuImgEdges struct {
	// Spu holds the value of the spu edge.
	Spu *Spu `json:"spu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SpuOrErr returns the Spu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpuImgEdges) SpuOrErr() (*Spu, error) {
	if e.loadedTypes[0] {
		if e.Spu == nil {
			// The edge spu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: spu.Label}
		}
		return e.Spu, nil
	}
	return nil, &NotLoadedError{edge: "spu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpuImg) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case spuimg.FieldID, spuimg.FieldSpuID:
			values[i] = new(sql.NullInt64)
		case spuimg.FieldImg:
			values[i] = new(sql.NullString)
		case spuimg.FieldCreateTime, spuimg.FieldUpdateTime, spuimg.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SpuImg", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpuImg fields.
func (si *SpuImg) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spuimg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			si.ID = int64(value.Int64)
		case spuimg.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				si.CreateTime = value.Time
			}
		case spuimg.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				si.UpdateTime = value.Time
			}
		case spuimg.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				si.DeleteTime = value.Time
			}
		case spuimg.FieldImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img", values[i])
			} else if value.Valid {
				si.Img = value.String
			}
		case spuimg.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				si.SpuID = value.Int64
			}
		}
	}
	return nil
}

// QuerySpu queries the "spu" edge of the SpuImg entity.
func (si *SpuImg) QuerySpu() *SpuQuery {
	return (&SpuImgClient{config: si.config}).QuerySpu(si)
}

// Update returns a builder for updating this SpuImg.
// Note that you need to call SpuImg.Unwrap() before calling this method if this SpuImg
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *SpuImg) Update() *SpuImgUpdateOne {
	return (&SpuImgClient{config: si.config}).UpdateOne(si)
}

// Unwrap unwraps the SpuImg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *SpuImg) Unwrap() *SpuImg {
	tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("model: SpuImg is not a transactional entity")
	}
	si.config.driver = tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *SpuImg) String() string {
	var builder strings.Builder
	builder.WriteString("SpuImg(")
	builder.WriteString(fmt.Sprintf("id=%v", si.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(si.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(si.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(si.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", img=")
	builder.WriteString(si.Img)
	builder.WriteString(", spu_id=")
	builder.WriteString(fmt.Sprintf("%v", si.SpuID))
	builder.WriteByte(')')
	return builder.String()
}

// SpuImgs is a parsable slice of SpuImg.
type SpuImgs []*SpuImg

func (si SpuImgs) config(cfg config) {
	for _i := range si {
		si[_i].config = cfg
	}
}
