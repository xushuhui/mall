// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/app/service/internal/data/model/charge"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChargeCreate is the builder for creating a Charge entity.
type ChargeCreate struct {
	config
	mutation *ChargeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cc *ChargeCreate) SetCreateTime(t time.Time) *ChargeCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *ChargeCreate) SetNillableCreateTime(t *time.Time) *ChargeCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *ChargeCreate) SetUpdateTime(t time.Time) *ChargeCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *ChargeCreate) SetNillableUpdateTime(t *time.Time) *ChargeCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetDeleteTime sets the "delete_time" field.
func (cc *ChargeCreate) SetDeleteTime(t time.Time) *ChargeCreate {
	cc.mutation.SetDeleteTime(t)
	return cc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cc *ChargeCreate) SetNillableDeleteTime(t *time.Time) *ChargeCreate {
	if t != nil {
		cc.SetDeleteTime(*t)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *ChargeCreate) SetUserID(i int64) *ChargeCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetAmount sets the "amount" field.
func (cc *ChargeCreate) SetAmount(s string) *ChargeCreate {
	cc.mutation.SetAmount(s)
	return cc
}

// SetChargeNo sets the "charge_no" field.
func (cc *ChargeCreate) SetChargeNo(s string) *ChargeCreate {
	cc.mutation.SetChargeNo(s)
	return cc
}

// SetTransactionID sets the "transaction_id" field.
func (cc *ChargeCreate) SetTransactionID(s string) *ChargeCreate {
	cc.mutation.SetTransactionID(s)
	return cc
}

// SetPayWay sets the "pay_way" field.
func (cc *ChargeCreate) SetPayWay(i int) *ChargeCreate {
	cc.mutation.SetPayWay(i)
	return cc
}

// SetClientType sets the "client_type" field.
func (cc *ChargeCreate) SetClientType(i int) *ChargeCreate {
	cc.mutation.SetClientType(i)
	return cc
}

// Mutation returns the ChargeMutation object of the builder.
func (cc *ChargeCreate) Mutation() *ChargeMutation {
	return cc.mutation
}

// Save creates the Charge in the database.
func (cc *ChargeCreate) Save(ctx context.Context) (*Charge, error) {
	var (
		err  error
		node *Charge
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChargeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChargeCreate) SaveX(ctx context.Context) *Charge {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChargeCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChargeCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChargeCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := charge.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := charge.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChargeCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "Charge.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "Charge.update_time"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`model: missing required field "Charge.user_id"`)}
	}
	if _, ok := cc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`model: missing required field "Charge.amount"`)}
	}
	if _, ok := cc.mutation.ChargeNo(); !ok {
		return &ValidationError{Name: "charge_no", err: errors.New(`model: missing required field "Charge.charge_no"`)}
	}
	if _, ok := cc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction_id", err: errors.New(`model: missing required field "Charge.transaction_id"`)}
	}
	if _, ok := cc.mutation.PayWay(); !ok {
		return &ValidationError{Name: "pay_way", err: errors.New(`model: missing required field "Charge.pay_way"`)}
	}
	if _, ok := cc.mutation.ClientType(); !ok {
		return &ValidationError{Name: "client_type", err: errors.New(`model: missing required field "Charge.client_type"`)}
	}
	return nil
}

func (cc *ChargeCreate) sqlSave(ctx context.Context) (*Charge, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (cc *ChargeCreate) createSpec() (*Charge, *sqlgraph.CreateSpec) {
	var (
		_node = &Charge{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: charge.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: charge.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charge.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charge.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charge.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: charge.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := cc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: charge.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := cc.mutation.ChargeNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: charge.FieldChargeNo,
		})
		_node.ChargeNo = value
	}
	if value, ok := cc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: charge.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := cc.mutation.PayWay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: charge.FieldPayWay,
		})
		_node.PayWay = value
	}
	if value, ok := cc.mutation.ClientType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: charge.FieldClientType,
		})
		_node.ClientType = value
	}
	return _node, _spec
}

// ChargeCreateBulk is the builder for creating many Charge entities in bulk.
type ChargeCreateBulk struct {
	config
	builders []*ChargeCreate
}

// Save creates the Charge entities in the database.
func (ccb *ChargeCreateBulk) Save(ctx context.Context) ([]*Charge, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Charge, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChargeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChargeCreateBulk) SaveX(ctx context.Context) []*Charge {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChargeCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChargeCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
