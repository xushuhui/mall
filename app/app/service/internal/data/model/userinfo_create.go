// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"mall-go/app/app/service/internal/data/model/userinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserInfoCreate is the builder for creating a UserInfo entity.
type UserInfoCreate struct {
	config
	mutation *UserInfoMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (uic *UserInfoCreate) SetCreateTime(t time.Time) *UserInfoCreate {
	uic.mutation.SetCreateTime(t)
	return uic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uic *UserInfoCreate) SetNillableCreateTime(t *time.Time) *UserInfoCreate {
	if t != nil {
		uic.SetCreateTime(*t)
	}
	return uic
}

// SetUpdateTime sets the "update_time" field.
func (uic *UserInfoCreate) SetUpdateTime(t time.Time) *UserInfoCreate {
	uic.mutation.SetUpdateTime(t)
	return uic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uic *UserInfoCreate) SetNillableUpdateTime(t *time.Time) *UserInfoCreate {
	if t != nil {
		uic.SetUpdateTime(*t)
	}
	return uic
}

// SetDeleteTime sets the "delete_time" field.
func (uic *UserInfoCreate) SetDeleteTime(t time.Time) *UserInfoCreate {
	uic.mutation.SetDeleteTime(t)
	return uic
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uic *UserInfoCreate) SetNillableDeleteTime(t *time.Time) *UserInfoCreate {
	if t != nil {
		uic.SetDeleteTime(*t)
	}
	return uic
}

// SetNickname sets the "nickname" field.
func (uic *UserInfoCreate) SetNickname(s string) *UserInfoCreate {
	uic.mutation.SetNickname(s)
	return uic
}

// SetUnifyUID sets the "unify_uid" field.
func (uic *UserInfoCreate) SetUnifyUID(i int) *UserInfoCreate {
	uic.mutation.SetUnifyUID(i)
	return uic
}

// SetEmail sets the "email" field.
func (uic *UserInfoCreate) SetEmail(s string) *UserInfoCreate {
	uic.mutation.SetEmail(s)
	return uic
}

// SetAvatar sets the "avatar" field.
func (uic *UserInfoCreate) SetAvatar(s string) *UserInfoCreate {
	uic.mutation.SetAvatar(s)
	return uic
}

// SetWxProfile sets the "wx_profile" field.
func (uic *UserInfoCreate) SetWxProfile(s string) *UserInfoCreate {
	uic.mutation.SetWxProfile(s)
	return uic
}

// SetID sets the "id" field.
func (uic *UserInfoCreate) SetID(i int64) *UserInfoCreate {
	uic.mutation.SetID(i)
	return uic
}

// Mutation returns the UserInfoMutation object of the builder.
func (uic *UserInfoCreate) Mutation() *UserInfoMutation {
	return uic.mutation
}

// Save creates the UserInfo in the database.
func (uic *UserInfoCreate) Save(ctx context.Context) (*UserInfo, error) {
	var (
		err  error
		node *UserInfo
	)
	uic.defaults()
	if len(uic.hooks) == 0 {
		if err = uic.check(); err != nil {
			return nil, err
		}
		node, err = uic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uic.check(); err != nil {
				return nil, err
			}
			uic.mutation = mutation
			if node, err = uic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uic.hooks) - 1; i >= 0; i-- {
			if uic.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = uic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uic *UserInfoCreate) SaveX(ctx context.Context) *UserInfo {
	v, err := uic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uic *UserInfoCreate) Exec(ctx context.Context) error {
	_, err := uic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uic *UserInfoCreate) ExecX(ctx context.Context) {
	if err := uic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uic *UserInfoCreate) defaults() {
	if _, ok := uic.mutation.CreateTime(); !ok {
		v := userinfo.DefaultCreateTime()
		uic.mutation.SetCreateTime(v)
	}
	if _, ok := uic.mutation.UpdateTime(); !ok {
		v := userinfo.DefaultUpdateTime()
		uic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uic *UserInfoCreate) check() error {
	if _, ok := uic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "create_time"`)}
	}
	if _, ok := uic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "update_time"`)}
	}
	if _, ok := uic.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`model: missing required field "nickname"`)}
	}
	if _, ok := uic.mutation.UnifyUID(); !ok {
		return &ValidationError{Name: "unify_uid", err: errors.New(`model: missing required field "unify_uid"`)}
	}
	if _, ok := uic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`model: missing required field "email"`)}
	}
	if _, ok := uic.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`model: missing required field "avatar"`)}
	}
	if _, ok := uic.mutation.WxProfile(); !ok {
		return &ValidationError{Name: "wx_profile", err: errors.New(`model: missing required field "wx_profile"`)}
	}
	return nil
}

func (uic *UserInfoCreate) sqlSave(ctx context.Context) (*UserInfo, error) {
	_node, _spec := uic.createSpec()
	if err := sqlgraph.CreateNode(ctx, uic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (uic *UserInfoCreate) createSpec() (*UserInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &UserInfo{config: uic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userinfo.FieldID,
			},
		}
	)
	if id, ok := uic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := uic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := uic.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userinfo.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := uic.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := uic.mutation.UnifyUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userinfo.FieldUnifyUID,
		})
		_node.UnifyUID = value
	}
	if value, ok := uic.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uic.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := uic.mutation.WxProfile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinfo.FieldWxProfile,
		})
		_node.WxProfile = value
	}
	return _node, _spec
}

// UserInfoCreateBulk is the builder for creating many UserInfo entities in bulk.
type UserInfoCreateBulk struct {
	config
	builders []*UserInfoCreate
}

// Save creates the UserInfo entities in the database.
func (uicb *UserInfoCreateBulk) Save(ctx context.Context) ([]*UserInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uicb.builders))
	nodes := make([]*UserInfo, len(uicb.builders))
	mutators := make([]Mutator, len(uicb.builders))
	for i := range uicb.builders {
		func(i int, root context.Context) {
			builder := uicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uicb *UserInfoCreateBulk) SaveX(ctx context.Context) []*UserInfo {
	v, err := uicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uicb *UserInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := uicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uicb *UserInfoCreateBulk) ExecX(ctx context.Context) {
	if err := uicb.Exec(ctx); err != nil {
		panic(err)
	}
}
