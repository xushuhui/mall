// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"mall-go/app/app/service/internal/data/model/predicate"
	"mall-go/app/app/service/internal/data/model/theme"
	"mall-go/app/app/service/internal/data/model/themespu"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThemeSpuUpdate is the builder for updating ThemeSpu entities.
type ThemeSpuUpdate struct {
	config
	hooks    []Hook
	mutation *ThemeSpuMutation
}

// Where appends a list predicates to the ThemeSpuUpdate builder.
func (tsu *ThemeSpuUpdate) Where(ps ...predicate.ThemeSpu) *ThemeSpuUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetThemeID sets the "theme_id" field.
func (tsu *ThemeSpuUpdate) SetThemeID(i int64) *ThemeSpuUpdate {
	tsu.mutation.SetThemeID(i)
	return tsu
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (tsu *ThemeSpuUpdate) SetNillableThemeID(i *int64) *ThemeSpuUpdate {
	if i != nil {
		tsu.SetThemeID(*i)
	}
	return tsu
}

// ClearThemeID clears the value of the "theme_id" field.
func (tsu *ThemeSpuUpdate) ClearThemeID() *ThemeSpuUpdate {
	tsu.mutation.ClearThemeID()
	return tsu
}

// SetSpuID sets the "spu_id" field.
func (tsu *ThemeSpuUpdate) SetSpuID(i int64) *ThemeSpuUpdate {
	tsu.mutation.ResetSpuID()
	tsu.mutation.SetSpuID(i)
	return tsu
}

// AddSpuID adds i to the "spu_id" field.
func (tsu *ThemeSpuUpdate) AddSpuID(i int64) *ThemeSpuUpdate {
	tsu.mutation.AddSpuID(i)
	return tsu
}

// SetTheme sets the "theme" edge to the Theme entity.
func (tsu *ThemeSpuUpdate) SetTheme(t *Theme) *ThemeSpuUpdate {
	return tsu.SetThemeID(t.ID)
}

// Mutation returns the ThemeSpuMutation object of the builder.
func (tsu *ThemeSpuUpdate) Mutation() *ThemeSpuMutation {
	return tsu.mutation
}

// ClearTheme clears the "theme" edge to the Theme entity.
func (tsu *ThemeSpuUpdate) ClearTheme() *ThemeSpuUpdate {
	tsu.mutation.ClearTheme()
	return tsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *ThemeSpuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tsu.hooks) == 0 {
		affected, err = tsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeSpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tsu.mutation = mutation
			affected, err = tsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tsu.hooks) - 1; i >= 0; i-- {
			if tsu.hooks[i] == nil {
				return 0, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = tsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *ThemeSpuUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *ThemeSpuUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *ThemeSpuUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tsu *ThemeSpuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   themespu.Table,
			Columns: themespu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: themespu.FieldID,
			},
		},
	}
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.SpuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: themespu.FieldSpuID,
		})
	}
	if value, ok := tsu.mutation.AddedSpuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: themespu.FieldSpuID,
		})
	}
	if tsu.mutation.ThemeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themespu.ThemeTable,
			Columns: []string{themespu.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: theme.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.ThemeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themespu.ThemeTable,
			Columns: []string{themespu.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{themespu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ThemeSpuUpdateOne is the builder for updating a single ThemeSpu entity.
type ThemeSpuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThemeSpuMutation
}

// SetThemeID sets the "theme_id" field.
func (tsuo *ThemeSpuUpdateOne) SetThemeID(i int64) *ThemeSpuUpdateOne {
	tsuo.mutation.SetThemeID(i)
	return tsuo
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (tsuo *ThemeSpuUpdateOne) SetNillableThemeID(i *int64) *ThemeSpuUpdateOne {
	if i != nil {
		tsuo.SetThemeID(*i)
	}
	return tsuo
}

// ClearThemeID clears the value of the "theme_id" field.
func (tsuo *ThemeSpuUpdateOne) ClearThemeID() *ThemeSpuUpdateOne {
	tsuo.mutation.ClearThemeID()
	return tsuo
}

// SetSpuID sets the "spu_id" field.
func (tsuo *ThemeSpuUpdateOne) SetSpuID(i int64) *ThemeSpuUpdateOne {
	tsuo.mutation.ResetSpuID()
	tsuo.mutation.SetSpuID(i)
	return tsuo
}

// AddSpuID adds i to the "spu_id" field.
func (tsuo *ThemeSpuUpdateOne) AddSpuID(i int64) *ThemeSpuUpdateOne {
	tsuo.mutation.AddSpuID(i)
	return tsuo
}

// SetTheme sets the "theme" edge to the Theme entity.
func (tsuo *ThemeSpuUpdateOne) SetTheme(t *Theme) *ThemeSpuUpdateOne {
	return tsuo.SetThemeID(t.ID)
}

// Mutation returns the ThemeSpuMutation object of the builder.
func (tsuo *ThemeSpuUpdateOne) Mutation() *ThemeSpuMutation {
	return tsuo.mutation
}

// ClearTheme clears the "theme" edge to the Theme entity.
func (tsuo *ThemeSpuUpdateOne) ClearTheme() *ThemeSpuUpdateOne {
	tsuo.mutation.ClearTheme()
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *ThemeSpuUpdateOne) Select(field string, fields ...string) *ThemeSpuUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated ThemeSpu entity.
func (tsuo *ThemeSpuUpdateOne) Save(ctx context.Context) (*ThemeSpu, error) {
	var (
		err  error
		node *ThemeSpu
	)
	if len(tsuo.hooks) == 0 {
		node, err = tsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeSpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tsuo.mutation = mutation
			node, err = tsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tsuo.hooks) - 1; i >= 0; i-- {
			if tsuo.hooks[i] == nil {
				return nil, fmt.Errorf("model: uninitialized hook (forgotten import model/runtime?)")
			}
			mut = tsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *ThemeSpuUpdateOne) SaveX(ctx context.Context) *ThemeSpu {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *ThemeSpuUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *ThemeSpuUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tsuo *ThemeSpuUpdateOne) sqlSave(ctx context.Context) (_node *ThemeSpu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   themespu.Table,
			Columns: themespu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: themespu.FieldID,
			},
		},
	}
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ThemeSpu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, themespu.FieldID)
		for _, f := range fields {
			if !themespu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != themespu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.SpuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: themespu.FieldSpuID,
		})
	}
	if value, ok := tsuo.mutation.AddedSpuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: themespu.FieldSpuID,
		})
	}
	if tsuo.mutation.ThemeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themespu.ThemeTable,
			Columns: []string{themespu.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: theme.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.ThemeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themespu.ThemeTable,
			Columns: []string{themespu.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ThemeSpu{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{themespu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
