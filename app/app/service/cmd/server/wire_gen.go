// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"mall-go/app/app/service/internal/biz"
	"mall-go/app/app/service/internal/conf"
	"mall-go/app/app/service/internal/data"
	"mall-go/app/app/service/internal/server"
	"mall-go/app/app/service/internal/service"
)

import (
	_ "github.com/go-kratos/kratos/v2/encoding"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, logger log.Logger) (*kratos.App, func(), error) {
	client := data.NewEntClient(confData, logger)
	dataData, cleanup, err := data.NewData(client, logger)
	if err != nil {
		return nil, nil, err
	}
	bannerRepo := data.NewBannerRepo(dataData, logger)
	bannerUsecase := biz.NewBannerUsecase(bannerRepo, logger)
	themeRepo := data.NewThemeRepo(dataData, logger)
	themeUsecase := biz.NewThemeUsecase(themeRepo, logger)
	activityRepo := data.NewActivityRepo(dataData, logger)
	activityUsecase := biz.NewActivityUsecase(activityRepo, logger)
	categoryRepo := data.NewCategoryRepo(dataData, logger)
	cateGoryUsecase := biz.NewCateGoryUsecase(categoryRepo, logger)
	appService := service.NewAppService(bannerUsecase, themeUsecase, activityUsecase, cateGoryUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, appService, logger)
	grpcServer := server.NewGRPCServer(confServer, appService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
