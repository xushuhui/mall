// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.19.4
// source: spu.proto

package service

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const (
	OperationSpuGetSaleExplain   = "/sku.service.Spu/GetSaleExplain"
	OperationSpuGetSkuById       = "/sku.service.Spu/GetSkuById"
	OperationSpuGetSpuByCategory = "/sku.service.Spu/GetSpuByCategory"
	OperationSpuGetSpuById       = "/sku.service.Spu/GetSpuById"
	OperationSpuGetSpuLatest     = "/sku.service.Spu/GetSpuLatest"
	OperationSpuListSpuByIds     = "/sku.service.Spu/ListSpuByIds"
)

type SpuHTTPServer interface {
	GetSaleExplain(context.Context, *emptypb.Empty) (*SaleExplains, error)
	GetSkuById(context.Context, *IdRequest) (*SkuVO, error)
	GetSpuByCategory(context.Context, *IdRequest) (*SpuPage, error)
	GetSpuById(context.Context, *IdRequest) (*SpuDetail, error)
	GetSpuLatest(context.Context, *emptypb.Empty) (*SpuPage, error)
	ListSpuByIds(context.Context, *IdsRequest) (*Spus, error)
}

func RegisterSpuHTTPServer(s *http.Server, srv SpuHTTPServer) {
	r := s.Route("/")
	r.GET("/sku/id/{id}", _Spu_GetSkuById0_HTTP_Handler(srv))
	r.GET("/spu/list", _Spu_ListSpuByIds0_HTTP_Handler(srv))
	r.GET("/sale_explain", _Spu_GetSaleExplain0_HTTP_Handler(srv))
	r.GET("/spu/{id}", _Spu_GetSpuById0_HTTP_Handler(srv))
	r.GET("/spu/latest", _Spu_GetSpuLatest0_HTTP_Handler(srv))
	r.GET("/spu/category/{id}", _Spu_GetSpuByCategory0_HTTP_Handler(srv))
}

func _Spu_GetSkuById0_HTTP_Handler(srv SpuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpuGetSkuById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSkuById(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SkuVO)
		return ctx.Result(200, reply)
	}
}

func _Spu_ListSpuByIds0_HTTP_Handler(srv SpuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpuListSpuByIds)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSpuByIds(ctx, req.(*IdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Spus)
		return ctx.Result(200, reply)
	}
}

func _Spu_GetSaleExplain0_HTTP_Handler(srv SpuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpuGetSaleExplain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSaleExplain(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaleExplains)
		return ctx.Result(200, reply)
	}
}

func _Spu_GetSpuById0_HTTP_Handler(srv SpuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpuGetSpuById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpuById(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpuDetail)
		return ctx.Result(200, reply)
	}
}

func _Spu_GetSpuLatest0_HTTP_Handler(srv SpuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpuGetSpuLatest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpuLatest(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpuPage)
		return ctx.Result(200, reply)
	}
}

func _Spu_GetSpuByCategory0_HTTP_Handler(srv SpuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpuGetSpuByCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpuByCategory(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpuPage)
		return ctx.Result(200, reply)
	}
}

type SpuHTTPClient interface {
	GetSaleExplain(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *SaleExplains, err error)
	GetSkuById(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *SkuVO, err error)
	GetSpuByCategory(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *SpuPage, err error)
	GetSpuById(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *SpuDetail, err error)
	GetSpuLatest(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *SpuPage, err error)
	ListSpuByIds(ctx context.Context, req *IdsRequest, opts ...http.CallOption) (rsp *Spus, err error)
}

type SpuHTTPClientImpl struct {
	cc *http.Client
}

func NewSpuHTTPClient(client *http.Client) SpuHTTPClient {
	return &SpuHTTPClientImpl{client}
}

func (c *SpuHTTPClientImpl) GetSaleExplain(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*SaleExplains, error) {
	var out SaleExplains
	pattern := "/sale_explain"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSpuGetSaleExplain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpuHTTPClientImpl) GetSkuById(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*SkuVO, error) {
	var out SkuVO
	pattern := "/sku/id/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSpuGetSkuById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpuHTTPClientImpl) GetSpuByCategory(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*SpuPage, error) {
	var out SpuPage
	pattern := "/spu/category/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSpuGetSpuByCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpuHTTPClientImpl) GetSpuById(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*SpuDetail, error) {
	var out SpuDetail
	pattern := "/spu/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSpuGetSpuById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpuHTTPClientImpl) GetSpuLatest(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*SpuPage, error) {
	var out SpuPage
	pattern := "/spu/latest"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSpuGetSpuLatest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpuHTTPClientImpl) ListSpuByIds(ctx context.Context, in *IdsRequest, opts ...http.CallOption) (*Spus, error) {
	var out Spus
	pattern := "/spu/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSpuListSpuByIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
